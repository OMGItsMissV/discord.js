{"version":3,"sources":["../../src/Client/InternalClient.js"],"names":["zlib","require","GATEWAY_VERSION","libVersion","version","waitFor","condition","value","interval","Promise","resolve","int","setInterval","isDone","clearInterval","delay","ms","setTimeout","InternalClient","constructor","discordClient","setupCalled","setup","apiRequest","method","url","useAuth","data","file","reject","promise","res","rej","buckets","match","channels","get","private_channels","server","id","user","bot","username","self","actualCall","startTime","Date","now","ret","set","token","attach","name","i","hasOwnProperty","undefined","field","send","userAgentInfo","full","end","error","status","client","emit","options","shard","body","done","bucket","queue","sessionID","hasBeenReady","state","IDLE","websocket","userAgent","compress","users","friends","blocked_users","outgoing_friend_requests","incoming_friend_requests","servers","unavailableServers","autoReconnectInterval","unsyncedGuilds","guildSyncQueue","guildSyncQueueLength","intervals","typing","kai","misc","voiceConnections","resolver","readyTime","messageAwaits","tokenCacher","init","cleanIntervals","concat","disconnected","autoReconnect","forEach","vc","leaveVoiceChannel","Math","min","random","email","loginWithToken","password","catch","uptime","info","chann","leave","connection","destroy","resolveChannel","then","channel","Error","type","awaitResponse","msg","resolveMessage","awaitID","author","push","joinVoiceChannel","joinSendWS","sendWS","op","d","joinVoice","session","endpoint","timeout","check","t","guild_id","clearTimeout","removeListener","on","existingServerConn","length","voiceConnection","getGuildMembers","serverID","chunkCount","forceFetchCount","forceFetchLength","requestGuildMembers","forceFetchQueue","query","limit","syncGuild","guildID","checkReady","key","restartServerCreateTimeout","guildCreateTimeout","createServer","region","resolveString","SERVERS","joinServer","invite","resolveInviteID","INVITE","guild","updateServer","resolveServer","newOptions","icon","resolveToBase64","splash","owner","resolveUser","owner_id","verificationLevel","verification_level","afkChannel","afk_channel_id","afkTimeout","afk_timeout","SERVER","leaveServer","srv","ME_SERVER","deleteServer","LOGGED_IN","getGateway","startsWith","createWS","login","tk","getToken","DISCONNECTED","LOGGING_IN","LOGIN","setToken","logout","disconnect","close","LOGOUT","startPM","resUser","ME_CHANNELS","recipient_id","add","gatewayURL","GATEWAY","sendMessage","where","_content","String","basename","path","destination","content","disableEveryone","replace","resolveFile","CHANNEL_MESSAGES","tts","nonce","messages","sendFile","_file","deleteMessage","_message","message","chain","wait","CHANNEL_MESSAGE","remove","deleteMessages","_messages","Array","map","m","updateMessage","update","getChannelLogs","_channel","qsObject","before","after","around","stringify","getMessage","messageID","pinMessage","CHANNEL_PIN","unpinMessage","pinned","getPinnedMessages","CHANNEL_PINS","getBans","SERVER_BANS","ban","createChannel","SERVER_CHANNELS","deleteChannel","CHANNEL","banMember","resolvedUser","unbanMember","kickMember","SERVER_MEMBERS","moveMember","channel_id","voiceChannel","muteMember","mute","unmuteMember","deafenMember","deaf","undeafenMember","setNickname","nick","setNote","note","ME_NOTES","createRole","SERVER_ROLES","role","roles","updateRole","resolveRole","newData","color","hoist","position","permissions","mentionable","perm","deleteRole","addMemberToRole","member","isArray","r","some","memberMap","roleIDs","indexOf","memberHasRole","roledata","rolesOf","removeMemberFromRole","item","splice","createInvite","chanServ","validate","max_age","maxAge","max_uses","maxUses","temporary","xkcdpass","xkcd","CHANNEL_INVITES","deleteInvite","getInvite","has","res2","getInvites","SERVER_INVITES","overwritePermissions","updated","allow","deny","previousOverwrite","permissionOverwrites","CHANNEL_PERMISSIONS","setStatus","idleStatus","game","packet","idle_since","sendTyping","startTyping","stopTyping","updateDetails","avatar","new_password","newPassword","ME","setAvatar","setUsername","setChannelTopic","topic","updateChannel","setChannelName","setChannelPosition","setChannelUserLimit","userLimit","setChannelBitrate","kbitrate","bitrate","user_limit","ceil","_bitrate","addFriend","discriminator","FRIENDS","removeFriend","getServerWebhooks","SERVER_WEBHOOKS","webhook","webhooks","getChannelWebhooks","CHANNEL_WEBHOOKS","editWebhook","resolveWebhook","WEBHOOK","createWebhook","deleteWebhook","sendWebhookMessage","slack","WEBHOOK_MESSAGE","getOAuthApplication","appID","OAUTH2_APPLICATION","ack","object","JSON","endsWith","onopen","onclose","event","code","err","sequence","onerror","e","onmessage","Buffer","inflateSync","toString","parse","s","processPacket","heartbeatAcked","heartbeat","identify","resume","heartbeat_interval","RESUMED","READY","session_id","guilds","unavailable","forceFetchUsers","members","memberCount","pm","relationships","friend","notes","newUser","MESSAGE_CREATE","lastMessageID","fn","MESSAGE_DELETE","MESSAGE_DELETE_BULK","ids","MESSAGE_UPDATE","attachments","embeds","timestamp","mention_everyone","everyoneMentioned","mentions","nmsg","SERVER_CREATE","large","SERVER_DELETE","found","SERVER_UPDATE","newserver","equalsStrict","CHANNEL_CREATE","chan","is_private","CHANNEL_DELETE","CHANNEL_UPDATE","SERVER_ROLE_CREATE","SERVER_ROLE_DELETE","role_id","SERVER_ROLE_UPDATE","newRole","SERVER_MEMBER_ADD","selfMute","selfDeaf","joinedAt","joined_at","SERVER_MEMBER_REMOVE","SERVER_MEMBER_UPDATE","oldMember","self_mute","self_deaf","PRESENCE_UPDATE","presenceUser","USER_UPDATE","TYPING","user_id","since","SERVER_BAN_ADD","SERVER_BAN_REMOVE","USER_NOTE_UPDATE","oldNote","updatedUser","VOICE_STATE_UPDATE","eventVoiceStateUpdate","eventVoiceLeave","SERVER_MEMBERS_CHUNK","testtime","FRIEND_ADD","inUser","outUser","FRIEND_REMOVE","rejectedUser","incomingCancel","SERVER_SYNC","dataUser","internal","presence","presences","pendingVoiceStates","voiceState","eventVoiceJoin","seq","v","large_threshold","largeThreshold","properties","process","platform"],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;;AAEA,IAAIC,kBAAkB,CAAtB;AACA,IAAIC,aAAaF,QAAQ,oBAAR,EAA8BG,OAA/C;;AAEA,SAASC,OAAT,CAAiBC,SAAjB,EAA4BC,QAAQD,SAApC,EAA+CE,WAAW,EAA1D,EAA8D;AAC5D,SAAO,IAAIC,OAAJ,CAAYC,WAAW;AAC5B,QAAIC,MAAMC,YAAY,MAAM;AAC1B,UAAIC,SAASP,WAAb;AACA,UAAIO,MAAJ,EAAY;AACV,YAAIP,cAAcC,KAAlB,EAAyB;AACvBG,kBAAQG,MAAR;AACD,SAFD,MAEO;AACLH,kBAAQH,MAAMM,MAAN,CAAR;AACD;AACD,eAAOC,cAAcH,GAAd,CAAP;AACD;AACF,KAVS,EAUPH,QAVO,CAAV;AAWD,GAZM,CAAP;AAaD;;AAED,SAASO,KAAT,CAAeC,EAAf,EAAmB;AACjB,SAAO,IAAIP,OAAJ,CAAYC,WAAWO,WAAWP,OAAX,EAAoBM,EAApB,CAAvB,CAAP;AACD;;AAEc,MAAME,cAAN,CAAqB;AACnCC,cAAYC,aAAZ,EAA2B;AACzB,SAAKC,WAAL,GAAmB,KAAnB;AACD,SAAKC,KAAL,CAAWF,aAAX;AACA;;AAEAG,aAAWC,MAAX,EAAmBC,GAAnB,EAAwBC,OAAxB,EAAiCC,IAAjC,EAAuCC,IAAvC,EAA6C;AAC3C,QAAIlB,OAAJ,EAAamB,MAAb;AACA,QAAIC,UAAU,IAAIrB,OAAJ,CAAY,CAACsB,GAAD,EAAMC,GAAN,KAAc;AACtCtB,gBAAUqB,GAAV;AACAF,eAASG,GAAT;AACD,KAHa,CAAd;AAIA,QAAIC,UAAU,EAAd;AACA,QAAIC,QAAQT,IAAIS,KAAJ,CAAU,4CAAV,CAAZ;AACA,QAAIA,KAAJ,EAAW;AACT,UAAIV,WAAW,KAAX,KAAqBU,MAAM,CAAN,IAAW,KAAKC,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBF,MAAM,CAAN,CAAxB,KAAqC,KAAKG,gBAAL,CAAsBD,GAAtB,CAA0B,IAA1B,EAAgCF,MAAM,CAAN,CAAhC,CAArE,CAAJ,EAAqH;AACnHD,kBAAU,CAAC,UAAU,CAACC,MAAM,CAAN,EAASI,MAAT,IAAmB,EAApB,EAAwBC,EAAnC,CAAV;AACD,OAFD,MAEO,IAAI,KAAKC,IAAL,CAAUC,GAAd,EAAmB;AACxB,YAAIjB,WAAW,MAAX,IAAqBA,WAAW,OAApC,EAA6C;AAC3C,cAAI,KAAKa,gBAAL,CAAsBD,GAAtB,CAA0B,IAA1B,EAAgCF,MAAM,CAAN,CAAhC,CAAJ,EAA+C;AAC7CD,sBAAU,CAAC,YAAD,EAAe,gBAAf,CAAV;AACD,WAFD,MAEO,IAAKC,MAAM,CAAN,IAAW,KAAKC,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBF,MAAM,CAAN,CAAxB,CAAhB,EAAoD;AACzDD,sBAAU,CAAC,mBAAmBC,MAAM,CAAN,EAASI,MAAT,CAAgBC,EAApC,EAAwC,gBAAxC,CAAV;AACD;AACF;AACF,OARM,MAQA;AACLN,kBAAU,CAAC,KAAD,CAAV;AACD;AACF,KAdD,MAcO,IAAIT,WAAW,OAAf,EAAwB;AAC7B,UAAIC,QAAQ,YAAR,IAAwB,KAAKe,IAA7B,IAAqCb,KAAKe,QAA1C,IAAsDf,KAAKe,QAAL,KAAkB,KAAKF,IAAL,CAAUE,QAAtF,EAAgG;AAC9FT,kBAAU,CAAC,UAAD,CAAV;AACD,OAFD,MAEO,IAAKC,QAAQT,IAAIS,KAAJ,CAAU,sCAAV,CAAb,EAAiE;AACtED,kBAAU,CAAC,kBAAkBC,MAAM,CAAN,CAAnB,CAAV;AACD,OAFM,MAEA,IAAKA,QAAQT,IAAIS,KAAJ,CAAU,yCAAV,CAAb,EAAoE;AACzED,kBAAU,CAAC,uBAAuBC,MAAM,CAAN,CAAxB,CAAV;AACD;AACF;;AAED,QAAIS,OAAO,IAAX;;AAEA,QAAIC,aAAa,YAAY;AAC3B,UAAIC,YAAYC,KAAKC,GAAL,EAAhB;AACA,UAAIC,MAAM,qBAAQxB,MAAR,EAAgBC,GAAhB,CAAV;AACA,UAAIC,OAAJ,EAAa;AACXsB,YAAIC,GAAJ,CAAQ,eAAR,EAAyBN,KAAKO,KAA9B;AACD;AACD,UAAItB,IAAJ,EAAU;AACRoB,YAAIG,MAAJ,CAAW,MAAX,EAAmBvB,KAAKA,IAAxB,EAA8BA,KAAKwB,IAAnC;AACA,YAAIzB,IAAJ,EAAU;AACR,eAAK,IAAI0B,CAAT,IAAc1B,IAAd,EAAoB;AAClB,gBAAIA,KAAK2B,cAAL,CAAoBD,CAApB,CAAJ,EAA4B;AAC1B,kBAAI1B,KAAK0B,CAAL,MAAYE,SAAhB,EAA2B;AACzBP,oBAAIQ,KAAJ,CAAUH,CAAV,EAAa1B,KAAK0B,CAAL,CAAb;AACD;AACF;AACF;AACF;AACF,OAXD,MAWO,IAAI1B,IAAJ,EAAU;AACfqB,YAAIS,IAAJ,CAAS9B,IAAT;AACD;AACDqB,UAAIC,GAAJ,CAAQ,YAAR,EAAsBN,KAAKe,aAAL,CAAmBC,IAAzC;AACAX,UAAIY,GAAJ,CAAQ,CAACC,KAAD,EAAQlC,IAAR,KAAiB;AACvB,YAAIkC,KAAJ,EAAW;AACT,cAAIlC,QAAQA,KAAKmC,MAAL,KAAgB,GAA5B,EAAiC;AAC/BnB,iBAAKoB,MAAL,CAAYC,IAAZ,CAAiB,OAAjB,EAA0B,wBAAwBvC,GAAxB,GAA8B,KAA9B,GAAsCkB,KAAKoB,MAAL,CAAYE,OAAZ,CAAoBC,KAA1D,GAAkE,YAAlE,GAAiFjC,OAAjF,GAA2F,KAA3F,IAAoGa,KAAKC,GAAL,KAAaF,SAAjH,IAA8H,YAAxJ;AACD;AACDhB,iBAAOgC,KAAP;AACD,SALD,MAKO;AACLnD,kBAAQiB,KAAKwC,IAAb;AACD;AACF,OATD;AAUD,KA/BD;AAgCA,QAAI9D,UAAU,CAAd;AACA,QAAIgD,IAAI,CAAR;AACA,QAAIe,OAAO,YAAY;AACrB,UAAI,EAAEf,CAAF,KAAQhD,OAAZ,EAAqB;AACnBuC;AACD;AACF,KAJD;AAKA,SAAK,IAAIyB,MAAT,IAAmBpC,OAAnB,EAA4B;AAC1B,QAAE5B,OAAF;AACA,WAAK4B,OAAL,CAAaoC,MAAb,EAAqBC,KAArB,CAA2BF,IAA3B;AACD;AACDA;AACA,WAAOtC,OAAP;AACD;;AAEDR,QAAMF,aAAN,EAAqB;AACpB,SAAKmD,SAAL,GAAiB,KAAjB;AACA,SAAKC,YAAL,GAAoB,KAApB;AACC,SAAKnD,WAAL,GAAmB,IAAnB;AACAD,oBAAgBA,iBAAiB,KAAK2C,MAAtC;AACA,SAAKA,MAAL,GAAc3C,aAAd;AACA,SAAKqD,KAAL,GAAa,0BAAgBC,IAA7B;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,SAAL,GAAiB;AACfnD,WAAK,yCADU;AAEfrB,eAASD;AAFM,KAAjB;;AAKA,QAAI,KAAK4D,MAAL,CAAYE,OAAZ,CAAoBY,QAAxB,EAAkC;AAChC7E,aAAOC,QAAQ,MAAR,CAAP;AACD;;AAED;AACA,SAAK6E,KAAL,GAAa,qBAAb;AACA,SAAKC,OAAL,GAAe,qBAAf;AACA,SAAKC,aAAL,GAAqB,qBAArB;AACA,SAAKC,wBAAL,GAAgC,qBAAhC;AACA,SAAKC,wBAAL,GAAgC,qBAAhC;AACA,SAAK/C,QAAL,GAAgB,qBAAhB;AACA,SAAKgD,OAAL,GAAe,qBAAf;AACA,SAAKC,kBAAL,GAA0B,qBAA1B;AACA,SAAK/C,gBAAL,GAAwB,qBAAxB;AACA,SAAKgD,qBAAL,GAA6B,IAA7B;AACA,SAAKC,cAAL,GAAsB,CAAtB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,oBAAL,GAA4B,CAA5B;;AAEA,SAAKC,SAAL,GAAiB;AACfC,cAAQ,EADO;AAEfC,WAAK,IAFU;AAGfC,YAAM;AAHS,KAAjB;;AAMA,SAAKC,gBAAL,GAAwB,qBAAxB;AACA,SAAKC,QAAL,GAAgB,uBAAa,IAAb,CAAhB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAK/D,OAAL,GAAe;AACb,oBAAc,qBAAW,CAAX,EAAc,IAAd,CADD;AAEb,wBAAkB,qBAAW,EAAX,EAAe,KAAf,CAFL;AAGb,aAAO,qBAAW,EAAX,EAAe,KAAf,CAHM;AAIb,wBAAkB,qBAAW,CAAX,EAAc,IAAd,CAJL;AAKb,kBAAY,qBAAW,CAAX,EAAc,OAAd;AALC,KAAf;;AAQA,QAAI,CAAC,KAAKgE,WAAV,EAAuB;AACrB,WAAKA,WAAL,GAAmB,0BAAgB,KAAKlC,MAArB,CAAnB;AACA,WAAKkC,WAAL,CAAiBC,IAAjB,CAAsB,CAAtB;AACD;AACF;;AAEDC,mBAAiB;AACf,SAAK,IAAI3F,QAAT,IAAqB,KAAKiF,SAAL,CAAeC,MAAf,CAAsBU,MAAtB,CAA6B,KAAKX,SAAL,CAAeG,IAA5C,EAAkDQ,MAAlD,CAAyD,KAAKX,SAAL,CAAeE,GAAxE,CAArB,EAAmG;AACjG,UAAInF,QAAJ,EAAc;AACZM,sBAAcN,QAAd;AACD;AACF;AACF;;AAED6F,eAAaC,gBAAgB,KAA7B,EAAoC;;AAElC,SAAKH,cAAL;;AAEA,SAAKN,gBAAL,CAAsBU,OAAtB,CAA8BC,MAAM;AAClC,WAAKC,iBAAL,CAAuBD,EAAvB;AACD,KAFD;;AAIA,QAAIF,aAAJ,EAAmB;AACjB,WAAKjB,qBAAL,GAA6BqB,KAAKC,GAAL,CAAS,KAAKtB,qBAAL,IAA8BqB,KAAKE,MAAL,KAAgB,CAA9C,CAAT,EAA2D,KAA3D,CAA7B;AACA3F,iBAAW,MAAM;AACf,YAAI,CAAC,KAAK4F,KAAN,IAAe,CAAC,KAAK3D,KAAzB,EAAgC;AAC9B;AACD;;AAED;AACA,aAAK4D,cAAL,CAAoB,KAAK5D,KAAzB,EAAgC,KAAK2D,KAArC,EAA4C,KAAKE,QAAjD,EAA2DC,KAA3D,CAAiE,MAAM,KAAKX,YAAL,CAAkB,IAAlB,CAAvE;AACD,OAPD,EAOG,KAAKhB,qBAPR;AAQD;;AAED,SAAKtB,MAAL,CAAYC,IAAZ,CAAiB,cAAjB;AACD;;AAED,MAAIiD,MAAJ,GAAa;AACX,WAAQ,KAAKlB,SAAL,GAAiBjD,KAAKC,GAAL,KAAa,KAAKgD,SAAnC,GAA+C,IAAvD;AACD;;AAED,MAAInB,SAAJ,CAAcsC,IAAd,EAAoB;AAClBA,SAAKvD,IAAL,GAAa,gBAAcuD,KAAKzF,GAAI,OAAIyF,KAAK9G,OAAQ,IAArD;AACA,SAAKsD,aAAL,GAAqBwD,IAArB;AACD;;AAED,MAAItC,SAAJ,GAAgB;AACd,WAAO,KAAKlB,aAAZ;AACD;;AAED;AACA+C,oBAAkBU,KAAlB,EAAyB;AACvB,QAAI,KAAK3E,IAAL,CAAUC,GAAd,EAAmB;AACjB,UAAI2E,QAASC,UAAD,IAAgB;AAC1B,eAAO,IAAI5G,OAAJ,CAAaC,OAAD,IAAa;AAC9B2G,qBAAWC,OAAX;AACA5G;AACD,SAHM,CAAP;AAID,OALD;;AAOA,UAAIyG,uCAAJ,EAAmC;AACjC,eAAO,KAAKrB,QAAL,CAAcyB,cAAd,CAA6BJ,KAA7B,EAAoCK,IAApC,CAAyCC,WAAW;AACzD,cAAI,CAACA,OAAL,EAAc;AACZ,mBAAOhH,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,8BAAV,CAAf,CAAP;AACD;;AAED,cAAID,QAAQE,IAAR,KAAiB,CAArB,EAAwB;AACtB,mBAAOlH,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,iCAAV,CAAf,CAAP;AACD;;AAED,cAAIL,aAAa,KAAKxB,gBAAL,CAAsBzD,GAAtB,CAA0B,cAA1B,EAA0CqF,OAA1C,CAAjB;AACA,cAAI,CAACJ,UAAL,EAAiB;AACf,mBAAO5G,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,qCAAV,CAAf,CAAP;AACD;AACD,iBAAON,MAAMC,UAAN,CAAP;AACD,SAdM,CAAP;AAeD,OAhBD,MAgBO,IAAIF,0CAAJ,EAAsC;AAC3C,eAAOC,MAAMD,KAAN,CAAP;AACD,OAFM,MAEA;AACL,eAAO1G,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,2CAAV,CAAf,CAAP;AACD;AACF,KA7BD,MA6BO;AACL;AACA,UAAI,KAAK7B,gBAAL,CAAsB,CAAtB,CAAJ,EAA8B;AAC5B,aAAKA,gBAAL,CAAsB,CAAtB,EAAyByB,OAAzB;AACD;AACD,aAAO7G,QAAQC,OAAR,EAAP;AACD;AACF;;AAED;AACAkH,gBAAcC,GAAd,EAAmB;AACjB,WAAO,IAAIpH,OAAJ,CAAY,CAACC,OAAD,EAAUmB,MAAV,KAAqB;;AAEtCgG,YAAM,KAAK/B,QAAL,CAAcgC,cAAd,CAA6BD,GAA7B,CAAN;;AAEA,UAAI,CAACA,GAAL,EAAU;AACRhG,eAAO,IAAI6F,KAAJ,CAAU,mBAAV,CAAP;AACA;AACD;;AAED,UAAIK,UAAUF,IAAIJ,OAAJ,CAAYlF,EAAZ,GAAiBsF,IAAIG,MAAJ,CAAWzF,EAA1C;;AAEA,UAAI,CAAC,KAAKyD,aAAL,CAAmB+B,OAAnB,CAAL,EAAkC;AAChC,aAAK/B,aAAL,CAAmB+B,OAAnB,IAA8B,EAA9B;AACD;;AAED,WAAK/B,aAAL,CAAmB+B,OAAnB,EAA4BE,IAA5B,CAAiCvH,OAAjC;AACD,KAhBM,CAAP;AAiBD;;AAED;AACAwH,mBAAiBf,KAAjB,EAAwB;AACtB,WAAO,KAAKrB,QAAL,CAAcyB,cAAd,CAA6BJ,KAA7B,EAAoCK,IAApC,CAAyCC,WAAW;AACzD,UAAI,CAACA,OAAL,EAAc;AACZ,eAAOhH,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,8BAAV,CAAf,CAAP;AACD;;AAED,UAAID,QAAQE,IAAR,KAAiB,CAArB,EAAwB;AACtB,eAAOlH,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,iCAAV,CAAf,CAAP;AACD;;AAED,UAAIS,aAAa,MAAM;AACrB,aAAKC,MAAL,CAAY;AACVC,cAAI,CADM;AAEVC,aAAG;AACD,wBAAYb,QAAQnF,MAAR,CAAeC,EAD1B;AAED,0BAAckF,QAAQlF,EAFrB;AAGD,yBAAa,KAHZ;AAID,yBAAa;AAJZ;AAFO,SAAZ;AASD,OAVD;;AAYA,UAAIgG,YAAY,MAAM;AACpB,eAAO,IAAI9H,OAAJ,CAAY,CAACC,OAAD,EAAUmB,MAAV,KAAqB;AACtC,cAAI2G,UAAU,KAAKjE,SAAnB;AAAA,cAA8BrB,KAA9B;AAAA,cAAqCZ,SAASmF,QAAQnF,MAAtD;AAAA,cAA8DmG,QAA9D;;AAEA,cAAIC,UAAU,IAAd;;AAEA,cAAIC,QAAQhH,QAAQ;AAClB,gBAAIA,KAAKiH,CAAL,KAAW,qBAAf,EAAsC;AACpC,kBAAIjH,KAAK2G,CAAL,CAAOO,QAAP,KAAoBvG,OAAOC,EAA/B,EAAmC,OADC,CACO;AAC3CW,sBAAQvB,KAAK2G,CAAL,CAAOpF,KAAf;AACAuF,yBAAW9G,KAAK2G,CAAL,CAAOG,QAAlB;AACA,kBAAI,CAACvF,KAAD,IAAU,CAACuF,QAAf,EAAyB;AACzB;;;;;AAKA;AACA;AACA;;AAEA/H,sBAAQ,EAAE+G,OAAF,EAAW1D,QAAQ,KAAKA,MAAxB,EAAgCyE,OAAhC,EAAyCtF,KAAzC,EAAgDZ,MAAhD,EAAwDmG,QAAxD,EAAR;;AAEA,kBAAIC,OAAJ,EAAa;AACXI,6BAAaJ,OAAb;AACD;AACD,mBAAK3E,MAAL,CAAYgF,cAAZ,CAA2B,KAA3B,EAAkCJ,KAAlC;AACD;AACF,WAtBD;;AAwBAD,oBAAUzH,WAAW,MAAM;AACzB,iBAAK8C,MAAL,CAAYgF,cAAZ,CAA2B,KAA3B,EAAkCJ,KAAlC;AACA9G,mBAAO,IAAI6F,KAAJ,CAAU,2CAAV,CAAP;AACD,WAHS,EAGP,KAHO,CAAV;;AAKA,eAAK3D,MAAL,CAAYiF,EAAZ,CAAe,KAAf,EAAsBL,KAAtB;AACAR;AACD,SApCM,CAAP;AAqCD,OAtCD;;AAwCA,UAAIc,qBAAqB,KAAKpD,gBAAL,CAAsBzD,GAAtB,CAA0B,QAA1B,EAAoCqF,QAAQnF,MAA5C,CAAzB,CA7DyD,CA6DqB;AAC9E,UAAI2G,kBAAJ,EAAwB;AACtBd,qBADsB,CACR;AACd,eAAO1H,QAAQC,OAAR,CAAgBuI,kBAAhB,CAAP;AACD;;AAED,UAAI,CAAC,KAAKzG,IAAL,CAAUC,GAAX,IAAkB,KAAKoD,gBAAL,CAAsBqD,MAAtB,GAA+B,CAArD,EAAwD;AAAE;AACxD,eAAO,KAAKzC,iBAAL,GAAyBe,IAAzB,CAA8Be,SAA9B,CAAP;AACD;;AAED,aAAOA,WAAP;AACD,KAxEM,CAAP;AAyED;;AAED;AACA;AACA,MAAIY,eAAJ,GAAsB;AACpB,WAAO,KAAKtD,gBAAL,CAAsB,CAAtB,CAAP;AACD;;AAEDuD,kBAAgBC,QAAhB,EAA0BC,UAA1B,EAAsC;AACpC,SAAKC,eAAL,CAAqBF,QAArB,IAAiCC,UAAjC;AACA,QAAI,KAAKE,gBAAL,GAAwB,CAAxB,GAA4BH,SAASH,MAArC,GAA8C,IAAlD,EAAwD;AAAE;AACxD,WAAKO,mBAAL,CAAyB,KAAKC,eAA9B;AACA,WAAKA,eAAL,GAAuB,CAACL,QAAD,CAAvB;AACA,WAAKG,gBAAL,GAAwB,IAAIH,SAASH,MAAb,GAAsB,CAA9C;AACD,KAJD,MAIO;AACL,WAAKQ,eAAL,CAAqBzB,IAArB,CAA0BoB,QAA1B;AACA,WAAKG,gBAAL,IAAyBH,SAASH,MAAT,GAAkB,CAA3C;AACD;AACF;;AAEDO,sBAAoBJ,QAApB,EAA8BM,KAA9B,EAAqCC,KAArC,EAA4C;AAC1C,SAAKxB,MAAL,CAAY;AACVC,UAAI,CADM;AAEVC,SAAG;AACDO,kBAAUQ,QADT;AAEDM,eAAOA,SAAS,EAFf;AAGDC,eAAOA,SAAS;AAHf;AAFO,KAAZ;AAQD;;AAEDC,YAAUC,OAAV,EAAmB;AACjB,QAAI,KAAKtE,oBAAL,GAA4B,CAA5B,GAAgCsE,QAAQZ,MAAxC,GAAiD,IAArD,EAA2D;AAAE;AAC3D,WAAKd,MAAL,CAAY,EAACC,IAAI,EAAL,EAASC,GAAG,KAAK/C,cAAjB,EAAZ;AACA,WAAKA,cAAL,GAAsB,CAACuE,OAAD,CAAtB;AACA,WAAKtE,oBAAL,GAA4B,IAAIsE,QAAQZ,MAAZ,GAAqB,CAAjD;AACD,KAJD,MAIO;AACL,WAAK3D,cAAL,CAAoB0C,IAApB,CAAyB6B,OAAzB;AACA,WAAKtE,oBAAL,IAA6BsE,QAAQZ,MAAR,GAAiB,CAA9C;AACD;AACF;;AAEDa,eAAa;AACX,QAAI,CAAC,KAAKhE,SAAV,EAAqB;AACnB,UAAI,KAAKR,cAAL,CAAoB2D,MAApB,GAA6B,CAAjC,EAAoC;AAClC,aAAKd,MAAL,CAAY,EAACC,IAAI,EAAL,EAASC,GAAG,KAAK/C,cAAjB,EAAZ;AACA,aAAKA,cAAL,GAAsB,EAAtB;AACA,aAAKC,oBAAL,GAA4B,CAA5B;AACA;AACD;AACD,UAAI,KAAKF,cAAL,GAAsB,CAA1B,EAA6B;AAC3B;AACD;AACD,UAAI,KAAKoE,eAAL,CAAqBR,MAArB,GAA8B,CAAlC,EAAqC;AACnC,aAAKO,mBAAL,CAAyB,KAAKC,eAA9B;AACA,aAAKA,eAAL,GAAuB,EAAvB;AACA,aAAKF,gBAAL,GAAwB,CAAxB;AACD,OAJD,MAIO;AACL,aAAK,IAAIQ,GAAT,IAAgB,KAAKT,eAArB,EAAsC;AACpC,cAAI,KAAKA,eAAL,CAAqBjG,cAArB,CAAoC0G,GAApC,CAAJ,EAA8C;AAC5C;AACD;AACF;AACD,aAAKjE,SAAL,GAAiBjD,KAAKC,GAAL,EAAjB;AACA,aAAKgB,MAAL,CAAYC,IAAZ,CAAiB,OAAjB;AACD;AACF;AACF;;AAEDiG,+BAA6B;AAC3B,QAAI,KAAKC,kBAAT,EAA6B;AAC3BpB,mBAAa,KAAKoB,kBAAlB;AACA,WAAKA,kBAAL,GAA0B,IAA1B;AACD;AACD,QAAI,CAAC,KAAKnE,SAAV,EAAqB;AACnB,WAAKmE,kBAAL,GAA0BjJ,WAAW,MAAM;AACzC,aAAK8I,UAAL;AACD,OAFyB,EAEvB,KAAKhG,MAAL,CAAYE,OAAZ,CAAoBiG,kBAFG,CAA1B;AAGD;AACF;;AAED;AACAC,eAAa/G,IAAb,EAAmBgH,SAAS,QAA5B,EAAsC;AACpChH,WAAO,KAAK0C,QAAL,CAAcuE,aAAd,CAA4BjH,IAA5B,CAAP;;AAEA,WAAO,KAAK7B,UAAL,CAAgB,MAAhB,EAAwB,qBAAU+I,OAAlC,EAA2C,IAA3C,EAAiD,EAAClH,IAAD,EAAOgH,MAAP,EAAjD,EACJ5C,IADI,CACCzF,OAAO;AACX;AACA,aAAO1B,QAAQ,MAAM,KAAK8E,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBL,IAAIQ,EAA3B,CAAd,CAAP;AACD,KAJI,CAAP;AAKD;;AAED;AACAgI,aAAWC,MAAX,EAAmB;AACjBA,aAAS,KAAK1E,QAAL,CAAc2E,eAAd,CAA8BD,MAA9B,CAAT;AACA,QAAI,CAACA,MAAL,EAAa;AACX,aAAO/J,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,oBAAV,CAAf,CAAP;AACD;;AAED,WAAO,KAAKnG,UAAL,CAAgB,MAAhB,EAAwB,qBAAUmJ,MAAV,CAAiBF,MAAjB,CAAxB,EAAkD,IAAlD,EACJhD,IADI,CACCzF,OAAO;AACX;AACA,aAAO1B,QAAQ,MAAM,KAAK8E,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBL,IAAI4I,KAAJ,CAAUpI,EAAjC,CAAd,CAAP;AACD,KAJI,CAAP;AAKD;;AAED;AACAqI,eAAatI,MAAb,EAAqB2B,OAArB,EAA8B;AAC5B3B,aAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BvI,MAA5B,CAAT;AACA,QAAI,CAACA,MAAL,EAAa;AACX,aAAO7B,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,wBAAV,CAAf,CAAP;AACD;;AAED,QAAIoD,aAAa;AACf1H,YAAMa,QAAQb,IAAR,IAAgBd,OAAOc,IADd;AAEfgH,cAAQnG,QAAQmG,MAAR,IAAkB9H,OAAO8H;AAFlB,KAAjB;;AAKA,QAAInG,QAAQ8G,IAAZ,EAAkB;AAChBD,iBAAWC,IAAX,GAAkB,KAAKjF,QAAL,CAAckF,eAAd,CAA8B/G,QAAQ8G,IAAtC,CAAlB;AACD;AACD,QAAI9G,QAAQgH,MAAZ,EAAoB;AAClBH,iBAAWG,MAAX,GAAoB,KAAKnF,QAAL,CAAckF,eAAd,CAA8B/G,QAAQgH,MAAtC,CAApB;AACD;AACD,QAAIhH,QAAQiH,KAAZ,EAAmB;AACjB,UAAI1I,OAAO,KAAKsD,QAAL,CAAcqF,WAAd,CAA0BlH,QAAQiH,KAAlC,CAAX;AACA,UAAI,CAAC1I,IAAL,EAAW;AACT,eAAO/B,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,6BAAV,CAAf,CAAP;AACD;AACDzD,cAAQmH,QAAR,GAAmB5I,KAAKD,EAAxB;AACD;AACD,QAAI0B,QAAQoH,iBAAZ,EAA+B;AAC7BpH,cAAQqH,kBAAR,GAA6B9I,KAAK6I,iBAAlC;AACD;AACD,QAAIpH,QAAQsH,UAAZ,EAAwB;AACtB,UAAI9D,UAAU,KAAK3B,QAAL,CAAcqF,WAAd,CAA0BlH,QAAQsH,UAAlC,CAAd;AACA,UAAI,CAAC9D,OAAL,EAAc;AACZ,eAAOhH,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,kCAAV,CAAf,CAAP;AACD;AACDzD,cAAQuH,cAAR,GAAyB/D,QAAQlF,EAAjC;AACD;AACD,QAAI0B,QAAQwH,UAAZ,EAAwB;AACtBxH,cAAQyH,WAAR,GAAsBzH,QAAQwH,UAA9B;AACD;;AAED,WAAO,KAAKlK,UAAL,CAAgB,OAAhB,EAAyB,qBAAUoK,MAAV,CAAiBrJ,OAAOC,EAAxB,CAAzB,EAAsD,IAAtD,EAA4D0B,OAA5D,EACJuD,IADI,CACCzF,OAAO;AACX;AACA,aAAO1B,QAAQ,MACZ,KAAK8E,OAAL,CAAa/C,GAAb,CAAiB,MAAjB,EAAyBL,IAAIqB,IAA7B,IAAuC,KAAK+B,OAAL,CAAa/C,GAAb,CAAiB,MAAjB,EAAyBL,IAAIqB,IAA7B,EAAmCgH,MAAnC,KAA8CrI,IAAIqI,MAAnD,GAA6D,KAAKjF,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBL,IAAIQ,EAA3B,CAA7D,GAA8F,KAApI,GAA6I,KADzI,CAAP;AAED,KALI,CAAP;AAMD;;AAED;AACAqJ,cAAYC,GAAZ,EAAiB;AACf,QAAIvJ,SAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BgB,GAA5B,CAAb;AACA,QAAI,CAACvJ,MAAL,EAAa;AACX,aAAO7B,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,wBAAV,CAAf,CAAP;AACD;;AAED,WAAO,KAAKnG,UAAL,CAAgB,KAAhB,EAAuB,qBAAUuK,SAAV,CAAoBxJ,OAAOC,EAA3B,CAAvB,EAAuD,IAAvD,CAAP;AACD;;AAED;AACAwJ,eAAaF,GAAb,EAAkB;AAChB,QAAIvJ,SAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BgB,GAA5B,CAAb;AACA,QAAI,CAACvJ,MAAL,EAAa;AACX,aAAO7B,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,wBAAV,CAAf,CAAP;AACD;;AAED,WAAO,KAAKnG,UAAL,CAAgB,KAAhB,EAAuB,qBAAUoK,MAAV,CAAiBrJ,OAAOC,EAAxB,CAAvB,EAAoD,IAApD,CAAP;AACD;;AAED;AACA;AACAuE,iBAAe5D,KAAf,EAAsB2D,KAAtB,EAA6BE,QAA7B,EAAuC;AACrC,QAAI,CAAC,KAAK1F,WAAV,EAAuB;AACrB,WAAKC,KAAL;AACD;;AAED,SAAKmD,KAAL,GAAa,0BAAgBuH,SAA7B;AACA,SAAK9I,KAAL,GAAaA,KAAb;AACA,SAAK2D,KAAL,GAAaA,KAAb;AACA,SAAKE,QAAL,GAAgBA,QAAhB;;AAEA,QAAIpE,OAAO,IAAX;AACA,WAAO,KAAKsJ,UAAL,GACJzE,IADI,CACC/F,OAAO;AACXkB,WAAKO,KAAL,GAAaP,KAAKoB,MAAL,CAAYE,OAAZ,CAAoBxB,GAApB,IAA2B,CAACE,KAAKO,KAAL,CAAWgJ,UAAX,CAAsB,MAAtB,CAA5B,GAA6D,QAAMvJ,KAAKO,KAAM,GAA9E,GAAkFP,KAAKO,KAApG;AACAP,WAAKwJ,QAAL,CAAc1K,GAAd;AACA,aAAOkB,KAAKO,KAAZ;AACD,KALI,CAAP;AAMD;;AAED;AACAkJ,QAAMvF,KAAN,EAAaE,QAAb,EAAuB;AACrB,QAAIhD,SAAS,KAAKA,MAAlB;;AAEA,QAAI,CAAC,KAAKkC,WAAL,CAAiB7B,IAAtB,EAA4B;AAC1B,aAAO,IAAI3D,OAAJ,CAAY,CAACC,OAAD,EAAUmB,MAAV,KAAqB;AACtCZ,mBAAW,MAAM;AACf,eAAKmL,KAAL,CAAWvF,KAAX,EAAkBE,QAAlB,EAA4BS,IAA5B,CAAiC9G,OAAjC,EAA0CsG,KAA1C,CAAgDnF,MAAhD;AACD,SAFD,EAEG,EAFH;AAGD,OAJM,CAAP;AAKD,KAND,MAMO;AACL,UAAIwK,KAAK,KAAKpG,WAAL,CAAiBqG,QAAjB,CAA0BzF,KAA1B,EAAiCE,QAAjC,CAAT;AACA,UAAIsF,EAAJ,EAAQ;AACN,aAAKtI,MAAL,CAAYC,IAAZ,CAAiB,OAAjB,EAA0B,8CAA1B;AACA,eAAO,KAAK8C,cAAL,CAAoBuF,EAApB,EAAwBxF,KAAxB,EAA+BE,QAA/B,CAAP;AACD;AACF;;AAED,QAAI,KAAKtC,KAAL,KAAe,0BAAgB8H,YAA/B,IAA+C,KAAK9H,KAAL,KAAe,0BAAgBC,IAAlF,EAAwF;AACtF,aAAOjE,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,qCAAV,CAAf,CAAP;AACD;;AAED,SAAKjD,KAAL,GAAa,0BAAgB+H,UAA7B;;AAEA,WAAO,KAAKjL,UAAL,CAAgB,MAAhB,EAAwB,qBAAUkL,KAAlC,EAAyC,KAAzC,EAAgD;AACrD5F,WADqD;AAErDE;AAFqD,KAAhD,EAIJS,IAJI,CAICzF,OAAO;AACX,WAAKgC,MAAL,CAAYC,IAAZ,CAAiB,OAAjB,EAA0B,gDAA1B;AACA,UAAId,QAAQnB,IAAImB,KAAhB;AACA,WAAK+C,WAAL,CAAiByG,QAAjB,CAA0B7F,KAA1B,EAAiCE,QAAjC,EAA2C7D,KAA3C;AACA,aAAO,KAAK4D,cAAL,CAAoB5D,KAApB,EAA2B2D,KAA3B,EAAkCE,QAAlC,CAAP;AACD,KATI,EASFlD,SAAS;AACV,WAAKc,SAAL,GAAiB,IAAjB;AACA,YAAMd,KAAN;AACD,KAZI,EAaJmD,KAbI,CAaEnD,SAAS;AACd,WAAKc,SAAL,GAAiB,IAAjB;AACA,WAAKF,KAAL,GAAa,0BAAgB8H,YAA7B;AACAxI,aAAOC,IAAP,CAAY,cAAZ;AACA,YAAMH,KAAN;AACD,KAlBI,CAAP;AAmBD;;AAED;AACA8I,WAAS;AACP,QAAI,KAAKlI,KAAL,KAAe,0BAAgB8H,YAA/B,IAA+C,KAAK9H,KAAL,KAAe,0BAAgBC,IAAlF,EAAwF;AACtF,aAAOjE,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,0BAAV,CAAf,CAAP;AACD;;AAED,QAAIkF,aAAa,MAAM;AACrB,UAAI,KAAKjI,SAAT,EAAoB;AAClB,aAAKA,SAAL,CAAekI,KAAf,CAAqB,IAArB;AACA,aAAKlI,SAAL,GAAiB,IAAjB;AACD;AACD,WAAKzB,KAAL,GAAa,IAAb;AACA,WAAK2D,KAAL,GAAa,IAAb;AACA,WAAKE,QAAL,GAAgB,IAAhB;AACA,WAAKtC,KAAL,GAAa,0BAAgB8H,YAA7B;AACA,aAAO9L,QAAQC,OAAR,EAAP;AACD,KAVD;;AAYA,QAAI,CAAC,KAAK8B,IAAL,CAAUC,GAAf,EAAoB;AAClB,aAAO,KAAKlB,UAAL,CAAgB,MAAhB,EAAwB,qBAAUuL,MAAlC,EAA0C,IAA1C,EACJtF,IADI,CACCoF,UADD,CAAP;AAED,KAHD,MAGO;AACL,aAAOA,YAAP;AACD;AACF;;AAED;AACAG,UAAQC,OAAR,EAAiB;AACf,QAAIxK,OAAO,KAAKsD,QAAL,CAAcqF,WAAd,CAA0B6B,OAA1B,CAAX;AACA,QAAI,CAACxK,IAAL,EAAW;AACT,aAAO/B,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,qCAAV,CAAf,CAAP;AACD;AACD;AACA,WAAO,KAAKnG,UAAL,CAAgB,MAAhB,EAAwB,qBAAU0L,WAAlC,EAA+C,IAA/C,EAAqD;AAC1DC,oBAAc1K,KAAKD;AADuC,KAArD,EAGJiF,IAHI,CAGCzF,OAAO;AACX,aAAO,KAAKM,gBAAL,CAAsB8K,GAAtB,CAA0B,wBAAcpL,GAAd,EAAmB,KAAKgC,MAAxB,CAA1B,CAAP;AACD,KALI,CAAP;AAMD;;AAED;AACAkI,eAAa;AACX,QAAI,KAAKmB,UAAT,EAAqB;AACnB,aAAO3M,QAAQC,OAAR,CAAgB,KAAK0M,UAArB,CAAP;AACD;AACD,WAAO,KAAK7L,UAAL,CAAgB,KAAhB,EAAuB,qBAAU8L,OAAjC,EAA0C,IAA1C,EACJ7F,IADI,CACCzF,OAAO,KAAKqL,UAAL,GAAkBrL,IAAIN,GAD9B,CAAP;AAED;;AAED;AACA6L,cAAYC,KAAZ,EAAmBC,QAAnB,EAA6BvJ,UAAU,EAAvC,EAA2C;AACzC,QAAIA,QAAQrC,IAAZ,EAAkB;AAChB,UAAI,OAAOqC,QAAQrC,IAAf,KAAwB,QAA5B,EAAsC;AACpCqC,gBAAQrC,IAAR,GAAe;AACbA,gBAAMqC,QAAQrC;AADD,SAAf;AAGD;AACD,UAAI,CAACqC,QAAQrC,IAAR,CAAawB,IAAlB,EAAwB;AACtB,YAAIa,QAAQrC,IAAR,CAAaA,IAAb,YAA6B6L,MAA7B,IAAuC,OAAOxJ,QAAQrC,IAAR,CAAaA,IAApB,KAA6B,QAAxE,EAAkF;AAChFqC,kBAAQrC,IAAR,CAAawB,IAAb,GAAoBnD,QAAQ,MAAR,EAAgByN,QAAhB,CAAyBzJ,QAAQrC,IAAR,CAAaA,IAAtC,CAApB;AACD,SAFD,MAEO,IAAIqC,QAAQrC,IAAR,CAAaA,IAAb,CAAkB+L,IAAtB,EAA4B;AACjC;AACA1J,kBAAQrC,IAAR,CAAawB,IAAb,GAAoBnD,QAAQ,MAAR,EAAgByN,QAAhB,CAAyBzJ,QAAQrC,IAAR,CAAaA,IAAb,CAAkB+L,IAA3C,CAApB;AACD,SAHM,MAGA;AACL1J,kBAAQrC,IAAR,CAAawB,IAAb,GAAoB,aAApB,CADK,CAC8B;AACpC;AACF;AACF;;AAED,WAAO,KAAK0C,QAAL,CAAcyB,cAAd,CAA6BgG,KAA7B,EACJ/F,IADI,CACCoG,eAAe;AACnB,UAAIC,UAAU,KAAK/H,QAAL,CAAcuE,aAAd,CAA4BmD,QAA5B,CAAd;;AAEA,UAAI,KAAKzJ,MAAL,CAAYE,OAAZ,CAAoB6J,eAApB,IAAuC7J,QAAQ6J,eAAnD,EAAoE;AAClED,kBAAUA,QAAQE,OAAR,CAAgB,qBAAhB,EAAuC,YAAvC,CAAV;AACD;;AAED,UAAI9J,QAAQrC,IAAZ,EAAkB;AAChB,eAAO,KAAKkE,QAAL,CAAckI,WAAd,CAA0B/J,QAAQrC,IAAR,CAAaA,IAAvC,EACJ4F,IADI,CACC5F,QACJ,KAAKL,UAAL,CAAgB,MAAhB,EAAwB,qBAAU0M,gBAAV,CAA2BL,YAAYrL,EAAvC,CAAxB,EAAoE,IAApE,EAA0E;AACxEsL,mBAASA,OAD+D;AAExEK,eAAKjK,QAAQiK,GAF2D;AAGxEC,iBAAOlK,QAAQkK;AAHyD,SAA1E,EAIG;AACD/K,gBAAMa,QAAQrC,IAAR,CAAawB,IADlB;AAEDxB,gBAAMA;AAFL,SAJH,EAOG4F,IAPH,CAOQzF,OAAO6L,YAAYQ,QAAZ,CAAqBjB,GAArB,CAAyB,sBAAYpL,GAAZ,EAAiB6L,WAAjB,EAA8B,KAAK7J,MAAnC,CAAzB,CAPf,CAFG,CAAP;AAWD,OAZD,MAYO;AACL,eAAO,KAAKxC,UAAL,CAAgB,MAAhB,EAAwB,qBAAU0M,gBAAV,CAA2BL,YAAYrL,EAAvC,CAAxB,EAAoE,IAApE,EAA0E;AAC/EsL,mBAASA,OADsE;AAE/EK,eAAKjK,QAAQiK,GAFkE;AAG/EC,iBAAOlK,QAAQkK;AAHgE,SAA1E,EAKJ3G,IALI,CAKCzF,OAAO6L,YAAYQ,QAAZ,CAAqBjB,GAArB,CAAyB,sBAAYpL,GAAZ,EAAiB6L,WAAjB,EAA8B,KAAK7J,MAAnC,CAAzB,CALR,CAAP;AAMD;AACF,KA5BI,CAAP;AA8BD;;AAED;AACAsK,WAASd,KAAT,EAAgBe,KAAhB,EAAuBlL,IAAvB,EAA6ByK,OAA7B,EAAsC;AACpC,QAAI,CAACzK,IAAL,EAAW;AACT,UAAIkL,iBAAiBb,MAAjB,IAA2B,OAAOa,KAAP,KAAiB,QAAhD,EAA0D;AACxDlL,eAAOnD,QAAQ,MAAR,EAAgByN,QAAhB,CAAyBY,KAAzB,CAAP;AACD,OAFD,MAEO,IAAIA,SAASA,MAAMX,IAAnB,EAAyB;AAC9B;AACAvK,eAAOnD,QAAQ,MAAR,EAAgByN,QAAhB,CAAyBY,MAAMX,IAA/B,CAAP;AACD,OAHM,MAGA;AACLvK,eAAO,aAAP,CADK,CACiB;AACvB;AACF;;AAED,QAAIyK,OAAJ,EAAa;AACXA,gBAAU;AACRA,iBAAS,KAAK/H,QAAL,CAAcuE,aAAd,CAA4BwD,OAA5B;AADD,OAAV;AAGA,UAAI,KAAK9J,MAAL,CAAYE,OAAZ,CAAoB6J,eAAxB,EAAyC;AACvCD,gBAAQA,OAAR,GAAkBA,QAAQA,OAAR,CAAgBE,OAAhB,CAAwB,qBAAxB,EAA+C,YAA/C,CAAlB;AACD;AACF;;AAED,WAAO,KAAKjI,QAAL,CAAcyB,cAAd,CAA6BgG,KAA7B,EACJ/F,IADI,CACCC,WACJ,KAAK3B,QAAL,CAAckI,WAAd,CAA0BM,KAA1B,EACG9G,IADH,CACQ5F,QACJ,KAAKL,UAAL,CAAgB,MAAhB,EAAwB,qBAAU0M,gBAAV,CAA2BxG,QAAQlF,EAAnC,CAAxB,EAAgE,IAAhE,EAAsEsL,OAAtE,EAA+E;AAC7EzK,UAD6E;AAE7ExB;AAF6E,KAA/E,EAGG4F,IAHH,CAGQzF,OAAO0F,QAAQ2G,QAAR,CAAiBjB,GAAjB,CAAqB,sBAAYpL,GAAZ,EAAiB0F,OAAjB,EAA0B,KAAK1D,MAA/B,CAArB,CAHf,CAFJ,CAFG,CAAP;AAUD;;AAED;AACAwK,gBAAcC,QAAd,EAAwBvK,UAAU,EAAlC,EAAsC;;AAEpC,QAAIwK,UAAU,KAAK3I,QAAL,CAAcgC,cAAd,CAA6B0G,QAA7B,CAAd;AACA,QAAI,CAACC,OAAL,EAAc;AACZ,aAAOhO,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,gDAAV,CAAf,CAAP;AACD;;AAED,QAAIgH,QAAQzK,QAAQ0K,IAAR,GAAe5N,MAAMkD,QAAQ0K,IAAd,CAAf,GAAqClO,QAAQC,OAAR,EAAjD;AACA,WAAOgO,MAAMlH,IAAN,CAAW,MAChB,KAAKjG,UAAL,CAAgB,KAAhB,EAAuB,qBAAUqN,eAAV,CAA0BH,QAAQhH,OAAR,CAAgBlF,EAA1C,EAA8CkM,QAAQlM,EAAtD,CAAvB,EAAkF,IAAlF,CADK,EAGJiF,IAHI,CAGC,MAAMiH,QAAQhH,OAAR,CAAgB2G,QAAhB,CAAyBS,MAAzB,CAAgCJ,OAAhC,CAHP,CAAP;AAID;;AAED;AACAK,iBAAeC,SAAf,EAA0B;AACxB,QAAI,CAACA,SAAD,YAAsBC,KAA1B,EACE,OAAOvO,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,uCAAV,CAAf,CAAP;AACF,QAAIqH,UAAU7F,MAAV,GAAmB,CAAvB,EACE,OAAOzI,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,iDAAV,CAAf,CAAP,CADF,KAEK,IAAIqH,UAAU7F,MAAV,KAAqB,CAAzB,EACH,OAAO,KAAKqF,aAAL,CAAmBQ,UAAU,CAAV,CAAnB,CAAP;;AAGF,QAAIX,WAAW,EAAf;AACA,QAAI3G,OAAJ;AACA,QAAIgH,OAAJ;AACA,SAAK,IAAID,QAAT,IAAqBO,SAArB,EAAgC;AAC9BN,gBAAU,KAAK3I,QAAL,CAAcgC,cAAd,CAA6B0G,QAA7B,CAAV;AACA,UAAI,CAACC,OAAL,EACE,OAAOhO,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,sEAAV,CAAf,CAAP;AACF,UAAI,CAAC+G,QAAQnM,MAAb,EACE,OAAO7B,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,qDAAV,CAAf,CAAP;;AAEF;AACA,UAAI,CAACD,OAAL,EAAc;AACZA,kBAAUgH,QAAQhH,OAAlB;AACD,OAFD,MAEO;AACL;AACA,YAAIgH,QAAQhH,OAAR,CAAgBlF,EAAhB,KAAuBkF,QAAQlF,EAAnC,EACE,OAAO9B,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,wEAAV,CAAf,CAAP;AACH;;AAED0G,eAASnG,IAAT,CAAcwG,OAAd;AACD;;AAED,WAAO,KAAKlN,UAAL,CAAgB,MAAhB,EAAyB,IAAE,qBAAU0M,gBAAV,CAA2BxG,QAAQlF,EAAnC,CAAuC,eAAlE,EAAiF,IAAjF,EAAuF;AAC5F6L,gBAAUA,SAASa,GAAT,CAAaC,KAAKA,EAAE3M,EAApB;AADkF,KAAvF,EAGJiF,IAHI,CAGC,MAAM4G,SAAS7H,OAAT,CAAiB2I,KAAKzH,QAAQ2G,QAAR,CAAiBS,MAAjB,CAAwBK,CAAxB,CAAtB,CAHP,CAAP;AAID;;AAED;AACAC,gBAActH,GAAd,EAAmB2F,QAAnB,EAA6BvJ,UAAU,EAAvC,EAA2C;;AAEzC,QAAIwK,UAAU,KAAK3I,QAAL,CAAcgC,cAAd,CAA6BD,GAA7B,CAAd;;AAEA,QAAI,CAAC4G,OAAL,EAAc;AACZ,aAAOhO,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,gDAAV,CAAf,CAAP;AACD;;AAED,QAAImG,UAAU,KAAK/H,QAAL,CAAcuE,aAAd,CAA4BmD,QAA5B,CAAd;;AAEA,WAAO,KAAKjM,UAAL,CACL,OADK,EAEL,qBAAUqN,eAAV,CAA0BH,QAAQhH,OAAR,CAAgBlF,EAA1C,EAA8CkM,QAAQlM,EAAtD,CAFK,EAGL,IAHK,EAIL;AACEsL,eAASA,OADX;AAEEK,WAAKjK,QAAQiK;AAFf,KAJK,EASJ1G,IATI,CASCzF,OAAO0M,QAAQhH,OAAR,CAAgB2G,QAAhB,CAAyBgB,MAAzB,CACXX,OADW,EAEX,sBAAY1M,GAAZ,EAAiB0M,QAAQhH,OAAzB,EAAkC,KAAK1D,MAAvC,CAFW,CATR,CAAP;AAaD;;AAED;AACAsL,iBAAeC,QAAf,EAAyB1F,QAAQ,EAAjC,EAAqC3F,UAAU,EAA/C,EAAmD;AACjD,WAAO,KAAK6B,QAAL,CAAcyB,cAAd,CAA6B+H,QAA7B,EACJ9H,IADI,CACCC,WAAW;AACf,UAAI8H,WAAW,EAAC3F,KAAD,EAAf;AACA,UAAI3F,QAAQuL,MAAZ,EAAoB;AAClB,cAAMzN,MAAM,KAAK+D,QAAL,CAAcgC,cAAd,CAA6B7D,QAAQuL,MAArC,CAAZ;AACA,YAAIzN,GAAJ,EAAS;AACPwN,mBAASC,MAAT,GAAkBzN,IAAIQ,EAAtB;AACD;AACF;AACD,UAAI0B,QAAQwL,KAAZ,EAAmB;AACjB,cAAM1N,MAAM,KAAK+D,QAAL,CAAcgC,cAAd,CAA6B7D,QAAQwL,KAArC,CAAZ;AACA,YAAI1N,GAAJ,EAAS;AACPwN,mBAASE,KAAT,GAAiB1N,IAAIQ,EAArB;AACD;AACF;AACD,UAAI0B,QAAQyL,MAAZ,EAAoB;AAClB,cAAM3N,MAAM,KAAK+D,QAAL,CAAcgC,cAAd,CAA6B7D,QAAQyL,MAArC,CAAZ;AACA,YAAI3N,GAAJ,EAAS;AACPwN,mBAASG,MAAT,GAAkB3N,IAAIQ,EAAtB;AACD;AACF;;AAED,aAAO,KAAKhB,UAAL,CACL,KADK,EAEJ,IAAE,qBAAU0M,gBAAV,CAA2BxG,QAAQlF,EAAnC,CAAuC,MAAG,sBAAGoN,SAAH,CAAaJ,QAAb,CAAuB,GAF/D,EAGL,IAHK,EAKJ/H,IALI,CAKCzF,OAAOA,IAAIkN,GAAJ,CACXpH,OAAOJ,QAAQ2G,QAAR,CAAiBjB,GAAjB,CAAqB,sBAAYtF,GAAZ,EAAiBJ,OAAjB,EAA0B,KAAK1D,MAA/B,CAArB,CADI,CALR,CAAP;AAQD,KA9BI,CAAP;AA+BD;;AAED;AACA6L,aAAWN,QAAX,EAAqBO,SAArB,EAAgC;AAC9B,WAAO,KAAK/J,QAAL,CAAcyB,cAAd,CAA6B+H,QAA7B,EACJ9H,IADI,CACCC,WAAW;AACf,UAAI,CAAC,KAAKjF,IAAL,CAAUC,GAAf,EAAoB;AAClB,eAAOhC,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,+CAAV,CAAf,CAAP;AACD;;AAED,UAAI,EAAED,4CAAkCA,sCAApC,CAAJ,EAAuE;AACrE,eAAOhH,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,6CAAV,CAAf,CAAP;AACD;;AAED,UAAIG,MAAMJ,QAAQ2G,QAAR,CAAiBhM,GAAjB,CAAqB,IAArB,EAA2ByN,SAA3B,CAAV;AACA,UAAIhI,GAAJ,EAAS;AACP,eAAOpH,QAAQC,OAAR,CAAgBmH,GAAhB,CAAP;AACD;;AAED,aAAO,KAAKtG,UAAL,CACL,KADK,EAEJ,IAAE,qBAAU0M,gBAAV,CAA2BxG,QAAQlF,EAAnC,CAAuC,MAAGsN,SAAU,GAFlD,EAGL,IAHK,EAKJrI,IALI,CAKCzF,OAAO0F,QAAQ2G,QAAR,CAAiBjB,GAAjB,CACX,sBAAYpL,GAAZ,EAAiB0F,OAAjB,EAA0B,KAAK1D,MAA/B,CADW,CALR,CAAP;AAQD,KAvBI,CAAP;AAwBD;;AAED;AACA+L,aAAWjI,GAAX,EAAgB;AACd,QAAI4G,UAAU,KAAK3I,QAAL,CAAcgC,cAAd,CAA6BD,GAA7B,CAAd;;AAEA,QAAI,CAAC4G,OAAL,EAAc;AACZ,aAAOhO,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,+CAAV,CAAf,CAAP;AACD;;AAED,WAAO,KAAKnG,UAAL,CACL,KADK,EAEJ,IAAE,qBAAUwO,WAAV,CAAsBlI,IAAIJ,OAAJ,CAAYlF,EAAlC,EAAsCsF,IAAItF,EAA1C,CAA8C,GAF5C,EAGL,IAHK,CAAP;AAKD;;AAED;AACAyN,eAAanI,GAAb,EAAkB;AAChB,QAAI4G,UAAU,KAAK3I,QAAL,CAAcgC,cAAd,CAA6BD,GAA7B,CAAd;;AAEA,QAAI,CAAC4G,OAAL,EAAc;AACZ,aAAOhO,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,+CAAV,CAAf,CAAP;AACD;;AAED,QAAI,CAAC+G,QAAQwB,MAAb,EAAqB;AACnB,aAAOxP,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,gCAAV,CAAf,CAAP;AACD;;AAED,WAAO,KAAKnG,UAAL,CACL,KADK,EAEJ,IAAE,qBAAUwO,WAAV,CAAsBlI,IAAIJ,OAAJ,CAAYlF,EAAlC,EAAsCsF,IAAItF,EAA1C,CAA8C,GAF5C,EAGL,IAHK,CAAP;AAKD;;AAED;AACA2N,oBAAkBZ,QAAlB,EAA4B;AAC1B,WAAO,KAAKxJ,QAAL,CAAcyB,cAAd,CAA6B+H,QAA7B,EACJ9H,IADI,CACCC,WAAW;AACf,aAAO,KAAKlG,UAAL,CACL,KADK,EAEJ,IAAE,qBAAU4O,YAAV,CAAuB1I,QAAQlF,EAA/B,CAAmC,GAFjC,EAGL,IAHK,EAKJiF,IALI,CAKCzF,OAAOA,IAAIkN,GAAJ,CACXpH,OAAOJ,QAAQ2G,QAAR,CAAiBjB,GAAjB,CAAqB,sBAAYtF,GAAZ,EAAiBJ,OAAjB,EAA0B,KAAK1D,MAA/B,CAArB,CADI,CALR,CAAP;AAQD,KAVI,CAAP;AAWD;;AAED;AACAqM,UAAQ9N,MAAR,EAAgB;AACdA,aAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BvI,MAA5B,CAAT;;AAEA,WAAO,KAAKf,UAAL,CAAgB,KAAhB,EAAuB,qBAAU8O,WAAV,CAAsB/N,OAAOC,EAA7B,CAAvB,EAAyD,IAAzD,EACJiF,IADI,CACCzF,OAAOA,IAAIkN,GAAJ,CACXqB,OAAO,KAAKxL,KAAL,CAAWqI,GAAX,CAAe,mBAASmD,IAAI9N,IAAb,EAAmB,KAAKuB,MAAxB,CAAf,CADI,CADR,CAAP;AAID;;AAED;AACAwM,gBAAcjO,MAAd,EAAsBc,IAAtB,EAA4BuE,OAAO,CAAnC,EAAsC;;AAEpCrF,aAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BvI,MAA5B,CAAT;;AAEA,WAAO,KAAKf,UAAL,CAAgB,MAAhB,EAAwB,qBAAUiP,eAAV,CAA0BlO,OAAOC,EAAjC,CAAxB,EAA8D,IAA9D,EAAoE;AACzEa,UADyE;AAEzEuE;AAFyE,KAApE,EAIJH,IAJI,CAICzF,OAAO;AACX,UAAI0F,OAAJ;AACA,UAAI1F,IAAI4F,IAAJ,KAAa,CAAjB,EAAoB;AAClBF,kBAAU,0BAAgB1F,GAAhB,EAAqB,KAAKgC,MAA1B,EAAkCzB,MAAlC,CAAV;AACD,OAFD,MAEO;AACLmF,kBAAU,2BAAiB1F,GAAjB,EAAsB,KAAKgC,MAA3B,EAAmCzB,MAAnC,CAAV;AACD;AACD,aAAOA,OAAOH,QAAP,CAAgBgL,GAAhB,CAAoB,KAAKhL,QAAL,CAAcgL,GAAd,CAAkB1F,OAAlB,CAApB,CAAP;AACD,KAZI,CAAP;AAaD;;AAED;AACAgJ,gBAAcnB,QAAd,EAAwB;;AAEtB,WAAO,KAAKxJ,QAAL,CAAcyB,cAAd,CAA6B+H,QAA7B,EACJ9H,IADI,CACCC,WACJ,KAAKlG,UAAL,CAAgB,KAAhB,EAAuB,qBAAUmP,OAAV,CAAkBjJ,QAAQlF,EAA1B,CAAvB,EAAsD,IAAtD,EACGiF,IADH,CACQ,MAAM;AACV,UAAIC,QAAQnF,MAAZ,EAAoB;AAClBmF,gBAAQnF,MAAR,CAAeH,QAAf,CAAwB0M,MAAxB,CAA+BpH,OAA/B;AACA,aAAKtF,QAAL,CAAc0M,MAAd,CAAqBpH,OAArB;AACD,OAHD,MAGO;AACL,aAAKpF,gBAAL,CAAsBwM,MAAtB,CAA6BpH,OAA7B;AACD;AACF,KARH,CAFG,CAAP;AAYD;;AAED;AACAkJ,YAAUnO,IAAV,EAAgBF,MAAhB,EAAwB4G,SAAS,CAAjC,EAAoC;AAClC,QAAI0H,eAAe,KAAK9K,QAAL,CAAcqF,WAAd,CAA0B3I,IAA1B,CAAnB;AACAF,aAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BvI,MAA5B,CAAT;;AAEA,QAAIsO,iBAAiB,IAAjB,IAAyB,OAAOpO,IAAP,KAAgB,QAA7C,EAAuD;AACrDA,aAAO,EAACD,IAAIC,IAAL,EAAP;AACD,KAFD,MAEO;AACLA,aAAOoO,YAAP;AACD;;AAED,WAAO,KAAKrP,UAAL,CACL,KADK,EAEJ,IAAE,qBAAU8O,WAAV,CAAsB/N,OAAOC,EAA7B,CAAiC,MAAGC,KAAKD,EAAG,0BAAuB2G,MAAO,GAFxE,EAGL,IAHK,CAAP;AAKD;;AAED;AACA2H,cAAYrO,IAAZ,EAAkBF,MAAlB,EAA0B;;AAExBA,aAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BvI,MAA5B,CAAT;AACA,QAAIsO,eAAe,KAAK9K,QAAL,CAAcqF,WAAd,CAA0B3I,IAA1B,CAAnB;;AAEA,QAAIoO,iBAAiB,IAAjB,IAAyB,OAAOpO,IAAP,KAAgB,QAA7C,EAAuD;AACrDA,aAAO,EAACD,IAAIC,IAAL,EAAP;AACD,KAFD,MAEO;AACLA,aAAOoO,YAAP;AACD;;AAED,WAAO,KAAKrP,UAAL,CAAgB,KAAhB,EAAwB,IAAE,qBAAU8O,WAAV,CAAsB/N,OAAOC,EAA7B,CAAiC,MAAGC,KAAKD,EAAG,GAAtE,EAAyE,IAAzE,CAAP;AACD;;AAED;AACAuO,aAAWtO,IAAX,EAAiBF,MAAjB,EAAyB;AACvBE,WAAO,KAAKsD,QAAL,CAAcqF,WAAd,CAA0B3I,IAA1B,CAAP;AACAF,aAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BvI,MAA5B,CAAT;;AAEA,WAAO,KAAKf,UAAL,CAAgB,KAAhB,EAAwB,IAAE,qBAAUwP,cAAV,CAAyBzO,OAAOC,EAAhC,CAAqC,MAAGC,KAAKD,EAAG,GAA1E,EAA6E,IAA7E,CAAP;AACD;;AAED;AACAyO,aAAWxO,IAAX,EAAiBiF,OAAjB,EAA0B;AACxBjF,WAAO,KAAKsD,QAAL,CAAcqF,WAAd,CAA0B3I,IAA1B,CAAP;AACA,WAAO,KAAKsD,QAAL,CAAcyB,cAAd,CAA6BE,OAA7B,EAAsCD,IAAtC,CAA2CC,WAAW;AAC3D,UAAInF,SAASmF,QAAQnF,MAArB;;AAEA;AACA,UAAImF,QAAQE,IAAR,KAAiB,CAArB,EAAwB;AACtB,cAAM,IAAID,KAAJ,CAAU,2CAAV,CAAN;AACD,OAFD,MAEO;AACL,eAAO,KAAKnG,UAAL,CAAgB,OAAhB,EAA0B,IAAE,qBAAUwP,cAAV,CAAyBzO,OAAOC,EAAhC,CAAoC,MAAGC,KAAKD,EAAG,GAA3E,EAA8E,IAA9E,EAAoF,EAAC0O,YAAYxJ,QAAQlF,EAArB,EAApF,EACJiF,IADI,CACCzF,OAAO;AACXS,eAAK0O,YAAL,GAAoBzJ,OAApB;AACA,iBAAO1F,GAAP;AACD,SAJI,CAAP;AAKD;AACF,KAbM,CAAP;AAcD;;AAED;AACAoP,aAAW3O,IAAX,EAAiBF,MAAjB,EAAyB;AACvBE,WAAO,KAAKsD,QAAL,CAAcqF,WAAd,CAA0B3I,IAA1B,CAAP;AACAF,aAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BvI,MAA5B,CAAT;AACA,WAAO,KAAKf,UAAL,CAAgB,OAAhB,EAA0B,IAAE,qBAAUwP,cAAV,CAAyBzO,OAAOC,EAAhC,CAAoC,MAAGC,KAAKD,EAAG,GAA3E,EAA8E,IAA9E,EAAoF,EAAC6O,MAAM,IAAP,EAApF,CAAP;AACD;;AAED;AACAC,eAAa7O,IAAb,EAAmBF,MAAnB,EAA2B;AACzBE,WAAO,KAAKsD,QAAL,CAAcqF,WAAd,CAA0B3I,IAA1B,CAAP;AACAF,aAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BvI,MAA5B,CAAT;AACA,WAAO,KAAKf,UAAL,CAAgB,OAAhB,EAA0B,IAAE,qBAAUwP,cAAV,CAAyBzO,OAAOC,EAAhC,CAAoC,MAAGC,KAAKD,EAAG,GAA3E,EAA8E,IAA9E,EAAoF,EAAC6O,MAAM,KAAP,EAApF,CAAP;AACD;;AAED;AACAE,eAAa9O,IAAb,EAAmBF,MAAnB,EAA2B;AACzBE,WAAO,KAAKsD,QAAL,CAAcqF,WAAd,CAA0B3I,IAA1B,CAAP;AACAF,aAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BvI,MAA5B,CAAT;AACA,WAAO,KAAKf,UAAL,CAAgB,OAAhB,EAA0B,IAAE,qBAAUwP,cAAV,CAAyBzO,OAAOC,EAAhC,CAAoC,MAAGC,KAAKD,EAAG,GAA3E,EAA8E,IAA9E,EAAoF,EAACgP,MAAM,IAAP,EAApF,CAAP;AACD;;AAED;AACAC,iBAAehP,IAAf,EAAqBF,MAArB,EAA6B;AAC3BE,WAAO,KAAKsD,QAAL,CAAcqF,WAAd,CAA0B3I,IAA1B,CAAP;AACAF,aAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BvI,MAA5B,CAAT;AACA,WAAO,KAAKf,UAAL,CAAgB,OAAhB,EAA0B,IAAE,qBAAUwP,cAAV,CAAyBzO,OAAOC,EAAhC,CAAoC,MAAGC,KAAKD,EAAG,GAA3E,EAA8E,IAA9E,EAAoF,EAACgP,MAAM,KAAP,EAApF,CAAP;AACD;;AAED;AACAE,cAAYnP,MAAZ,EAAoBoP,IAApB,EAA0BlP,IAA1B,EAAgC;AAC9BkP,WAAOA,QAAQ,EAAf;AACAlP,WAAO,KAAKsD,QAAL,CAAcqF,WAAd,CAA0B3I,IAA1B,CAAP;AACAF,aAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BvI,MAA5B,CAAT;AACA,WAAO,KAAKf,UAAL,CAAgB,OAAhB,EAA0B,IAAE,qBAAUwP,cAAV,CAAyBzO,OAAOC,EAAhC,CAAoC,MAAGC,KAAKD,EAAL,KAAY,KAAKC,IAAL,CAAUD,EAAtB,GAA2B,UAA3B,GAAwCC,KAAKD,EAAG,GAAnH,EAAsH,IAAtH,EAA4H,EAACmP,MAAMA,IAAP,EAA5H,CAAP;AACD;;AAED;AACAC,UAAQnP,IAAR,EAAcoP,IAAd,EAAoB;AAClBpP,WAAO,KAAKsD,QAAL,CAAcqF,WAAd,CAA0B3I,IAA1B,CAAP;AACAoP,WAAOA,QAAQ,EAAf;;AAEA,QAAI,CAACpP,IAAL,EAAW;AACT,aAAO/B,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,wBAAV,CAAf,CAAP;AACD;;AAED,WAAO,KAAKnG,UAAL,CAAgB,KAAhB,EAAwB,IAAE,qBAAUsQ,QAAS,MAAGrP,KAAKD,EAAG,GAAxD,EAA2D,IAA3D,EAAiE,EAACqP,MAAMA,IAAP,EAAjE,CAAP;AACD;;AAED;AACAE,aAAWxP,MAAX,EAAmBX,IAAnB,EAAyB;AACvBW,aAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BvI,MAA5B,CAAT;;AAEA,WAAO,KAAKf,UAAL,CAAgB,MAAhB,EAAwB,qBAAUwQ,YAAV,CAAuBzP,OAAOC,EAA9B,CAAxB,EAA2D,IAA3D,EACJiF,IADI,CACCzF,OAAO;AACX,UAAIiQ,OAAO1P,OAAO2P,KAAP,CAAa9E,GAAb,CAAiB,mBAASpL,GAAT,EAAcO,MAAd,EAAsB,KAAKyB,MAA3B,CAAjB,CAAX;;AAEA,UAAIpC,IAAJ,EAAU;AACR,eAAO,KAAKuQ,UAAL,CAAgBF,IAAhB,EAAsBrQ,IAAtB,CAAP;AACD;AACD,aAAOqQ,IAAP;AACD,KARI,CAAP;AASD;;AAED;AACAE,aAAWF,IAAX,EAAiBrQ,IAAjB,EAAuB;;AAErBqQ,WAAO,KAAKlM,QAAL,CAAcqM,WAAd,CAA0BH,IAA1B,CAAP;AACA,QAAI1P,SAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BmH,KAAK1P,MAAjC,CAAb;;AAEA,QAAI8P,UAAU;AACZC,aAAO,WAAW1Q,IAAX,GAAkBA,KAAK0Q,KAAvB,GAA+BL,KAAKK,KAD/B;AAEZC,aAAO,WAAW3Q,IAAX,GAAkBA,KAAK2Q,KAAvB,GAA+BN,KAAKM,KAF/B;AAGZlP,YAAM,UAAUzB,IAAV,GAAiBA,KAAKyB,IAAtB,GAA6B4O,KAAK5O,IAH5B;AAIZmP,gBAAU,cAAc5Q,IAAd,GAAqBA,KAAK4Q,QAA1B,GAAqCP,KAAKO,QAJxC;AAKZC,mBAAa,iBAAiB7Q,IAAjB,GAAwBA,KAAK6Q,WAA7B,GAA2CR,KAAKQ,WALjD;AAMZC,mBAAa,iBAAiB9Q,IAAjB,GAAwBA,KAAK8Q,WAA7B,GAA2CT,KAAKS;AANjD,KAAd;;AASA,QAAI9Q,KAAK6Q,WAAT,EAAsB;AACpBJ,cAAQI,WAAR,GAAsB,CAAtB;AACA,WAAK,IAAIE,IAAT,IAAiB/Q,KAAK6Q,WAAtB,EAAmC;AACjC,YAAIE,gBAAgBjF,MAAhB,IAA0B,OAAOiF,IAAP,KAAgB,QAA9C,EAAwD;AACtDN,kBAAQI,WAAR,IAAwB,uBAAYE,IAAZ,KAAqB,CAA7C;AACD,SAFD,MAEO;AACLN,kBAAQI,WAAR,IAAuBE,IAAvB;AACD;AACF;AACF;;AAED,WAAO,KAAKnR,UAAL,CAAgB,OAAhB,EAA0B,IAAE,qBAAUwQ,YAAV,CAAuBzP,OAAOC,EAA9B,CAAkC,MAAGyP,KAAKzP,EAAG,GAAzE,EAA4E,IAA5E,EAAkF6P,OAAlF,EACJ5K,IADI,CACCzF,OAAO;AACX,aAAOO,OAAO2P,KAAP,CAAa7C,MAAb,CAAoB4C,IAApB,EAA0B,mBAASjQ,GAAT,EAAcO,MAAd,EAAsB,KAAKyB,MAA3B,CAA1B,CAAP;AACD,KAHI,CAAP;AAID;;AAED;AACA4O,aAAWX,IAAX,EAAiB;AACf,QAAIA,KAAK1P,MAAL,CAAYC,EAAZ,KAAmByP,KAAKzP,EAA5B,EAAgC;AAC9B,aAAO9B,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,wDAAV,CAAf,CAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAKnG,UAAL,CAAgB,KAAhB,EAAwB,IAAE,qBAAUwQ,YAAV,CAAuBC,KAAK1P,MAAL,CAAYC,EAAnC,CAAuC,MAAGyP,KAAKzP,EAAG,GAA5E,EAA+E,IAA/E,CAAP;AACD;AACF;;AAED;AACAqQ,kBAAgBC,MAAhB,EAAwBZ,KAAxB,EAA+B;AAC7BY,aAAS,KAAK/M,QAAL,CAAcqF,WAAd,CAA0B0H,MAA1B,CAAT;;AAEA,QAAI,CAACA,MAAL,EAAa;AACX,aAAOpS,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,gBAAV,CAAf,CAAP;AACD;;AAED,QAAI,CAACsH,MAAM8D,OAAN,CAAcb,KAAd,CAAD,IAAyBA,MAAM/I,MAAN,KAAiB,CAA9C,EAAiD;AAC/C+I,cAAQ,KAAKnM,QAAL,CAAcqM,WAAd,CAA0BF,KAA1B,CAAR;AACA,UAAIA,KAAJ,EAAW;AACTA,gBAAQ,CAACA,KAAD,CAAR;AACD,OAFD,MAEO;AACL,eAAOxR,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,wBAAV,CAAf,CAAP;AACD;AACF,KAPD,MAOO;AACLuK,cAAQA,MAAMhD,GAAN,CAAU8D,KAAK,KAAKjN,QAAL,CAAcqM,WAAd,CAA0BY,CAA1B,CAAf,CAAR;AACD;;AAED,QAAId,MAAMe,IAAN,CAAWhB,QAAQ,CAACA,KAAK1P,MAAL,CAAY2Q,SAAZ,CAAsBJ,OAAOtQ,EAA7B,CAApB,CAAJ,EAA2D;AACzD,aAAO9B,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,8CAAV,CAAf,CAAP;AACD;;AAED,QAAIwL,UAAUjB,MAAM,CAAN,EAAS3P,MAAT,CAAgB2Q,SAAhB,CAA0BJ,OAAOtQ,EAAjC,EAAqC0P,KAArC,CAA2ChD,GAA3C,CAA+C8D,KAAMA,KAAKA,EAAExQ,EAAR,IAAewQ,CAAnE,CAAd;;AAEA,SAAK,IAAI1P,IAAI,CAAb,EAAgBA,IAAI4O,MAAM/I,MAA1B,EAAkC7F,GAAlC,EAAuC;AACrC,UAAI,CAAC,CAAC6P,QAAQC,OAAR,CAAgBlB,MAAM5O,CAAN,EAASd,EAAzB,CAAN,EAAoC;AAClC2Q,gBAAQjL,IAAR,CAAagK,MAAM5O,CAAN,EAASd,EAAtB;AACD;AACF;;AAED,WAAO,KAAKhB,UAAL,CACL,OADK,EAEJ,IAAE,qBAAUwP,cAAV,CAAyBkB,MAAM,CAAN,EAAS3P,MAAT,CAAgBC,EAAzC,CAA6C,MAAGsQ,OAAOtQ,EAAG,GAFxD,EAGL,IAHK,EAIL;AACE0P,aAAOiB;AADT,KAJK,CAAP;AAQD;;AAEDE,gBAAcP,MAAd,EAAsBb,IAAtB,EAA4B;AAC1BA,WAAO,KAAKlM,QAAL,CAAcqM,WAAd,CAA0BH,IAA1B,CAAP;AACAa,aAAS,KAAK/M,QAAL,CAAcqF,WAAd,CAA0B0H,MAA1B,CAAT;;AAEA,QAAI,CAACb,IAAL,EAAW;AACT,YAAM,IAAItK,KAAJ,CAAU,cAAV,CAAN;AACD;AACD,QAAI,CAACmL,MAAL,EAAa;AACX,YAAM,IAAInL,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,QAAI2L,WAAWrB,KAAK1P,MAAL,CAAYgR,OAAZ,CAAoBT,MAApB,CAAf;AACA,QAAIQ,QAAJ,EAAc;AACZ,WAAK,IAAIN,CAAT,IAAcM,QAAd,EAAwB;AACtB,YAAIN,EAAExQ,EAAF,IAAQyP,KAAKzP,EAAjB,EAAqB;AACnB,iBAAO,IAAP;AACD;AACF;AACF;AACD,WAAO,KAAP;AACD;;AAED;AACAgR,uBAAqBV,MAArB,EAA6BZ,KAA7B,EAAoC;AAClCY,aAAS,KAAK/M,QAAL,CAAcqF,WAAd,CAA0B0H,MAA1B,CAAT;;AAEA,QAAI,CAACA,MAAL,EAAa;AACX,aAAOpS,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,gBAAV,CAAf,CAAP;AACD;;AAED,QAAI,CAACsH,MAAM8D,OAAN,CAAcb,KAAd,CAAD,IAAyBA,MAAM/I,MAAN,KAAiB,CAA9C,EAAiD;AAC/C+I,cAAQ,KAAKnM,QAAL,CAAcqM,WAAd,CAA0BF,KAA1B,CAAR;AACA,UAAIA,KAAJ,EAAW;AACTA,gBAAQ,CAACA,KAAD,CAAR;AACD,OAFD,MAEO;AACL,eAAOxR,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,wBAAV,CAAf,CAAP;AACD;AACF,KAPD,MAOO;AACLuK,cAAQA,MAAMhD,GAAN,CAAU8D,KAAK,KAAKjN,QAAL,CAAcqM,WAAd,CAA0BY,CAA1B,CAAf,CAAR;AACD;;AAED,QAAIG,UAAUjB,MAAM,CAAN,EAAS3P,MAAT,CAAgB2Q,SAAhB,CAA0BJ,OAAOtQ,EAAjC,EAAqC0P,KAArC,CAA2ChD,GAA3C,CAA+C8D,KAAMA,KAAKA,EAAExQ,EAAR,IAAewQ,CAAnE,CAAd;;AAEA,SAAK,IAAIf,IAAT,IAAiBC,KAAjB,EAAwB;AACtB,UAAI,CAACD,KAAK1P,MAAL,CAAY2Q,SAAZ,CAAsBJ,OAAOtQ,EAA7B,CAAL,EAAuC;AACrC,eAAO9B,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,sBAAV,CAAf,CAAP;AACD;AACD,WAAK,IAAI8L,IAAT,IAAiBN,OAAjB,EAA0B;AACxB,YAAIA,QAAQ5P,cAAR,CAAuBkQ,IAAvB,CAAJ,EAAkC;AAChC,cAAIN,QAAQM,IAAR,MAAkBxB,KAAKzP,EAA3B,EAA+B;AAC7B2Q,oBAAQO,MAAR,CAAeD,IAAf,EAAqB,CAArB;AACA;AACD;AACF;AACF;AACF;;AAED,WAAO,KAAKjS,UAAL,CACL,OADK,EAEJ,IAAE,qBAAUwP,cAAV,CAAyBkB,MAAM,CAAN,EAAS3P,MAAT,CAAgBC,EAAzC,CAA6C,MAAGsQ,OAAOtQ,EAAG,GAFxD,EAGL,IAHK,EAIL;AACE0P,aAAOiB;AADT,KAJK,CAAP;AAQD;;AAED;AACAQ,eAAaC,QAAb,EAAuB1P,OAAvB,EAAgC;AAC9B,WAAO,KAAK6B,QAAL,CAAcyB,cAAd,CAA6BoM,QAA7B,EACJnM,IADI,CACCC,WAAW;AACf,UAAI,CAACxD,OAAL,EAAc;AACZA,kBAAU;AACR2P,oBAAU;AADF,SAAV;AAGD,OAJD,MAIO;AACL3P,gBAAQ4P,OAAR,GAAkB5P,QAAQ6P,MAAR,IAAkB,CAApC;AACA7P,gBAAQ8P,QAAR,GAAmB9P,QAAQ+P,OAAR,IAAmB,CAAtC;AACA/P,gBAAQgQ,SAAR,GAAoBhQ,QAAQgQ,SAAR,IAAqB,KAAzC;AACAhQ,gBAAQiQ,QAAR,GAAmBjQ,QAAQkQ,IAAR,IAAgB,KAAnC;AACD;;AAED,aAAO,KAAK5S,UAAL,CAAgB,MAAhB,EAAwB,qBAAU6S,eAAV,CAA0B3M,QAAQlF,EAAlC,CAAxB,EAA+D,IAA/D,EAAqE0B,OAArE,EACJuD,IADI,CACCzF,OAAO,qBAAWA,GAAX,EAAgB,KAAKI,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBL,IAAI0F,OAAJ,CAAYlF,EAApC,CAAhB,EAAyD,KAAKwB,MAA9D,CADR,CAAP;AAED,KAfI,CAAP;AAgBD;;AAED;AACAsQ,eAAa7J,MAAb,EAAqB;AACnBA,aAAS,KAAK1E,QAAL,CAAc2E,eAAd,CAA8BD,MAA9B,CAAT;AACA,QAAI,CAACA,MAAL,EAAa;AACX,YAAM,IAAI9C,KAAJ,CAAU,oBAAV,CAAN;AACD;AACD,WAAO,KAAKnG,UAAL,CAAgB,KAAhB,EAAuB,qBAAUmJ,MAAV,CAAiBF,MAAjB,CAAvB,EAAiD,IAAjD,CAAP;AACD;;AAED;AACA8J,YAAU9J,MAAV,EAAkB;AAChBA,aAAS,KAAK1E,QAAL,CAAc2E,eAAd,CAA8BD,MAA9B,CAAT;AACA,QAAI,CAACA,MAAL,EAAa;AACX,aAAO/J,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,oBAAV,CAAf,CAAP;AACD;;AAED,WAAO,KAAKnG,UAAL,CAAgB,KAAhB,EAAuB,qBAAUmJ,MAAV,CAAiBF,MAAjB,CAAvB,EAAiD,IAAjD,EACJhD,IADI,CACCzF,OAAO;AACX,UAAI,CAAC,KAAKI,QAAL,CAAcoS,GAAd,CAAkB,IAAlB,EAAwBxS,IAAI0F,OAAJ,CAAYlF,EAApC,CAAL,EAA8C;AAC5C,eAAO,qBAAWR,GAAX,EAAgB,IAAhB,EAAsB,KAAKgC,MAA3B,CAAP;AACD;AACD,aAAO,KAAKxC,UAAL,CAAgB,MAAhB,EAAwB,qBAAU6S,eAAV,CAA0BrS,IAAI0F,OAAJ,CAAYlF,EAAtC,CAAxB,EAAmE,IAAnE,EAAyE,EAACqR,UAAUpJ,MAAX,EAAzE,EACJhD,IADI,CACCgN,QAAQ,qBAAWA,IAAX,EAAiB,KAAKrS,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBL,IAAI0F,OAAJ,CAAYlF,EAApC,CAAjB,EAA0D,KAAKwB,MAA/D,CADT,CAAP;AAED,KAPI,CAAP;AAQD;;AAED;AACA0Q,aAAWhN,OAAX,EAAoB;AAClB,QAAI,EAAEA,oCAAF,CAAJ,EAAmC;AACjC,UAAInF,SAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BpD,OAA5B,CAAb;AACA,UAAInF,MAAJ,EAAY;AACV,eAAO,KAAKf,UAAL,CAAgB,KAAhB,EAAuB,qBAAUmT,cAAV,CAAyBpS,OAAOC,EAAhC,CAAvB,EAA4D,IAA5D,EACJiF,IADI,CACCzF,OAAO;AACX,iBAAOA,IAAIkN,GAAJ,CAAQtN,QAAQ,qBAAWA,IAAX,EAAiB,KAAKQ,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBT,KAAK8F,OAAL,CAAalF,EAArC,CAAjB,EAA2D,KAAKwB,MAAhE,CAAhB,CAAP;AACD,SAHI,CAAP;AAID;AACF;AACD,WAAO,KAAK+B,QAAL,CAAcyB,cAAd,CAA6BE,OAA7B,EACJD,IADI,CACCC,WAAW;AACf,aAAO,KAAKlG,UAAL,CAAgB,KAAhB,EAAuB,qBAAU6S,eAAV,CAA0B3M,QAAQlF,EAAlC,CAAvB,EAA8D,IAA9D,EACJiF,IADI,CACCzF,OAAO;AACX,eAAOA,IAAIkN,GAAJ,CAAQtN,QAAQ,qBAAWA,IAAX,EAAiB,KAAKQ,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBT,KAAK8F,OAAL,CAAalF,EAArC,CAAjB,EAA2D,KAAKwB,MAAhE,CAAhB,CAAP;AACD,OAHI,CAAP;AAID,KANI,CAAP;AAOD;;AAED;AACA4Q,uBAAqBlN,OAArB,EAA8BuK,IAA9B,EAAoC4C,OAApC,EAA6C;AAC3C,WAAO,KAAK9O,QAAL,CAAcyB,cAAd,CAA6BE,OAA7B,EACJD,IADI,CACCC,WAAW;AACf,UAAI,CAACA,OAAD,mCAAJ,EAAuC;AACrC,eAAOhH,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,sBAAV,CAAf,CAAP;AACD;;AAED,UAAI/F,OAAO;AACTkT,eAAO,CADE;AAETC,cAAM;AAFG,OAAX;;AAKA,UAAI9C,gBAAgBvE,MAAhB,IAA0B,OAAOuE,IAAP,KAAgB,QAA9C,EAAwD;AACtDA,eAAO,KAAKlM,QAAL,CAAcqF,WAAd,CAA0B6G,IAA1B,KAAmC,KAAKlM,QAAL,CAAcqM,WAAd,CAA0BH,IAA1B,CAA1C;AACD;;AAED,UAAIA,8BAAJ,EAA0B;AACxBrQ,aAAKY,EAAL,GAAUyP,KAAKzP,EAAf;AACAZ,aAAKgG,IAAL,GAAY,QAAZ;AACD,OAHD,MAGO,IAAIqK,8BAAJ,EAA0B;AAC/BrQ,aAAKY,EAAL,GAAUyP,KAAKzP,EAAf;AACAZ,aAAKgG,IAAL,GAAY,MAAZ;AACD,OAHM,MAGA;AACL,eAAOlH,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,4BAAV,CAAf,CAAP;AACD;;AAED,UAAIqN,oBAAoBtN,QAAQuN,oBAAR,CAA6B5S,GAA7B,CAAiC,IAAjC,EAAuCT,KAAKY,EAA5C,CAAxB;;AAEA,UAAIwS,iBAAJ,EAAuB;AACrBpT,aAAKkT,KAAL,IAAcE,kBAAkBF,KAAhC;AACAlT,aAAKmT,IAAL,IAAaC,kBAAkBD,IAA/B;AACD;;AAED,WAAK,IAAIpC,IAAT,IAAiBkC,OAAjB,EAA0B;AACxB,YAAIA,QAAQtR,cAAR,CAAuBoP,IAAvB,CAAJ,EAAkC;AAChC,cAAIkC,QAAQlC,IAAR,MAAkB,IAAtB,EAA4B;AAC1B/Q,iBAAKkT,KAAL,IAAe,uBAAYnC,IAAZ,KAAqB,CAApC;AACA/Q,iBAAKmT,IAAL,IAAa,EAAE,uBAAYpC,IAAZ,KAAqB,CAAvB,CAAb;AACD,WAHD,MAGO,IAAIkC,QAAQlC,IAAR,MAAkB,KAAtB,EAA6B;AAClC/Q,iBAAKkT,KAAL,IAAc,EAAE,uBAAYnC,IAAZ,KAAqB,CAAvB,CAAd;AACA/Q,iBAAKmT,IAAL,IAAc,uBAAYpC,IAAZ,KAAqB,CAAnC;AACD,WAHM,MAGA;AACL/Q,iBAAKkT,KAAL,IAAc,EAAE,uBAAYnC,IAAZ,KAAqB,CAAvB,CAAd;AACA/Q,iBAAKmT,IAAL,IAAa,EAAE,uBAAYpC,IAAZ,KAAqB,CAAvB,CAAb;AACD;AACF;AACF;;AAED,aAAO,KAAKnR,UAAL,CACL,KADK,EAEJ,IAAE,qBAAU0T,mBAAV,CAA8BxN,QAAQlF,EAAtC,CAA0C,MAAGZ,KAAKY,EAAG,GAFnD,EAGL,IAHK,EAILZ,IAJK,CAAP;AAMD,KArDI,CAAP;AAsDD;;AAED;AACAuT,YAAUC,UAAV,EAAsBC,IAAtB,EAA4B;;AAE1B,QAAID,eAAe,QAAf,IAA2BA,eAAe,MAA1C,IAAoDA,eAAe,WAAvE,EAAoF;AAClF,WAAKA,UAAL,GAAkB,IAAlB;AACD,KAFD,MAGK,IAAIA,eAAe,MAAf,IAAyBA,eAAe,MAA5C,EAAoD;AACvD,WAAKA,UAAL,GAAkBrS,KAAKC,GAAL,EAAlB;AACD,KAFI,MAGA;AACH,WAAKoS,UAAL,GAAkB,KAAKA,UAAL,IAAmB,IAArC,CADG,CACwC;AAC5C;;AAED;AACA,QAAI,OAAOC,IAAP,KAAgB,QAAhB,IAA4B,CAACA,KAAKlM,MAAtC,EAA8CkM,OAAO,IAAP;;AAE9C,SAAKA,IAAL,GAAYA,SAAS,IAAT,GAAgB,IAAhB,GAAuB,CAACA,IAAD,GAAQ,KAAKA,IAAL,IAAa,IAArB,GAA4B,OAAOA,IAAP,KAAgB,QAAhB,GAA2B,EAAChS,MAAMgS,IAAP,EAA3B,GAA0CA,IAAzG;;AAEA,QAAIC,SAAS;AACXhN,UAAI,CADO;AAEXC,SAAG;AACDgN,oBAAY,KAAKH,UADhB;AAEDC,cAAM,KAAKA;AAFV;AAFQ,KAAb;;AAQA,SAAKhN,MAAL,CAAYiN,MAAZ;;AAEA,SAAK7S,IAAL,CAAUsB,MAAV,GAAmB,KAAKqR,UAAL,GAAkB,MAAlB,GAA2B,QAA9C;AACA,SAAK3S,IAAL,CAAU4S,IAAV,GAAiB,KAAKA,IAAtB;;AAEA,WAAO3U,QAAQC,OAAR,EAAP;AAED;;AAED;AACA6U,aAAW9N,OAAX,EAAoB;AAClB,WAAO,KAAK3B,QAAL,CAAcyB,cAAd,CAA6BE,OAA7B,EAAsCD,IAAtC,CAA2CC,WAChD,KAAKlG,UAAL,CAAgB,MAAhB,EAAwB,qBAAUmP,OAAV,CAAkBjJ,QAAQlF,EAA1B,IAAgC,SAAxD,EAAmE,IAAnE,CADK,CAAP;AAGD;;AAED;AACAiT,cAAY/N,OAAZ,EAAqB;AACnB,WAAO,KAAK3B,QAAL,CAAcyB,cAAd,CAA6BE,OAA7B,EACJD,IADI,CACCC,WAAW;;AAEf,UAAI,KAAKhC,SAAL,CAAeC,MAAf,CAAsB+B,QAAQlF,EAA9B,CAAJ,EAAuC;AACrC;AACA,cAAM,IAAImF,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,WAAKjC,SAAL,CAAeC,MAAf,CAAsB+B,QAAQlF,EAA9B,IAAoC3B,YAClC,MAAM,KAAK2U,UAAL,CAAgB9N,OAAhB,EACHT,KADG,CACGnD,SAAS,KAAKE,MAAL,CAAYC,IAAZ,CAAiB,OAAjB,EAA0BH,KAA1B,CADZ,CAD4B,EAGlC,IAHkC,CAApC;;AAMA,aAAO,KAAK0R,UAAL,CAAgB9N,OAAhB,CAAP;AACD,KAfI,CAAP;AAiBD;;AAED;AACAgO,aAAWhO,OAAX,EAAoB;AAClB,WAAO,KAAK3B,QAAL,CAAcyB,cAAd,CAA6BE,OAA7B,EACJD,IADI,CACCC,WAAW;;AAEf,UAAI,CAAC,KAAKhC,SAAL,CAAeC,MAAf,CAAsB+B,QAAQlF,EAA9B,CAAL,EAAwC;AACtC;AACA,cAAM,IAAImF,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED5G,oBAAc,KAAK2E,SAAL,CAAeC,MAAf,CAAsB+B,QAAQlF,EAA9B,CAAd;AACA,WAAKkD,SAAL,CAAeC,MAAf,CAAsB+B,QAAQlF,EAA9B,IAAoC,KAApC;AAED,KAXI,CAAP;AAYD;;AAED;AACAmT,gBAAc/T,IAAd,EAAoB;AAClB,QAAI,CAAC,KAAKa,IAAL,CAAUC,GAAX,IAAkB,EAAE,KAAKoE,KAAL,IAAclF,KAAKkF,KAArB,CAAtB,EAAmD;AACjD,YAAM,IAAIa,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,QAAIzD,UAAU,EAAd;;AAEA,QAAItC,KAAKe,QAAT,EAAmB;AACjBuB,cAAQvB,QAAR,GAAmBf,KAAKe,QAAxB;AACD;;AAED,QAAIf,KAAKgU,MAAT,EAAiB;AACf1R,cAAQ0R,MAAR,GAAiB,KAAK7P,QAAL,CAAckF,eAAd,CAA8BrJ,KAAKgU,MAAnC,CAAjB;AACD;;AAED,QAAI,KAAK9O,KAAL,IAAclF,KAAKkF,KAAvB,EAA8B;AAC5B5C,cAAQ4C,KAAR,GAAgBlF,KAAKkF,KAAL,IAAc,KAAKA,KAAnC;AACA5C,cAAQ2R,YAAR,GAAuBjU,KAAKkU,WAAL,IAAoB,IAA3C;AACA5R,cAAQ8C,QAAR,GAAmBpF,KAAKoF,QAAL,IAAiB,KAAKA,QAAzC;AACD;;AAED,WAAO,KAAKxF,UAAL,CAAgB,OAAhB,EAAyB,qBAAUuU,EAAnC,EAAuC,IAAvC,EAA6C7R,OAA7C,CAAP;AACD;;AAED;AACA8R,YAAUJ,MAAV,EAAkB;AAChB,WAAO,KAAKD,aAAL,CAAmB,EAACC,MAAD,EAAnB,CAAP;AACD;;AAED;AACAK,cAAYtT,QAAZ,EAAsB;AACpB,WAAO,KAAKgT,aAAL,CAAmB,EAAChT,QAAD,EAAnB,CAAP;AACD;;AAED;AACAuT,kBAAgBxO,OAAhB,EAAyByO,QAAQ,EAAjC,EAAqC;AACnCA,YAAQA,SAAS,EAAjB;;AAEA,WAAO,KAAKC,aAAL,CAAmB1O,OAAnB,EAA4B,EAACyO,OAAOA,KAAR,EAA5B,CAAP;AACD;;AAED;AACAE,iBAAe3O,OAAf,EAAwBrE,IAAxB,EAA8B;AAC5BA,WAAOA,QAAQ,iBAAf;;AAEA,WAAO,KAAK+S,aAAL,CAAmB1O,OAAnB,EAA4B,EAACrE,MAAMA,IAAP,EAA5B,CAAP;AACD;;AAED;AACAiT,qBAAmB5O,OAAnB,EAA4B8K,QAA5B,EAAsC;AACpCA,eAAWA,YAAY,CAAvB;;AAEA,WAAO,KAAK4D,aAAL,CAAmB1O,OAAnB,EAA4B,EAAC8K,UAAUA,QAAX,EAA5B,CAAP;AACD;;AAED;AACA+D,sBAAoB7O,OAApB,EAA6BmC,KAA7B,EAAoC;AAClCA,YAAQA,SAAS,CAAjB,CADkC,CACd;;AAEpB,WAAO,KAAKuM,aAAL,CAAmB1O,OAAnB,EAA4B,EAAC8O,WAAW3M,KAAZ,EAA5B,CAAP;AACD;;AAED;AACA4M,oBAAkB/O,OAAlB,EAA2BgP,QAA3B,EAAqC;AACnCA,eAAWA,YAAY,EAAvB,CADmC,CACR;;AAE3B,WAAO,KAAKN,aAAL,CAAmB1O,OAAnB,EAA4B,EAACiP,SAASD,QAAV,EAA5B,CAAP;AACD;;AAED;AACAN,gBAAc1O,OAAd,EAAuB9F,IAAvB,EAA6B;AAC3B,WAAO,KAAKmE,QAAL,CAAcyB,cAAd,CAA6BE,OAA7B,EAAsCD,IAAtC,CAA2CC,WAAW;AAC3D,UAAI,CAACA,OAAL,EAAc;AACZ,eAAOhH,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,2BAAV,CAAf,CAAP;AACD;;AAED/F,aAAO;AACLyB,cAAMzB,KAAKyB,IAAL,IAAaqE,QAAQrE,IADtB;AAEL8S,eAAOvU,KAAKuU,KAAL,IAAczO,QAAQyO,KAFxB;AAGL3D,kBAAW5Q,KAAK4Q,QAAL,GAAgB5Q,KAAK4Q,QAArB,GAAgC9K,QAAQ8K,QAH9C;AAILoE,oBAAahV,KAAK4U,SAAL,GAAiB5U,KAAK4U,SAAtB,GAAkC9O,QAAQ8O,SAJlD;AAKLG,iBAAU/U,KAAK+U,OAAL,GAAe/U,KAAK+U,OAApB,GAA8BjP,QAAQiP,OAAR,GAAkBjP,QAAQiP,OAA1B,GAAoCnT;AALvE,OAAP;;AAQA,UAAI5B,KAAK4Q,QAAL,GAAgB,CAApB,EAAuB;AACrB,eAAO9R,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,gCAAV,CAAf,CAAP;AACD;;AAED,UAAI/F,KAAKgV,UAAL,GAAkB,CAAlB,IAAuBhV,KAAKgV,UAAL,GAAkB,EAA7C,EAAiD;AAC/C,eAAOlW,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,iCAAV,CAAf,CAAP;AACD;;AAED,UAAI/F,KAAK8U,QAAL,GAAgB,CAAhB,IAAqB9U,KAAK8U,QAAL,GAAgB,EAAzC,EAA6C;AAC3C,eAAOhW,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,kCAAV,CAAf,CAAP;AACD;;AAED,UAAI/F,KAAK+U,OAAT,EAAkB;AAChB/U,aAAK+U,OAAL,IAAgB,IAAhB,CADgB,CACM;AACvB;;AAED,aAAO,KAAKnV,UAAL,CAAgB,OAAhB,EAAyB,qBAAUmP,OAAV,CAAkBjJ,QAAQlF,EAA1B,CAAzB,EAAwD,IAAxD,EAA8DZ,IAA9D,EACJ6F,IADI,CACCzF,OAAO;AACX0F,gBAAQrE,IAAR,GAAezB,KAAKyB,IAApB;AACAqE,gBAAQyO,KAAR,GAAgBvU,KAAKuU,KAArB;AACAzO,gBAAQ8K,QAAR,GAAmB5Q,KAAK4Q,QAAxB;AACA9K,gBAAQ8O,SAAR,GAAoB5U,KAAKgV,UAAzB;AACAlP,gBAAQiP,OAAR,GAAkBhQ,KAAKkQ,IAAL,CAAUjV,KAAK+U,OAAL,GAAe,IAAzB,CAAlB;AACAjP,gBAAQoP,QAAR,GAAmBlV,KAAK+U,OAAxB;AACD,OARI,CAAP;AASD,KAtCM,CAAP;AAuCD;;AAED;AACAI,YAAUtU,IAAV,EAAgB;AACd,QAAI,KAAKA,IAAL,CAAUC,GAAd,EAAmB,OAAOhC,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,kDAAV,CAAf,CAAP;;AAEnB,QAAInF,EAAJ;AACA,QAAIC,gBAAgBiL,MAAhB,IAA0B,OAAOjL,IAAP,KAAgB,QAA9C,EACED,KAAKC,IAAL,CADF,KAEK,IAAIA,8BAAJ,EAA0B;AAC7BA,aAAO,KAAKsD,QAAL,CAAcqF,WAAd,CAA0B3I,IAA1B,CAAP;AACAD,WAAKC,KAAKD,EAAV;AACD,KAHI,MAGE;AACL,UAAIC,KAAKE,QAAL,IAAiBF,KAAKuU,aAA1B,EAAyC;AACvC,eAAO,KAAKxV,UAAL,CAAgB,KAAhB,EAAuB,qBAAUyV,OAAjC,EAA0C,IAA1C,EAAgDxU,IAAhD,CAAP,CADF,KAGE,OAAO/B,QAAQoB,MAAR,CAAe,cAAf,CAAP;AACH;;AAED,WAAO,KAAKN,UAAL,CAAgB,KAAhB,EAAwB,IAAE,qBAAUyV,OAAQ,MAAGzU,EAAG,GAAlD,EAAqD,IAArD,EAA2D,EAA3D,CAAP;AACD;;AAED;AACA0U,eAAazU,IAAb,EAAmB;AACjB,QAAI,KAAKA,IAAL,CAAUC,GAAd,EAAmB,OAAOhC,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,kDAAV,CAAf,CAAP;;AAEnBlF,WAAO,KAAKsD,QAAL,CAAcqF,WAAd,CAA0B3I,IAA1B,CAAP;;AAEA,WAAO,KAAKjB,UAAL,CAAgB,QAAhB,EAA2B,IAAE,qBAAUyV,OAAQ,MAAGxU,KAAKD,EAAG,GAA1D,EAA6D,IAA7D,CAAP;AACD;;AAED2U,oBAAkB5U,MAAlB,EAA0B;AACxBA,aAAS,KAAKwD,QAAL,CAAc+E,aAAd,CAA4BvI,MAA5B,CAAT;;AAEA,QAAI,CAACA,MAAL,EAAa;AACX,aAAO7B,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,0BAAV,CAAf,CAAP;AACD;;AAED,WAAO,KAAKnG,UAAL,CAAgB,KAAhB,EAAuB,qBAAU4V,eAAV,CAA0B7U,OAAOC,EAAjC,CAAvB,EAA6D,IAA7D,EACJiF,IADI,CACCzF,OAAOA,IAAIkN,GAAJ,CACXmI,WAAW;AACT,UAAI3P,UAAU,KAAKtF,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBgV,QAAQnG,UAAhC,CAAd;AACA,aAAOxJ,QAAQ4P,QAAR,CAAiBlK,GAAjB,CAAqB,sBAC1BiK,OAD0B,EAE1B9U,MAF0B,EAG1BmF,OAH0B,EAI1B,KAAK3C,KAAL,CAAW1C,GAAX,CAAe,IAAf,EAAqBgV,QAAQ5U,IAAR,CAAaD,EAAlC,CAJ0B,CAArB,CAAP;AAMD,KATU,CADR,CAAP;AAYD;;AAED+U,qBAAmB7P,OAAnB,EAA4B;AAC1B,WAAO,KAAK3B,QAAL,CAAcyB,cAAd,CAA6BE,OAA7B,EAAsCD,IAAtC,CAA2CC,WAAW;AAC3D,UAAI,CAACA,OAAL,EAAc;AACZ,eAAOhH,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,2BAAV,CAAf,CAAP;AACD;;AAED,aAAO,KAAKnG,UAAL,CAAgB,KAAhB,EAAuB,qBAAUgW,gBAAV,CAA2B9P,QAAQlF,EAAnC,CAAvB,EAA+D,IAA/D,EACJiF,IADI,CACCzF,OAAOA,IAAIkN,GAAJ,CACXmI,WAAW3P,QAAQ4P,QAAR,CAAiBlK,GAAjB,CAAqB,sBAC9BiK,OAD8B,EAE9B,KAAKjS,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBgV,QAAQvO,QAA/B,CAF8B,EAG9BpB,OAH8B,EAI9B,KAAK3C,KAAL,CAAW1C,GAAX,CAAe,IAAf,EAAqBgV,QAAQ5U,IAAR,CAAaD,EAAlC,CAJ8B,CAArB,CADA,CADR,CAAP;AASD,KAdM,CAAP;AAeD;;AAEDiV,cAAYJ,OAAZ,EAAqBnT,UAAU,EAA/B,EAAmC;AACjC,WAAO,KAAK6B,QAAL,CAAc2R,cAAd,CAA6BL,OAA7B,EAAsC5P,IAAtC,CAA2C4P,WAAW;AAC3D,UAAI,CAACA,OAAL,EAAc;AACZ,eAAO3W,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,4BAAV,CAAf,CAAP;AACD;;AAED,UAAIzD,QAAQX,cAAR,CAAuB,QAAvB,CAAJ,EAAsC;AACpCW,gBAAQ0R,MAAR,GAAiB,KAAK7P,QAAL,CAAckF,eAAd,CAA8B/G,QAAQ0R,MAAtC,CAAjB;AACD;;AAED,aAAO,KAAKpU,UAAL,CAAgB,OAAhB,EAAyB,qBAAUmW,OAAV,CAAkBN,QAAQ7U,EAA1B,CAAzB,EAAwD,IAAxD,EAA8D0B,OAA9D,EACJuD,IADI,CACCzF,OAAO;AACXqV,gBAAQhU,IAAR,GAAerB,IAAIqB,IAAnB;AACAgU,gBAAQzB,MAAR,GAAiB5T,IAAIuB,cAAJ,CAAmB,QAAnB,IAA+BvB,IAAI4T,MAAnC,GAA4CyB,QAAQzB,MAArE;AACD,OAJI,CAAP;AAKD,KAdM,CAAP;AAeD;;AAEDgC,gBAAclQ,OAAd,EAAuBxD,UAAU,EAAjC,EAAqC;AACnC,WAAO,KAAK6B,QAAL,CAAcyB,cAAd,CAA6BE,OAA7B,EACJD,IADI,CACCoG,eAAe;AACnB,UAAI,CAACnG,OAAL,EAAc;AACZ,eAAOhH,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,4BAAV,CAAf,CAAP;AACD;;AAED,UAAIzD,QAAQX,cAAR,CAAuB,QAAvB,CAAJ,EAAsC;AACpCW,gBAAQ0R,MAAR,GAAiB,KAAK7P,QAAL,CAAckF,eAAd,CAA8B/G,QAAQ0R,MAAtC,CAAjB;AACD;;AAED,aAAO,KAAKpU,UAAL,CAAgB,MAAhB,EAAwB,qBAAUgW,gBAAV,CAA2B3J,YAAYrL,EAAvC,CAAxB,EAAoE,IAApE,EAA0E0B,OAA1E,EACJuD,IADI,CACC4P,WAAW3P,QAAQ4P,QAAR,CAAiBlK,GAAjB,CAAqB,sBACpCiK,OADoC,EAEpC,KAAKjS,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBgV,QAAQvO,QAA/B,CAFoC,EAGpCpB,OAHoC,EAIpC,KAAK3C,KAAL,CAAW1C,GAAX,CAAe,IAAf,EAAqBgV,QAAQ5U,IAAR,CAAaD,EAAlC,CAJoC,CAArB,CADZ,CAAP;AAOD,KAjBI,CAAP;AAkBD;;AAEDqV,gBAAcR,OAAd,EAAuB;AACrB,WAAO,KAAKtR,QAAL,CAAc2R,cAAd,CAA6BL,OAA7B,EAAsC5P,IAAtC,CAA2C4P,WAAW;AAC3D,UAAI,CAACA,OAAL,EAAc;AACZ,eAAO3W,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,4BAAV,CAAf,CAAP;AACD;;AAED,aAAO,KAAKnG,UAAL,CAAgB,QAAhB,EAA0B,qBAAUmW,OAAV,CAAkBN,QAAQ7U,EAA1B,CAA1B,EAAyD,IAAzD,EACJiF,IADI,CACC,MAAM;AACV4P,gBAAQ3P,OAAR,CAAgB4P,QAAhB,CAAyBxI,MAAzB,CAAgCuI,OAAhC;AACD,OAHI,CAAP;AAID,KATM,CAAP;AAUD;;AAEDS,qBAAmBT,OAAnB,EAA4B5J,QAA5B,EAAsCvJ,UAAU,EAAhD,EAAoD;AAClD,WAAO,KAAK6B,QAAL,CAAc2R,cAAd,CAA6BL,OAA7B,EACJ5P,IADI,CACCoG,eAAe;AACnB,UAAIC,UAAU,KAAK/H,QAAL,CAAcuE,aAAd,CAA4BmD,QAA5B,CAAd;;AAEA,UAAI,KAAKzJ,MAAL,CAAYE,OAAZ,CAAoB6J,eAApB,IAAuC7J,QAAQ6J,eAAnD,EAAoE;AAClED,kBAAUA,QAAQE,OAAR,CAAgB,qBAAhB,EAAuC,YAAvC,CAAV;AACD;;AAED,UAAI,CAAC9J,QAAQX,cAAR,CAAuB,UAAvB,CAAL,EAAyC;AACvCW,gBAAQvB,QAAR,GAAmB,KAAKF,IAAL,CAAUE,QAA7B;AACD;;AAED,UAAIoV,KAAJ;AACA,UAAI7T,QAAQX,cAAR,CAAuB,OAAvB,CAAJ,EAAqC;AACnCwU,gBAAQ7T,QAAQ6T,KAAhB;AACA,eAAO7T,QAAQ,OAAR,CAAP;AACD;;AAEDA,cAAQ4J,OAAR,GAAkBA,OAAlB;;AAEA,aAAO,KAAKtM,UAAL,CACL,MADK,EAEJ,IAAE,qBAAUwW,eAAV,CAA0BnK,YAAYrL,EAAtC,EAA0CqL,YAAY1K,KAAtD,CAA6D,KAAE4U,QAAQ,QAAR,GAAmB,EAAG,aAFnF,EAGL,IAHK,EAIL7T,OAJK,CAAP;AAMD,KA1BI,CAAP;AA4BD;;AAED;AACA+T,sBAAoBC,KAApB,EAA2B;AACzBA,YAAQA,SAAS,KAAjB;AACA,WAAO,KAAK1W,UAAL,CAAgB,KAAhB,EAAuB,qBAAU2W,kBAAV,CAA6BD,KAA7B,CAAvB,EAA4D,IAA5D,CAAP;AACD;;AAED;AACAE,MAAItQ,GAAJ,EAAS;AACPA,UAAM,KAAK/B,QAAL,CAAcgC,cAAd,CAA6BD,GAA7B,CAAN;;AAEA,QAAI,CAACA,GAAL,EAAU;AACR,aAAOpH,QAAQoB,MAAR,CAAe,IAAI6F,KAAJ,CAAU,wBAAV,CAAf,CAAP;AACD;;AAED,WAAO,KAAKnG,UAAL,CAAgB,MAAhB,EAAwB,qBAAUqN,eAAV,CAA0B/G,IAAIJ,OAAJ,CAAYlF,EAAtC,EAA0CsF,IAAItF,EAA9C,IAAoD,MAA5E,EAAoF,IAApF,CAAP;AACD;;AAED6F,SAAOgQ,MAAP,EAAe;AACb,QAAI,KAAKzT,SAAT,EAAoB;AAClB;AACA,WAAKA,SAAL,CAAelB,IAAf,CAAoB4U,KAAK1I,SAAL,CAAeyI,MAAf,CAApB;AACD;AACF;;AAEDjM,WAAS1K,GAAT,EAAc;AACZ,QAAI,KAAKkD,SAAT,EAAoB;AAClB,aAAO,KAAP;AACD;AACD,QAAI,CAAClD,IAAI6W,QAAJ,CAAa,GAAb,CAAL,EAAwB;AACtB7W,aAAO,GAAP;AACD;AACDA,WAAO,sBAAsBvB,eAA7B;;AAEA,SAAKyE,SAAL,GAAiB,iBAAclD,GAAd,CAAjB;;AAEA,SAAKkD,SAAL,CAAe4T,MAAf,GAAwB,MAAM,CAC7B,CADD;;AAGA,SAAK5T,SAAL,CAAe6T,OAAf,GAA0BC,KAAD,IAAW;AAClC,WAAK9T,SAAL,GAAiB,IAAjB;AACA,WAAKF,KAAL,GAAa,0BAAgB8H,YAA7B;AACA,UAAIkM,SAASA,MAAMC,IAAnB,EAAyB;AACvB,aAAK3U,MAAL,CAAYC,IAAZ,CAAiB,MAAjB,EAAyB,eAAeyU,MAAMC,IAA9C;AACA,YAAIC,GAAJ;AACA,YAAIF,MAAMC,IAAN,KAAe,IAAnB,EAAyB;AACvB,cAAI,CAAC,KAAKrX,WAAV,EAAuB;AACrB,iBAAKC,KAAL;AACD;AACDqX,gBAAM,IAAIjR,KAAJ,CAAU,uBAAV,CAAN;AACD,SALD,MAKO,IAAI+Q,MAAMC,IAAN,KAAe,IAAnB,EAAyB;AAC9BC,gBAAM,IAAIjR,KAAJ,CAAU,kCAAV,CAAN;AACD,SAFM,MAEA,IAAI+Q,MAAMC,IAAN,KAAe,IAAnB,EAAyB;AAC9BC,gBAAM,IAAIjR,KAAJ,CAAU,kCAAV,CAAN;AACD,SAFM,MAEA,IAAI+Q,MAAMC,IAAN,KAAe,IAAnB,EAAyB;AAC9BC,gBAAM,IAAIjR,KAAJ,CAAU,mBAAV,CAAN;AACD,SAFM,MAEA,IAAI+Q,MAAMC,IAAN,KAAe,IAAnB,EAAyB;AAC9BC,gBAAM,IAAIjR,KAAJ,CAAU,uBAAV,CAAN;AACD,SAFM,MAEA,IAAI+Q,MAAMC,IAAN,KAAe,IAAnB,EAAyB;AAC9BC,gBAAM,IAAIjR,KAAJ,CAAU,uBAAV,CAAN;AACD,SAFM,MAEA,IAAI+Q,MAAMC,IAAN,KAAe,IAAf,IAAuBD,MAAMC,IAAN,KAAe,IAA1C,EAAgD;AACrDC,gBAAM,IAAIjR,KAAJ,CAAU,iBAAV,CAAN;AACD,SAFM,MAEA,IAAI+Q,MAAMC,IAAN,KAAe,IAAnB,EAAyB;AAC9B,eAAKE,QAAL,GAAgB,CAAhB;AACAD,gBAAM,IAAIjR,KAAJ,CAAU,yBAAV,CAAN;AACD,SAHM,MAGA,IAAI+Q,MAAMC,IAAN,KAAe,IAAnB,EAAyB;AAC9BC,gBAAM,IAAIjR,KAAJ,CAAU,oCAAV,CAAN;AACD,SAFM,MAEA,IAAI+Q,MAAMC,IAAN,KAAe,IAAnB,EAAyB;AAC9BC,gBAAM,IAAIjR,KAAJ,CAAU,mBAAV,CAAN;AACD,SAFM,MAEA;AACLiR,gBAAM,IAAIjR,KAAJ,CAAW,4BAA0B+Q,MAAMC,IAAK,GAAhD,CAAN;AACD;AACD,YAAIC,GAAJ,EAAS;AACP,eAAK5U,MAAL,CAAYC,IAAZ,CAAiB,OAAjB,EAA0B2U,GAA1B;AACD;AACF;AACD,WAAKtS,YAAL,CAAkB,KAAKtC,MAAL,CAAYE,OAAZ,CAAoBqC,aAAtC;AACD,KAtCD;;AAwCA,SAAK3B,SAAL,CAAekU,OAAf,GAAyBC,KAAK;AAC5B,WAAK/U,MAAL,CAAYC,IAAZ,CAAiB,OAAjB,EAA0B8U,CAA1B;AACA,WAAKnU,SAAL,GAAiB,IAAjB;AACA,WAAKF,KAAL,GAAa,0BAAgB8H,YAA7B;AACA,WAAKlG,YAAL,CAAkB,KAAKtC,MAAL,CAAYE,OAAZ,CAAoBqC,aAAtC;AACD,KALD;;AAOA,SAAK3B,SAAL,CAAeoU,SAAf,GAA2BD,KAAK;AAC9B,UAAIA,EAAEnX,IAAF,YAAkBqX,MAAtB,EAA8B;AAC5B,YAAI,CAAChZ,IAAL,EAAWA,OAAOC,QAAQ,MAAR,CAAP;AACX6Y,UAAEnX,IAAF,GAAS3B,KAAKiZ,WAAL,CAAiBH,EAAEnX,IAAnB,EAAyBuX,QAAzB,EAAT;AACD;;AAED,UAAI7D,MAAJ;AACA,UAAI;AACFA,iBAASgD,KAAKc,KAAL,CAAWL,EAAEnX,IAAb,CAAT;AACD,OAFD,CAEE,OAAOmX,CAAP,EAAU;AACV,aAAK/U,MAAL,CAAYC,IAAZ,CAAiB,OAAjB,EAA0B8U,CAA1B;AACA;AACD;;AAED,WAAK/U,MAAL,CAAYC,IAAZ,CAAiB,KAAjB,EAAwBqR,MAAxB;;AAEA;;;;;;AAMA,UAAIA,OAAO+D,CAAX,EAAc;AACZ,aAAKR,QAAL,GAAgBvD,OAAO+D,CAAvB;AACD;;AAED,cAAQ/D,OAAOhN,EAAf;AACE,aAAK,CAAL;AACE,eAAKgR,aAAL,CAAmBhE,MAAnB;AACA;AACF,aAAK,CAAL;AACE,eAAKiE,cAAL,GAAsB,IAAtB;AACA,eAAKC,SAAL;AACA;AACF,aAAK,CAAL;AACE,eAAKlT,YAAL,CAAkB,IAAlB;AACA;AACF,aAAK,CAAL;AACE,eAAK9B,SAAL,GAAiB,IAAjB;AACA,eAAKqU,QAAL,GAAgB,CAAhB;AACA,eAAKY,QAAL;AACA;AACF,aAAK,EAAL;AACE,cAAI,KAAKjV,SAAT,EAAoB;AAClB,iBAAKkV,MAAL;AACD,WAFD,MAEO;AACL,iBAAKD,QAAL;AACD;AACD,eAAKF,cAAL,GAAsB,IAAtB,CANF,CAM8B;AAC5B,eAAKC,SAAL;AACA,eAAKD,cAAL,GAAsB,IAAtB;AACA,eAAK7T,SAAL,CAAeE,GAAf,GAAqB/E,YAAY,MAAM,KAAK2Y,SAAL,EAAlB,EAAoClE,OAAO/M,CAAP,CAASoR,kBAA7C,CAArB;AACA;AACF,aAAK,EAAL;AACE,eAAKJ,cAAL,GAAsB,IAAtB;AACA;AACF;AACE,eAAKvV,MAAL,CAAYC,IAAZ,CAAiB,SAAjB,EAA4BqR,MAA5B;AACA;AAhCJ;AAkCD,KA5DD;AA6DD;;AAEDgE,gBAAchE,MAAd,EAAsB;AACpB,QAAItR,SAAS,KAAKA,MAAlB;AACA,QAAIpC,OAAO0T,OAAO/M,CAAlB;AACA,YAAQ+M,OAAOzM,CAAf;AACE,WAAK,sBAAW+Q,OAAhB;AACA,WAAK,sBAAWC,KAAhB;AAAuB;AACrB,eAAKvU,qBAAL,GAA6B,IAA7B;AACA,eAAKZ,KAAL,GAAa,0BAAgBmV,KAA7B;;AAEA,cAAIvE,OAAOzM,CAAP,KAAa,sBAAW+Q,OAA5B,EAAqC;AACnC;AACD;;AAED,eAAKpV,SAAL,GAAiB5C,KAAKkY,UAAtB;AACA,cAAIhX,YAAYC,KAAKC,GAAL,EAAhB;;AAEA,eAAKP,IAAL,GAAY,KAAKsC,KAAL,CAAWqI,GAAX,CAAe,mBAASxL,KAAKa,IAAd,EAAoBuB,MAApB,CAAf,CAAZ;;AAEA,eAAKwF,eAAL,GAAuB,EAAvB;AACA,eAAKG,eAAL,GAAuB,EAAvB;AACA,eAAKF,gBAAL,GAAwB,CAAxB;;AAEA7H,eAAKmY,MAAL,CAAYvT,OAAZ,CAAoBjE,UAAU;AAC5B,gBAAI,CAACA,OAAOyX,WAAZ,EAAyB;AACvBzX,uBAAS,KAAK6C,OAAL,CAAagI,GAAb,CAAiB,qBAAW7K,MAAX,EAAmByB,MAAnB,CAAjB,CAAT;AACA,kBAAIA,OAAOE,OAAP,CAAexB,GAAf,KAAuB,KAA3B,EAAkC;AAChC,qBAAK6C,cAAL;AACA,qBAAKuE,SAAL,CAAevH,OAAOC,EAAtB;AACD;AACD,kBAAI,KAAKwB,MAAL,CAAYE,OAAZ,CAAoB+V,eAApB,IAAuC1X,OAAO2X,OAA9C,IAAyD3X,OAAO2X,OAAP,CAAe/Q,MAAf,GAAwB5G,OAAO4X,WAA5F,EAAyG;AACvG,qBAAK9Q,eAAL,CAAqB9G,OAAOC,EAA5B,EAAgCmE,KAAKkQ,IAAL,CAAUtU,OAAO4X,WAAP,GAAqB,IAA/B,CAAhC;AACD;AACF,aATD,MASO;AACLnW,qBAAOC,IAAP,CAAY,OAAZ,EAAqB,YAAY1B,OAAOC,EAAnB,GAAwB,4CAA7C;AACA,mBAAK6C,kBAAL,CAAwB+H,GAAxB,CAA4B7K,MAA5B;AACD;AACF,WAdD;AAeAX,eAAKU,gBAAL,CAAsBkE,OAAtB,CAA8B4T,MAAM;AAClC,iBAAK9X,gBAAL,CAAsB8K,GAAtB,CAA0B,wBAAcgN,EAAd,EAAkBpW,MAAlB,CAA1B;AACD,WAFD;AAGA,cAAI,CAACpC,KAAKa,IAAL,CAAUC,GAAf,EAAoB;AAAE;AACpBd,iBAAKyY,aAAL,CAAmB7T,OAAnB,CAA2B8T,UAAU;AACnC,kBAAIA,OAAO1S,IAAP,KAAgB,CAApB,EAAuB;AAAE;AACvB,qBAAK5C,OAAL,CAAaoI,GAAb,CAAiB,mBAASkN,OAAO7X,IAAhB,EAAsBuB,MAAtB,CAAjB;AACD,eAFD,MAEO,IAAIsW,OAAO1S,IAAP,KAAgB,CAApB,EAAuB;AAAE;AAC9B,qBAAK3C,aAAL,CAAmBmI,GAAnB,CAAuB,mBAASkN,OAAO7X,IAAhB,EAAsBuB,MAAtB,CAAvB;AACD,eAFM,MAEA,IAAIsW,OAAO1S,IAAP,KAAgB,CAApB,EAAuB;AAAE;AAC9B,qBAAKzC,wBAAL,CAA8BiI,GAA9B,CAAkC,mBAASkN,OAAO7X,IAAhB,EAAsBuB,MAAtB,CAAlC;AACD,eAFM,MAEA,IAAIsW,OAAO1S,IAAP,KAAgB,CAApB,EAAuB;AAAE;AAC9B,qBAAK1C,wBAAL,CAA8BkI,GAA9B,CAAkC,mBAASkN,OAAO7X,IAAhB,EAAsBuB,MAAtB,CAAlC;AACD,eAFM,MAEA;AACLA,uBAAOC,IAAP,CAAY,MAAZ,EAAoB,yBAAyBqW,OAAO1S,IAApD;AACD;AACF,aAZD;AAaD,WAdD,MAcO;AACL,iBAAK5C,OAAL,GAAe,IAAf;AACA,iBAAKC,aAAL,GAAqB,IAArB;AACA,iBAAKE,wBAAL,GAAgC,IAAhC;AACA,iBAAKD,wBAAL,GAAgC,IAAhC;AACD;;AAED;AACA,cAAItD,KAAK2Y,KAAT,EAAgB;AACd,iBAAK,IAAI1I,IAAT,IAAiBjQ,KAAK2Y,KAAtB,EAA6B;AAC3B,kBAAI3Y,KAAK2Y,KAAL,CAAWhX,cAAX,CAA0BsO,IAA1B,CAAJ,EAAqC;AACnC,oBAAIpP,OAAO,KAAKsC,KAAL,CAAW1C,GAAX,CAAe,IAAf,EAAqBwP,IAArB,CAAX;AACA,oBAAIpP,IAAJ,EAAU;AACR,sBAAI+X,UAAU/X,IAAd;AACA+X,0BAAQ3I,IAAR,GAAejQ,KAAK2Y,KAAL,CAAW1I,IAAX,CAAf;;AAEA,uBAAK9M,KAAL,CAAWsK,MAAX,CAAkB5M,IAAlB,EAAwB+X,OAAxB;AACD,iBALD,MAKO;AACLxW,yBAAOC,IAAP,CAAY,MAAZ,EAAoB,0CAApB;AACD;AACF;AACF;AACF;;AAEDD,iBAAOC,IAAP,CAAY,OAAZ,EAAsB,sBAAoBlB,KAAKC,GAAL,KAAaF,SAAU,gBAAjE;AACAkB,iBAAOC,IAAP,CAAY,OAAZ,EAAsB,eAAa,KAAKmB,OAAL,CAAa+D,MAAO,eAAY,KAAK9D,kBAAL,CAAwB8D,MAAO,2BAAwB,KAAK/G,QAAL,CAAc+G,MAAO,mBAAgB,KAAKpE,KAAL,CAAWoE,MAAO,iBAAjL;;AAEA,eAAKe,0BAAL;;AAEA;AACD;AACD,WAAK,sBAAWuQ,cAAhB;AAAgC;AAC9B;AACA,cAAI/S,UAAU,KAAKtF,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBT,KAAKsP,UAA7B,KAA4C,KAAK5O,gBAAL,CAAsBD,GAAtB,CAA0B,IAA1B,EAAgCT,KAAKsP,UAArC,CAA1D;AACA,cAAIxJ,OAAJ,EAAa;AACX,gBAAII,MAAMJ,QAAQ2G,QAAR,CAAiBjB,GAAjB,CAAqB,sBAAYxL,IAAZ,EAAkB8F,OAAlB,EAA2B1D,MAA3B,CAArB,CAAV;AACA0D,oBAAQgT,aAAR,GAAwB5S,IAAItF,EAA5B;AACA,gBAAI,KAAKyD,aAAL,CAAmByB,QAAQlF,EAAR,GAAasF,IAAIG,MAAJ,CAAWzF,EAA3C,CAAJ,EAAoD;AAClD,mBAAKyD,aAAL,CAAmByB,QAAQlF,EAAR,GAAasF,IAAIG,MAAJ,CAAWzF,EAA3C,EAA+C0M,GAA/C,CAAmDyL,MAAMA,GAAG7S,GAAH,CAAzD;AACA,mBAAK7B,aAAL,CAAmByB,QAAQlF,EAAR,GAAasF,IAAIG,MAAJ,CAAWzF,EAA3C,IAAiD,IAAjD;AACAwB,qBAAOC,IAAP,CAAY,SAAZ,EAAuB6D,GAAvB,EAA4B,IAA5B,EAHkD,CAGf;AACpC,aAJD,MAIO;AACL9D,qBAAOC,IAAP,CAAY,SAAZ,EAAuB6D,GAAvB;AACD;AACF,WAVD,MAUO;AACL9D,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,2CAApB;AACD;AACD;AACD;AACD,WAAK,sBAAW2W,cAAhB;AAAgC;AAC9B,cAAIlT,UAAU,KAAKtF,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBT,KAAKsP,UAA7B,KAA4C,KAAK5O,gBAAL,CAAsBD,GAAtB,CAA0B,IAA1B,EAAgCT,KAAKsP,UAArC,CAA1D;AACA,cAAIxJ,OAAJ,EAAa;AACX;AACA,gBAAII,MAAMJ,QAAQ2G,QAAR,CAAiBhM,GAAjB,CAAqB,IAArB,EAA2BT,KAAKY,EAAhC,CAAV;AACAwB,mBAAOC,IAAP,CAAY,gBAAZ,EAA8B6D,GAA9B,EAAmCJ,OAAnC;AACA,gBAAII,GAAJ,EAAS;AACPJ,sBAAQ2G,QAAR,CAAiBS,MAAjB,CAAwBhH,GAAxB;AACD,aAFD,MAEO;AACL9D,qBAAOC,IAAP,CAAY,OAAZ,EAAqB,+CAArB;AACD;AACF,WATD,MASO;AACLD,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,+CAApB;AACD;AACD;AACD;AACD,WAAK,sBAAW4W,mBAAhB;AAAqC;AACnC,cAAInT,UAAU,KAAKtF,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBT,KAAKsP,UAA7B,KAA4C,KAAK5O,gBAAL,CAAsBD,GAAtB,CAA0B,IAA1B,EAAgCT,KAAKsP,UAArC,CAA1D;AACA,cAAIxJ,OAAJ,EAAa;AACX9F,iBAAKkZ,GAAL,CAAStU,OAAT,CAAkBhE,EAAD,IAAQ;AACvB;AACA,kBAAIsF,MAAMJ,QAAQ2G,QAAR,CAAiBhM,GAAjB,CAAqB,IAArB,EAA2BG,EAA3B,CAAV;AACAwB,qBAAOC,IAAP,CAAY,gBAAZ,EAA8B6D,GAA9B,EAAmCJ,OAAnC;AACA,kBAAII,GAAJ,EAAS;AACPJ,wBAAQ2G,QAAR,CAAiBS,MAAjB,CAAwBhH,GAAxB;AACD,eAFD,MAEO;AACL9D,uBAAOC,IAAP,CAAY,OAAZ,EAAqB,+CAArB;AACD;AACF,aATD;AAUD,WAXD,MAWO;AACLD,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,+CAApB;AACD;AACD;AACD;AACD,WAAK,sBAAW8W,cAAhB;AAAgC;AAC9B;AACA,cAAIrT,UAAU,KAAKtF,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBT,KAAKsP,UAA7B,KAA4C,KAAK5O,gBAAL,CAAsBD,GAAtB,CAA0B,IAA1B,EAAgCT,KAAKsP,UAArC,CAA1D;AACA,cAAIxJ,OAAJ,EAAa;AACX;AACA,gBAAII,MAAMJ,QAAQ2G,QAAR,CAAiBhM,GAAjB,CAAqB,IAArB,EAA2BT,KAAKY,EAAhC,CAAV;;AAEA,gBAAIsF,GAAJ,EAAS;AACP;AACAlG,mBAAKwM,KAAL,GAAaxM,KAAKwM,KAAL,KAAe5K,SAAf,GAA2B5B,KAAKwM,KAAhC,GAAwCtG,IAAIsG,KAAzD;AACAxM,mBAAKoZ,WAAL,GAAmBpZ,KAAKoZ,WAAL,KAAqBxX,SAArB,GAAiC5B,KAAKoZ,WAAtC,GAAoDlT,IAAIkT,WAA3E;AACApZ,mBAAKuM,GAAL,GAAWvM,KAAKuM,GAAL,KAAa3K,SAAb,GAAyB5B,KAAKuM,GAA9B,GAAoCrG,IAAIqG,GAAnD;AACAvM,mBAAKqZ,MAAL,GAAcrZ,KAAKqZ,MAAL,KAAgBzX,SAAhB,GAA4B5B,KAAKqZ,MAAjC,GAA0CnT,IAAImT,MAA5D;AACArZ,mBAAKsZ,SAAL,GAAiBtZ,KAAKsZ,SAAL,KAAmB1X,SAAnB,GAA+B5B,KAAKsZ,SAApC,GAAgDpT,IAAIoT,SAArE;AACAtZ,mBAAKuZ,gBAAL,GAAwBvZ,KAAKuZ,gBAAL,KAA0B3X,SAA1B,GAAsC5B,KAAKuZ,gBAA3C,GAA8DrT,IAAIsT,iBAA1F;AACAxZ,mBAAKkM,OAAL,GAAelM,KAAKkM,OAAL,KAAiBtK,SAAjB,GAA6B5B,KAAKkM,OAAlC,GAA4ChG,IAAIgG,OAA/D;AACAlM,mBAAKyZ,QAAL,GAAgBzZ,KAAKyZ,QAAL,KAAkB7X,SAAlB,GAA8B5B,KAAKyZ,QAAnC,GAA8CvT,IAAIuT,QAAlE;AACAzZ,mBAAKqG,MAAL,GAAcrG,KAAKqG,MAAL,KAAgBzE,SAAhB,GAA4B5B,KAAKqG,MAAjC,GAA0CH,IAAIG,MAA5D;AACAH,oBAAM,sBAAYA,GAAZ,EAAiBJ,OAAjB,EAA0B1D,MAA1B,CAAN;AACD,aAZD,MAYO,IAAI,CAACpC,KAAKqG,MAAN,IAAgB,CAACrG,KAAKkM,OAA1B,EAAmC;AACxC;AACD;AACD,gBAAIwN,OAAO,sBAAY1Z,IAAZ,EAAkB8F,OAAlB,EAA2B1D,MAA3B,CAAX;AACAA,mBAAOC,IAAP,CAAY,gBAAZ,EAA8B6D,GAA9B,EAAmCwT,IAAnC;AACA,gBAAIxT,GAAJ,EAAS;AACPJ,sBAAQ2G,QAAR,CAAiBgB,MAAjB,CAAwBvH,GAAxB,EAA6BwT,IAA7B;AACD;AACF,WAxBD,MAwBO;AACLtX,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,+CAApB;AACD;AACD;AACD;AACD,WAAK,sBAAWsX,aAAhB;AAA+B;AAC7B,cAAIhZ,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKY,EAA5B,CAAb;AACA,cAAI,CAACD,MAAL,EAAa;AACX,gBAAI,CAACX,KAAKoY,WAAV,EAAuB;AACrBzX,uBAAS,KAAK6C,OAAL,CAAagI,GAAb,CAAiB,qBAAWxL,IAAX,EAAiBoC,MAAjB,CAAjB,CAAT;AACA,kBAAIA,OAAOE,OAAP,CAAexB,GAAf,KAAuB,KAA3B,EAAkC;AAChC,qBAAK6C,cAAL;AACA,qBAAKuE,SAAL,CAAevH,OAAOC,EAAtB;AACD;AACD,kBAAIwB,OAAOgC,SAAX,EAAsB;AACpBhC,uBAAOC,IAAP,CAAY,eAAZ,EAA6B1B,MAA7B;AACD;AACD,kBAAI,KAAKyB,MAAL,CAAYE,OAAZ,CAAoB+V,eAApB,IAAuC1X,OAAOiZ,KAA9C,IAAuDjZ,OAAO2X,OAAP,CAAe/Q,MAAf,GAAwB5G,OAAO4X,WAA1F,EAAuG;AACrG,qBAAK9Q,eAAL,CAAqB9G,OAAOC,EAA5B,EAAgCmE,KAAKkQ,IAAL,CAAUtU,OAAO4X,WAAP,GAAqB,IAA/B,CAAhC;AACD;AACD,kBAAIH,cAAc,KAAK3U,kBAAL,CAAwBhD,GAAxB,CAA4B,IAA5B,EAAkCE,OAAOC,EAAzC,CAAlB;AACA,kBAAIwX,WAAJ,EAAiB;AACf,qBAAK3U,kBAAL,CAAwByJ,MAAxB,CAA+BkL,WAA/B;AACD;AACD,mBAAK9P,0BAAL;AACD,aAjBD,MAiBO;AACLlG,qBAAOC,IAAP,CAAY,OAAZ,EAAqB,0CAArB;AACD;AACF;AACD;AACD;AACD,WAAK,sBAAWwX,aAAhB;AAA+B;AAC7B,cAAIlZ,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKY,EAA5B,CAAb;AACA,cAAID,MAAJ,EAAY;AACV,gBAAI,CAACX,KAAKoY,WAAV,EAAuB;AACrBhW,qBAAOC,IAAP,CAAY,eAAZ,EAA6B1B,MAA7B;;AAEA,mBAAK,IAAImF,OAAT,IAAoBnF,OAAOH,QAA3B,EAAqC;AACnC,qBAAKA,QAAL,CAAc0M,MAAd,CAAqBpH,OAArB;AACD;;AAED,mBAAKtC,OAAL,CAAa0J,MAAb,CAAoBvM,MAApB;;AAEA,mBAAK,IAAIE,IAAT,IAAiBF,OAAO2X,OAAxB,EAAiC;AAC/B,oBAAIwB,QAAQ,KAAZ;AACA,qBAAK,IAAIrC,CAAT,IAAc,KAAKjU,OAAnB,EAA4B;AAC1B,sBAAIiU,EAAEa,OAAF,CAAU7X,GAAV,CAAc,IAAd,EAAoBI,KAAKD,EAAzB,CAAJ,EAAkC;AAChCkZ,4BAAQ,IAAR;AACA;AACD;AACF;AACD,oBAAI,CAACA,KAAL,EAAY;AACV,uBAAK3W,KAAL,CAAW+J,MAAX,CAAkBrM,IAAlB;AACD;AACF;AACF,aArBD,MAqBO;AACLuB,qBAAOC,IAAP,CAAY,OAAZ,EAAqB,0CAArB;AACD;AACD,iBAAK/B,OAAL,CAAa,mBAAmBoT,OAAO/M,CAAP,CAAS/F,EAAzC,IACE,KAAKN,OAAL,CAAa,UAAUoT,OAAO/M,CAAP,CAAS/F,EAAhC,IACE,KAAKN,OAAL,CAAa,WAAWoT,OAAO/M,CAAP,CAAS/F,EAAjC,IACE,KAAKN,OAAL,CAAa,kBAAkBoT,OAAO/M,CAAP,CAAS/F,EAAxC,IACE,KAAKN,OAAL,CAAa,uBAAuBoT,OAAO/M,CAAP,CAAS/F,EAA7C,IAAmDgB,SAJ3D;AAKD,WA9BD,MA8BO;AACLQ,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,gDAApB;AACD;AACD;AACD;AACD,WAAK,sBAAW0X,aAAhB;AAA+B;AAC7B,cAAIpZ,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKY,EAA5B,CAAb;AACA,cAAID,MAAJ,EAAY;AACV;AACAX,iBAAKsY,OAAL,GAAetY,KAAKsY,OAAL,IAAgB,EAA/B;AACAtY,iBAAKQ,QAAL,GAAgBR,KAAKQ,QAAL,IAAiB,EAAjC;AACA,gBAAIwZ,YAAY,qBAAWha,IAAX,EAAiBoC,MAAjB,CAAhB;AACA4X,sBAAU1B,OAAV,GAAoB3X,OAAO2X,OAA3B;AACA0B,sBAAU1I,SAAV,GAAsB3Q,OAAO2Q,SAA7B;AACA0I,sBAAUxZ,QAAV,GAAqBG,OAAOH,QAA5B;AACA,gBAAIwZ,UAAUC,YAAV,CAAuBtZ,MAAvB,CAAJ,EAAoC;AAClC;AACAyB,qBAAOC,IAAP,CAAY,OAAZ,EAAqB,mDAArB;AACD,aAHD,MAGO;AACLD,qBAAOC,IAAP,CAAY,eAAZ,EAA6B,qBAAW1B,MAAX,EAAmByB,MAAnB,CAA7B,EAAyD4X,SAAzD;AACA,mBAAKxW,OAAL,CAAaiK,MAAb,CAAoB9M,MAApB,EAA4BqZ,SAA5B;AACD;AACF,WAfD,MAeO,IAAI,CAACrZ,MAAL,EAAa;AAClByB,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,gDAApB;AACD;AACD;AACD;AACD,WAAK,sBAAW6X,cAAhB;AAAgC;;AAE9B,cAAIpU,UAAU,KAAKtF,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBT,KAAKY,EAA7B,CAAd;;AAEA,cAAI,CAACkF,OAAL,EAAc;;AAEZ,gBAAInF,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKkH,QAA5B,CAAb;AACA,gBAAIvG,MAAJ,EAAY;AACV,kBAAIwZ,OAAO,IAAX;AACA,kBAAIna,KAAKgG,IAAL,KAAc,CAAlB,EAAqB;AACnBmU,uBAAO,KAAK3Z,QAAL,CAAcgL,GAAd,CAAkB,0BAAgBxL,IAAhB,EAAsBoC,MAAtB,EAA8BzB,MAA9B,CAAlB,CAAP;AACD,eAFD,MAEO;AACLwZ,uBAAO,KAAK3Z,QAAL,CAAcgL,GAAd,CAAkB,2BAAiBxL,IAAjB,EAAuBoC,MAAvB,EAA+BzB,MAA/B,CAAlB,CAAP;AACD;AACDyB,qBAAOC,IAAP,CAAY,gBAAZ,EAA8B1B,OAAOH,QAAP,CAAgBgL,GAAhB,CAAoB2O,IAApB,CAA9B;AACD,aARD,MAQO,IAAIna,KAAKoa,UAAT,EAAqB;AAC1BhY,qBAAOC,IAAP,CAAY,gBAAZ,EAA8B,KAAK3B,gBAAL,CAAsB8K,GAAtB,CAA0B,wBAAcxL,IAAd,EAAoBoC,MAApB,CAA1B,CAA9B;AACD,aAFM,MAEA;AACLA,qBAAOC,IAAP,CAAY,MAAZ,EAAoB,2CAApB;AACD;AAEF,WAjBD,MAiBO;AACLD,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,sCAApB;AACD;;AAED;AACD;AACD,WAAK,sBAAWgY,cAAhB;AAAgC;AAC9B,cAAIvU,UAAU,KAAKtF,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBT,KAAKY,EAA7B,KAAoC,KAAKF,gBAAL,CAAsBD,GAAtB,CAA0B,IAA1B,EAAgCT,KAAKY,EAArC,CAAlD;AACA,cAAIkF,OAAJ,EAAa;;AAEX,gBAAIA,QAAQnF,MAAZ,EAAoB;AAAE;AACpBmF,sBAAQnF,MAAR,CAAeH,QAAf,CAAwB0M,MAAxB,CAA+BpH,OAA/B;AACA,mBAAKtF,QAAL,CAAc0M,MAAd,CAAqBpH,OAArB;AACD,aAHD,MAGO;AACL,mBAAKpF,gBAAL,CAAsBwM,MAAtB,CAA6BpH,OAA7B;AACD;;AAED1D,mBAAOC,IAAP,CAAY,gBAAZ,EAA8ByD,OAA9B;AAED,WAXD,MAWO;AACL1D,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,2CAApB;AACD;AACD;AACD;AACD,WAAK,sBAAWiY,cAAhB;AAAgC;AAC9B,cAAIxU,UAAU,KAAKtF,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBT,KAAKY,EAA7B,KAAoC,KAAKF,gBAAL,CAAsBD,GAAtB,CAA0B,IAA1B,EAAgCT,KAAKY,EAArC,CAAlD;AACA,cAAIkF,OAAJ,EAAa;;AAEX,gBAAIA,sCAAJ,EAAkC;AAChC;AACA1D,qBAAOC,IAAP,CAAY,gBAAZ,EAA8B,wBAAcyD,OAAd,EAAuB1D,MAAvB,CAA9B,EACE,KAAK1B,gBAAL,CAAsB+M,MAAtB,CAA6B3H,OAA7B,EAAsC,wBAAc9F,IAAd,EAAoBoC,MAApB,CAAtC,CADF;AAED,aAJD,MAIO;AACL,kBAAI0D,QAAQnF,MAAZ,EAAoB;AAClB,oBAAImF,QAAQE,IAAR,KAAiB,CAArB,EAAwB;AACtB;AACA,sBAAImU,OAAO,0BAAgBna,IAAhB,EAAsBoC,MAAtB,EAA8B0D,QAAQnF,MAAtC,CAAX;AACAwZ,uBAAK1N,QAAL,GAAgB3G,QAAQ2G,QAAxB;AACArK,yBAAOC,IAAP,CAAY,gBAAZ,EAA8ByD,OAA9B,EAAuCqU,IAAvC;AACArU,0BAAQnF,MAAR,CAAeH,QAAf,CAAwBiN,MAAxB,CAA+B3H,OAA/B,EAAwCqU,IAAxC;AACA,uBAAK3Z,QAAL,CAAciN,MAAd,CAAqB3H,OAArB,EAA8BqU,IAA9B;AACD,iBAPD,MAOO;AACL;AACAna,uBAAKsY,OAAL,GAAexS,QAAQwS,OAAvB;AACA,sBAAI6B,OAAO,2BAAiBna,IAAjB,EAAuBoC,MAAvB,EAA+B0D,QAAQnF,MAAvC,CAAX;AACAyB,yBAAOC,IAAP,CAAY,gBAAZ,EAA8ByD,OAA9B,EAAuCqU,IAAvC;AACArU,0BAAQnF,MAAR,CAAeH,QAAf,CAAwBiN,MAAxB,CAA+B3H,OAA/B,EAAwCqU,IAAxC;AACA,uBAAK3Z,QAAL,CAAciN,MAAd,CAAqB3H,OAArB,EAA8BqU,IAA9B;AACD;AACF,eAhBD,MAgBO;AACL/X,uBAAOC,IAAP,CAAY,MAAZ,EAAoB,yCAApB;AACD;AACF;AAEF,WA5BD,MA4BO;AACLD,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,kCAApB;AACD;AACD;AACD;AACD,WAAK,sBAAWkY,kBAAhB;AAAoC;AAClC,cAAI5Z,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKkH,QAA5B,CAAb;AACA,cAAIvG,MAAJ,EAAY;AACVyB,mBAAOC,IAAP,CAAY,mBAAZ,EAAiC1B,OAAO2P,KAAP,CAAa9E,GAAb,CAAiB,mBAASxL,KAAKqQ,IAAd,EAAoB1P,MAApB,EAA4ByB,MAA5B,CAAjB,CAAjC,EAAwFzB,MAAxF;AACD,WAFD,MAEO;AACLyB,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,0CAApB;AACD;AACD;AACD;AACD,WAAK,sBAAWmY,kBAAhB;AAAoC;AAClC,cAAI7Z,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKkH,QAA5B,CAAb;AACA,cAAIvG,MAAJ,EAAY;AACV,gBAAI0P,OAAO1P,OAAO2P,KAAP,CAAa7P,GAAb,CAAiB,IAAjB,EAAuBT,KAAKya,OAA5B,CAAX;AACA,gBAAIpK,IAAJ,EAAU;AACR1P,qBAAO2P,KAAP,CAAapD,MAAb,CAAoBmD,IAApB;AACAjO,qBAAOC,IAAP,CAAY,mBAAZ,EAAiCgO,IAAjC;AACD,aAHD,MAGO;AACLjO,qBAAOC,IAAP,CAAY,MAAZ,EAAoB,2CAApB;AACD;AACF,WARD,MAQO;AACLD,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,6CAApB;AACD;AACD;AACD;AACD,WAAK,sBAAWqY,kBAAhB;AAAoC;AAClC,cAAI/Z,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKkH,QAA5B,CAAb;AACA,cAAIvG,MAAJ,EAAY;AACV,gBAAI0P,OAAO1P,OAAO2P,KAAP,CAAa7P,GAAb,CAAiB,IAAjB,EAAuBT,KAAKqQ,IAAL,CAAUzP,EAAjC,CAAX;AACA,gBAAIyP,IAAJ,EAAU;AACR,kBAAIsK,UAAU,mBAAS3a,KAAKqQ,IAAd,EAAoB1P,MAApB,EAA4ByB,MAA5B,CAAd;AACAA,qBAAOC,IAAP,CAAY,mBAAZ,EAAiC,mBAASgO,IAAT,EAAe1P,MAAf,EAAuByB,MAAvB,CAAjC,EAAiEuY,OAAjE;AACAha,qBAAO2P,KAAP,CAAa7C,MAAb,CAAoB4C,IAApB,EAA0BsK,OAA1B;AACD,aAJD,MAIO;AACLvY,qBAAOC,IAAP,CAAY,MAAZ,EAAoB,2CAApB;AACD;AACF,WATD,MASO;AACLD,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,6CAApB;AACD;AACD;AACD;AACD,WAAK,sBAAWuY,iBAAhB;AAAmC;AACjC,cAAIja,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKkH,QAA5B,CAAb;AACA,cAAIvG,MAAJ,EAAY;;AAEVA,mBAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,IAAiC;AAC/B0P,qBAAOtQ,KAAKsQ,KADmB;AAE/Bb,oBAAM,KAFyB;AAG/BoL,wBAAU,KAHqB;AAI/BjL,oBAAM,KAJyB;AAK/BkL,wBAAU,KALqB;AAM/BC,wBAAU5Z,KAAKqW,KAAL,CAAWxX,KAAKgb,SAAhB,CANqB;AAO/BjL,oBAAM/P,KAAK+P,IAAL,IAAa;AAPY,aAAjC;;AAUApP,mBAAO4X,WAAP;;AAEAnW,mBAAOC,IAAP,CACE,iBADF,EAEE1B,MAFF,EAGEA,OAAO2X,OAAP,CAAe9M,GAAf,CAAmB,KAAKrI,KAAL,CAAWqI,GAAX,CAAe,mBAASxL,KAAKa,IAAd,EAAoBuB,MAApB,CAAf,CAAnB,CAHF;AAMD,WApBD,MAoBO;AACLA,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,uDAApB;AACD;AACD;AACD;AACD,WAAK,sBAAW4Y,oBAAhB;AAAsC;AACpC,cAAIta,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKkH,QAA5B,CAAb;AACA,cAAIvG,MAAJ,EAAY;AACV,gBAAIE,OAAO,KAAKsC,KAAL,CAAW1C,GAAX,CAAe,IAAf,EAAqBT,KAAKa,IAAL,CAAUD,EAA/B,CAAX;AACA,gBAAIC,IAAJ,EAAU;AACRuB,qBAAOC,IAAP,CAAY,qBAAZ,EAAmC1B,MAAnC,EAA2CE,IAA3C;AACAF,qBAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,IAAiC,IAAjC;AACAD,qBAAO2X,OAAP,CAAepL,MAAf,CAAsBrM,IAAtB;AACAF,qBAAO4X,WAAP;AACD,aALD,MAKO;AACLnW,qBAAOC,IAAP,CAAY,MAAZ,EAAoB,uDAApB;AACD;AACF,WAVD,MAUO;AACLD,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,yDAApB;AACD;AACD;AACD;AACD,WAAK,sBAAW6Y,oBAAhB;AAAsC;AACpC,cAAIva,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKkH,QAA5B,CAAb;AACA,cAAIvG,MAAJ,EAAY;AACV,gBAAIE,OAAO,KAAKsC,KAAL,CAAWqI,GAAX,CAAe,mBAASxL,KAAKa,IAAd,EAAoBuB,MAApB,CAAf,CAAX;AACA,gBAAIvB,IAAJ,EAAU;AACR,kBAAIsa,YAAY,IAAhB;AACA,kBAAIxa,OAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,CAAJ,EAAoC;AAClCua,4BAAY;AACV7K,yBAAO3P,OAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+B0P,KAD5B;AAEVb,wBAAM9O,OAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+B6O,IAF3B;AAGVoL,4BAAUla,OAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+Bia,QAH/B;AAIVjL,wBAAMjP,OAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+BgP,IAJ3B;AAKVkL,4BAAUna,OAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+Bka,QAL/B;AAMV/K,wBAAMpP,OAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+BmP;AAN3B,iBAAZ;AAQD,eATD,MASO;AACLpP,uBAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,IAAiC,EAAjC;AACD;AACDD,qBAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+B0P,KAA/B,GAAuCtQ,KAAKsQ,KAAL,GAAatQ,KAAKsQ,KAAlB,GAA0B3P,OAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+B0P,KAAhG;AACA3P,qBAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+B6O,IAA/B,GAAsCzP,KAAKyP,IAAL,IAAa9O,OAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+B6O,IAAlF;AACA9O,qBAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+Bia,QAA/B,GAA0C7a,KAAKob,SAAL,KAAmBxZ,SAAnB,GAA+BjB,OAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+Bia,QAA9D,GAAyE7a,KAAKob,SAAxH;AACAza,qBAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+BgP,IAA/B,GAAsC5P,KAAK4P,IAAL,IAAajP,OAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+BgP,IAAlF;AACAjP,qBAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+Bka,QAA/B,GAA0C9a,KAAKqb,SAAL,KAAmBzZ,SAAnB,GAA+BjB,OAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+Bka,QAA9D,GAAyE9a,KAAKqb,SAAxH;AACA1a,qBAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+BmP,IAA/B,GAAsC/P,KAAK+P,IAAL,KAAcnO,SAAd,GAA0BjB,OAAO2Q,SAAP,CAAiBtR,KAAKa,IAAL,CAAUD,EAA3B,EAA+BmP,IAAzD,GAAgE/P,KAAK+P,IAAL,IAAa,IAAnH;AACA3N,qBAAOC,IAAP,CAAY,qBAAZ,EAAmC1B,MAAnC,EAA2CE,IAA3C,EAAiDsa,SAAjD;AACD,aArBD,MAqBO;AACL/Y,qBAAOC,IAAP,CAAY,MAAZ,EAAoB,uDAApB;AACD;AACF,WA1BD,MA0BO;AACLD,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,yDAApB;AACD;AACD;AACD;AACD,WAAK,sBAAWiZ,eAAhB;AAAiC;;AAE/B,cAAIza,OAAO,KAAKsC,KAAL,CAAWqI,GAAX,CAAe,mBAASxL,KAAKa,IAAd,EAAoBuB,MAApB,CAAf,CAAX;AACA,cAAIzB,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKkH,QAA5B,CAAb;;AAEA,cAAIrG,QAAQF,MAAZ,EAAoB;;AAElBA,mBAAO2X,OAAP,CAAe9M,GAAf,CAAmB3K,IAAnB;;AAEAb,iBAAKa,IAAL,CAAUE,QAAV,GAAqBf,KAAKa,IAAL,CAAUE,QAAV,IAAsBF,KAAKE,QAAhD;AACAf,iBAAKa,IAAL,CAAUD,EAAV,GAAeZ,KAAKa,IAAL,CAAUD,EAAV,IAAgBC,KAAKD,EAApC;AACAZ,iBAAKa,IAAL,CAAUmT,MAAV,GAAmBhU,KAAKa,IAAL,CAAUmT,MAAV,KAAqBpS,SAArB,GAAiC5B,KAAKa,IAAL,CAAUmT,MAA3C,GAAoDnT,KAAKmT,MAA5E;AACAhU,iBAAKa,IAAL,CAAUuU,aAAV,GAA0BpV,KAAKa,IAAL,CAAUuU,aAAV,IAA2BvU,KAAKuU,aAA1D;AACApV,iBAAKa,IAAL,CAAUsB,MAAV,GAAmBnC,KAAKmC,MAAL,IAAetB,KAAKsB,MAAvC;AACAnC,iBAAKa,IAAL,CAAU4S,IAAV,GAAiBzT,KAAKyT,IAAL,KAAc7R,SAAd,GAA0B5B,KAAKyT,IAA/B,GAAsC5S,KAAK4S,IAA5D;AACAzT,iBAAKa,IAAL,CAAUC,GAAV,GAAgBd,KAAKa,IAAL,CAAUC,GAAV,KAAkBc,SAAlB,GAA8B5B,KAAKa,IAAL,CAAUC,GAAxC,GAA8CD,KAAKC,GAAnE;;AAEA,gBAAIya,eAAe,mBAASvb,KAAKa,IAAd,EAAoBuB,MAApB,CAAnB;;AAEA,gBAAI,CAACmZ,aAAatB,YAAb,CAA0BpZ,IAA1B,CAAL,EAAsC;AACpCuB,qBAAOC,IAAP,CAAY,UAAZ,EAAwBxB,IAAxB,EAA8B0a,YAA9B;AACA,mBAAKpY,KAAL,CAAWsK,MAAX,CAAkB5M,IAAlB,EAAwB0a,YAAxB;AACD;AAEF,WAnBD,MAmBO;AACLnZ,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,8CAApB;AACD;;AAED;AACD;AACD,WAAK,sBAAWmZ,WAAhB;AAA6B;;AAE3B,cAAI3a,OAAO,KAAKsC,KAAL,CAAW1C,GAAX,CAAe,IAAf,EAAqBT,KAAKY,EAA1B,CAAX;;AAEA,cAAIC,IAAJ,EAAU;;AAERb,iBAAKe,QAAL,GAAgBf,KAAKe,QAAL,IAAiBF,KAAKE,QAAtC;AACAf,iBAAKY,EAAL,GAAUZ,KAAKY,EAAL,IAAWC,KAAKD,EAA1B;AACAZ,iBAAKgU,MAAL,GAAchU,KAAKgU,MAAL,IAAenT,KAAKmT,MAAlC;AACAhU,iBAAKoV,aAAL,GAAqBpV,KAAKoV,aAAL,IAAsBvU,KAAKuU,aAAhD;AACA,iBAAKlQ,KAAL,GAAalF,KAAKkF,KAAL,IAAc,KAAKA,KAAhC;;AAEA,gBAAIqW,eAAe,mBAASvb,IAAT,EAAeoC,MAAf,CAAnB;;AAEAA,mBAAOC,IAAP,CAAY,UAAZ,EAAwBxB,IAAxB,EAA8B0a,YAA9B;AACA,iBAAKpY,KAAL,CAAWsK,MAAX,CAAkB5M,IAAlB,EAAwB0a,YAAxB;AAED,WAbD,MAaO;AACLnZ,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,8DAApB;AACD;;AAED;AACD;AACD,WAAK,sBAAWoZ,MAAhB;AAAwB;;AAEtB,cAAI5a,OAAO,KAAKsC,KAAL,CAAW1C,GAAX,CAAe,IAAf,EAAqBT,KAAK0b,OAA1B,CAAX;AACA,cAAI5V,UAAU,KAAKtF,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBT,KAAKsP,UAA7B,KAA4C,KAAK5O,gBAAL,CAAsBD,GAAtB,CAA0B,IAA1B,EAAgCT,KAAKsP,UAArC,CAA1D;;AAEA,cAAIzO,QAAQiF,OAAZ,EAAqB;AACnB,gBAAIjF,KAAKkD,MAAL,CAAY4X,KAAhB,EAAuB;AACrB9a,mBAAKkD,MAAL,CAAY4X,KAAZ,GAAoBxa,KAAKC,GAAL,EAApB;AACAP,mBAAKkD,MAAL,CAAY+B,OAAZ,GAAsBA,OAAtB;AACD,aAHD,MAGO;AACLjF,mBAAKkD,MAAL,CAAY4X,KAAZ,GAAoBxa,KAAKC,GAAL,EAApB;AACAP,mBAAKkD,MAAL,CAAY+B,OAAZ,GAAsBA,OAAtB;AACA1D,qBAAOC,IAAP,CAAY,mBAAZ,EAAiCxB,IAAjC,EAAuCiF,OAAvC;AACD;AACDxG,uBAAW,MAAM;AACf,kBAAI6B,KAAKC,GAAL,KAAaP,KAAKkD,MAAL,CAAY4X,KAAzB,GAAiC,IAArC,EAA2C;AACzC;AACA9a,qBAAKkD,MAAL,CAAY4X,KAAZ,GAAoB,IAApB;AACA9a,qBAAKkD,MAAL,CAAY+B,OAAZ,GAAsB,IAAtB;AACA1D,uBAAOC,IAAP,CAAY,mBAAZ,EAAiCxB,IAAjC,EAAuCiF,OAAvC;AACD;AACF,aAPD,EAOG,IAPH;AASD,WAlBD,MAkBO;AACL1D,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,uDAApB;AACD;AACD;AACD;AACD,WAAK,sBAAWuZ,cAAhB;AAAgC;AAC9B,cAAI/a,OAAO,KAAKsC,KAAL,CAAW1C,GAAX,CAAe,IAAf,EAAqBT,KAAKa,IAAL,CAAUD,EAA/B,CAAX;AACA,cAAID,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKkH,QAA5B,CAAb;;AAEA,cAAIrG,QAAQF,MAAZ,EAAoB;AAClByB,mBAAOC,IAAP,CAAY,YAAZ,EAA0BxB,IAA1B,EAAgCF,MAAhC;AACD,WAFD,MAEO;AACLyB,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,2CAApB;AACD;AACD;AACD;AACD,WAAK,sBAAWwZ,iBAAhB;AAAmC;AACjC,cAAIhb,OAAO,KAAKsC,KAAL,CAAW1C,GAAX,CAAe,IAAf,EAAqBT,KAAKa,IAAL,CAAUD,EAA/B,CAAX;AACA,cAAID,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKkH,QAA5B,CAAb;;AAEA,cAAIrG,QAAQF,MAAZ,EAAoB;AAClByB,mBAAOC,IAAP,CAAY,cAAZ,EAA4BxB,IAA5B,EAAkCF,MAAlC;AACD,WAFD,MAEO;AACLyB,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,6CAApB;AACD;AACD;AACD;AACD,WAAK,sBAAWyZ,gBAAhB;AAAkC;AAChC,cAAI,KAAKjb,IAAL,CAAUC,GAAd,EAAmB;AACjB;AACD;AACD,cAAID,OAAO,KAAKsC,KAAL,CAAW1C,GAAX,CAAe,IAAf,EAAqBT,KAAKY,EAA1B,CAAX;AACA,cAAImb,UAAUlb,KAAKoP,IAAnB;AACA,cAAIA,OAAOjQ,KAAKiQ,IAAL,IAAa,IAAxB;;AAEA;AACA,cAAIpP,IAAJ,EAAU;AACR,gBAAImb,cAAcnb,IAAlB;AACAmb,wBAAY/L,IAAZ,GAAmBA,IAAnB;;AAEA7N,mBAAOC,IAAP,CAAY,aAAZ,EAA2BxB,IAA3B,EAAiCkb,OAAjC;;AAEA,iBAAK5Y,KAAL,CAAWsK,MAAX,CAAkB5M,IAAlB,EAAwBmb,WAAxB;AAED,WARD,MAQO;AACL5Z,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,oCAApB;AACD;AACD;AACD;AACD,WAAK,sBAAW4Z,kBAAhB;AAAoC;AAClC,cAAIpb,OAAO,KAAKsC,KAAL,CAAW1C,GAAX,CAAe,IAAf,EAAqBT,KAAK0b,OAA1B,CAAX;AACA,cAAI/a,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKkH,QAA5B,CAAb;;AAEA,cAAIrG,QAAQF,MAAZ,EAAoB;;AAElB,gBAAIX,KAAKsP,UAAT,EAAqB;AACnB;AACA,kBAAIxJ,UAAU,KAAKtF,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBT,KAAKsP,UAA7B,CAAd;AACA,kBAAIxJ,WAAWA,QAAQE,IAAR,KAAiB,CAAhC,EAAmC;AACjCrF,uBAAOub,qBAAP,CAA6BpW,OAA7B,EAAsCjF,IAAtC,EAA4Cb,IAA5C;AACD,eAFD,MAEO;AACLoC,uBAAOC,IAAP,CAAY,MAAZ,EAAoB,kCAApB;AACD;AACF,aARD,MAQO;AACL;AACAD,qBAAOC,IAAP,CAAY,YAAZ,EAA0B1B,OAAOwb,eAAP,CAAuBtb,IAAvB,CAA1B,EAAwDA,IAAxD;AACD;AAEF,WAfD,MAeO;AACLuB,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,oDAApB;AACD;;AAED,cAAIxB,QAAQA,KAAKD,EAAL,KAAY,KAAKC,IAAL,CAAUD,EAAlC,EAAsC;AAAE;AACtC,gBAAI8E,aAAa,KAAKxB,gBAAL,CAAsBzD,GAAtB,CAA0B,QAA1B,EAAoCE,MAApC,CAAjB;AACA;AACA,gBAAI+E,cAAcA,WAAW6J,YAAzB,IAAyC7J,WAAW6J,YAAX,CAAwB3O,EAAxB,KAA+BZ,KAAKsP,UAAjF,EAA6F;AAC3F;AACA5J,yBAAW6J,YAAX,GAA0B,KAAK/O,QAAL,CAAcC,GAAd,CAAkB,IAAlB,EAAwBT,KAAKsP,UAA7B,CAA1B;AACAlN,qBAAOC,IAAP,CAAY,YAAZ,EAA0BqD,WAAW6J,YAArC,EAH2F,CAGvC;AACrD;AACF;;AAED;AACD;AACD,WAAK,sBAAW6M,oBAAhB;AAAsC;;AAEpC,cAAIzb,SAAS,KAAK6C,OAAL,CAAa/C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKkH,QAA5B,CAAb;;AAEA,cAAIvG,MAAJ,EAAY;;AAEV,gBAAI0b,WAAWlb,KAAKC,GAAL,EAAf;;AAEA,iBAAK,IAAIP,IAAT,IAAiBb,KAAKsY,OAAtB,EAA+B;AAC7B3X,qBAAO2Q,SAAP,CAAiBzQ,KAAKA,IAAL,CAAUD,EAA3B,IAAiC;AAC/B0P,uBAAOzP,KAAKyP,KADmB;AAE/Bb,sBAAM5O,KAAK4O,IAFoB;AAG/BoL,0BAAU,KAHqB;AAI/BjL,sBAAM/O,KAAK+O,IAJoB;AAK/BkL,0BAAU,KALqB;AAM/BC,0BAAU5Z,KAAKqW,KAAL,CAAW3W,KAAKma,SAAhB,CANqB;AAO/BjL,sBAAMlP,KAAKkP,IAAL,IAAa;AAPY,eAAjC;AASApP,qBAAO2X,OAAP,CAAe9M,GAAf,CAAmB,KAAKrI,KAAL,CAAWqI,GAAX,CAAe,mBAAS3K,KAAKA,IAAd,EAAoBuB,MAApB,CAAf,CAAnB;AACD;;AAED,gBAAI,KAAKwF,eAAL,CAAqBjG,cAArB,CAAoChB,OAAOC,EAA3C,CAAJ,EAAoD;AAClD,kBAAI,KAAKgH,eAAL,CAAqBjH,OAAOC,EAA5B,KAAmC,CAAvC,EAA0C;AACxC,uBAAO,KAAKgH,eAAL,CAAqBjH,OAAOC,EAA5B,CAAP;AACA,qBAAK0H,0BAAL;AACD,eAHD,MAGO;AACL,qBAAKV,eAAL,CAAqBjH,OAAOC,EAA5B;AACD;AACF;;AAEDwB,mBAAOC,IAAP,CAAY,OAAZ,EAAsBlB,KAAKC,GAAL,KAAaib,QAAd,GAA0B,SAA1B,GAAsCrc,KAAKsY,OAAL,CAAa/Q,MAAnD,GAA4D,iCAA5D,GAAgG5G,OAAOC,EAA5H;AAED,WA5BD,MA4BO;AACLwB,mBAAOC,IAAP,CAAY,MAAZ,EAAoB,+CAApB;AACD;;AAED;AACD;AACD,WAAK,sBAAWia,UAAhB;AAA4B;AAC1B,cAAI,KAAKzb,IAAL,CAAUC,GAAd,EAAmB;AACjB;AACD;AACD,cAAId,KAAKgG,IAAL,KAAc,CAAlB,EAAqB;AAAE;AACrB,gBAAIuW,SAAS,KAAKhZ,wBAAL,CAA8B9C,GAA9B,CAAkC,IAAlC,EAAwCT,KAAKY,EAA7C,CAAb;AACA,gBAAI2b,MAAJ,EAAY;AACV;AACA,mBAAKhZ,wBAAL,CAA8B2J,MAA9B,CAAqC,KAAK9J,OAAL,CAAaoI,GAAb,CAAiB,mBAASxL,KAAKa,IAAd,EAAoBuB,MAApB,CAAjB,CAArC;AACA;AACD;;AAED,gBAAIoa,UAAU,KAAKlZ,wBAAL,CAA8B7C,GAA9B,CAAkC,IAAlC,EAAwCT,KAAKY,EAA7C,CAAd;AACA,gBAAI4b,OAAJ,EAAa;AACX;AACA,mBAAKlZ,wBAAL,CAA8B4J,MAA9B,CAAqC,KAAK9J,OAAL,CAAaoI,GAAb,CAAiB,mBAASxL,KAAKa,IAAd,EAAoBuB,MAApB,CAAjB,CAArC;AACAA,qBAAOC,IAAP,CAAY,uBAAZ,EAAqCma,OAArC;AACA;AACD;AACF,WAfD,MAeO,IAAIxc,KAAKgG,IAAL,KAAc,CAAlB,EAAqB;AAC1B;AACA,iBAAK3C,aAAL,CAAmBmI,GAAnB,CAAuB,mBAASxL,KAAKa,IAAd,EAAoBuB,MAApB,CAAvB;AACD,WAHM,MAGA,IAAIpC,KAAKgG,IAAL,KAAc,CAAlB,EAAqB;AAC1B;AACA5D,mBAAOC,IAAP,CAAY,uBAAZ,EAAqC,KAAKkB,wBAAL,CAA8BiI,GAA9B,CAAkC,mBAASxL,KAAKa,IAAd,EAAoBuB,MAApB,CAAlC,CAArC;AACD,WAHM,MAGA,IAAIpC,KAAKgG,IAAL,KAAc,CAAlB,EAAqB;AAC1B;AACA,iBAAK1C,wBAAL,CAA8BkI,GAA9B,CAAkC,mBAASxL,KAAKa,IAAd,EAAoBuB,MAApB,CAAlC;AACD;AACD;AACD;AACD,WAAK,sBAAWqa,aAAhB;AAA+B;AAC7B,cAAI,KAAK5b,IAAL,CAAUC,GAAd,EAAmB;AACjB;AACD;AACD,cAAID,OAAO,KAAKuC,OAAL,CAAa3C,GAAb,CAAiB,IAAjB,EAAuBT,KAAKY,EAA5B,CAAX;AACA,cAAIC,IAAJ,EAAU;AACR,iBAAKuC,OAAL,CAAa8J,MAAb,CAAoBrM,IAApB;AACAuB,mBAAOC,IAAP,CAAY,eAAZ,EAA6BxB,IAA7B;AACA;AACD;;AAEDA,iBAAO,KAAKwC,aAAL,CAAmB5C,GAAnB,CAAuB,IAAvB,EAA6BT,KAAKY,EAAlC,CAAP;AACA,cAAIC,IAAJ,EAAU;AAAE;AACV,iBAAKwC,aAAL,CAAmB6J,MAAnB,CAA0BrM,IAA1B;AACA;AACD;;AAEDA,iBAAO,KAAK0C,wBAAL,CAA8B9C,GAA9B,CAAkC,IAAlC,EAAwCT,KAAKY,EAA7C,CAAP;AACA,cAAIC,IAAJ,EAAU;AAAE;AACV,gBAAI6b,eAAe,KAAKpZ,wBAAL,CAA8B7C,GAA9B,CAAkC,IAAlC,EAAwCI,KAAKD,EAA7C,CAAnB;AACA,gBAAI8b,YAAJ,EAAkB;AAChB;AACAta,qBAAOC,IAAP,CAAY,uBAAZ,EAAqC,KAAKiB,wBAAL,CAA8B4J,MAA9B,CAAqCwP,YAArC,CAArC;AACA;AACD;;AAED;AACA,iBAAKnZ,wBAAL,CAA8B2J,MAA9B,CAAqCrM,IAArC;AACA;AACD;;AAEDA,iBAAO,KAAKyC,wBAAL,CAA8B7C,GAA9B,CAAkC,IAAlC,EAAwCT,KAAKY,EAA7C,CAAP;AACA,cAAIC,IAAJ,EAAU;AAAE;AACV,gBAAI8b,iBAAiB,KAAKpZ,wBAAL,CAA8B9C,GAA9B,CAAkC,IAAlC,EAAwCI,KAAKD,EAA7C,CAArB;AACA,gBAAI+b,cAAJ,EAAoB;AAClB;AACA,mBAAKpZ,wBAAL,CAA8B2J,MAA9B,CAAqCrM,IAArC;AACA;AACD;;AAED;AACA,iBAAKyC,wBAAL,CAA8B4J,MAA9B,CAAqCrM,IAArC;AACA;AACD;AACD;AACD;AACD,WAAK,sBAAW+b,WAAhB;AAA6B;AAC3B,cAAI5T,QAAQ,KAAKxF,OAAL,CAAa/C,GAAb,CAAiBT,KAAKY,EAAtB,CAAZ;AACAZ,eAAKsY,OAAL,CAAa1T,OAAb,CAAsBiY,QAAD,IAAc;AACjC7T,kBAAMsI,SAAN,CAAgBuL,SAAShc,IAAT,CAAcD,EAA9B,IAAoC;AAClC0P,qBAAOuM,SAASvM,KADkB;AAElCb,oBAAMoN,SAASpN,IAFmB;AAGlCoL,wBAAUgC,SAASzB,SAHe;AAIlCxL,oBAAMiN,SAASjN,IAJmB;AAKlCkL,wBAAU+B,SAASxB,SALe;AAMlCN,wBAAU5Z,KAAKqW,KAAL,CAAWqF,SAAS7B,SAApB,CANwB;AAOlCjL,oBAAM8M,SAAS9M,IAAT,IAAiB;AAPW,aAApC;AASA/G,kBAAMsP,OAAN,CAAc9M,GAAd,CAAkBpJ,OAAO0a,QAAP,CAAgB3Z,KAAhB,CAAsBqI,GAAtB,CAA0B,mBAASqR,SAAShc,IAAlB,EAAwBuB,MAAxB,CAA1B,CAAlB;AACD,WAXD;AAYA,eAAK,IAAI2a,QAAT,IAAqB/c,KAAKgd,SAA1B,EAAqC;AACnC,gBAAInc,OAAOuB,OAAO0a,QAAP,CAAgB3Z,KAAhB,CAAsB1C,GAAtB,CAA0B,IAA1B,EAAgCsc,SAASlc,IAAT,CAAcD,EAA9C,CAAX;AACA,gBAAIC,IAAJ,EAAU;AACRA,mBAAKsB,MAAL,GAAc4a,SAAS5a,MAAvB;AACAtB,mBAAK4S,IAAL,GAAYsJ,SAAStJ,IAArB;AACD;AACF;AACD,cAAIzK,MAAMiU,kBAAN,IAA4BjU,MAAMiU,kBAAN,CAAyB1V,MAAzB,GAAkC,CAAlE,EAAqE;AACnE,iBAAK,IAAI2V,UAAT,IAAuBlU,MAAMiU,kBAA7B,EAAiD;AAC/C,kBAAIpc,OAAOmI,MAAMsP,OAAN,CAAc7X,GAAd,CAAkB,IAAlB,EAAwByc,WAAWxB,OAAnC,CAAX;AACA,kBAAI7a,IAAJ,EAAU;AACRmI,sBAAMsI,SAAN,CAAgBzQ,KAAKD,EAArB,IAA2BoI,MAAMsI,SAAN,CAAgBzQ,KAAKD,EAArB,KAA4B,EAAvD;AACAoI,sBAAMsI,SAAN,CAAgBzQ,KAAKD,EAArB,EAAyB6O,IAAzB,GAAgCyN,WAAWzN,IAAX,IAAmBzG,MAAMsI,SAAN,CAAgBzQ,KAAKD,EAArB,EAAyB6O,IAA5E;AACAzG,sBAAMsI,SAAN,CAAgBzQ,KAAKD,EAArB,EAAyBia,QAAzB,GAAoCqC,WAAW9B,SAAX,KAAyBxZ,SAAzB,GAAqCoH,MAAMsI,SAAN,CAAgBzQ,KAAKD,EAArB,EAAyBia,QAA9D,GAAyEqC,WAAW9B,SAAxH;AACApS,sBAAMsI,SAAN,CAAgBzQ,KAAKD,EAArB,EAAyBgP,IAAzB,GAAgCsN,WAAWtN,IAAX,IAAmB5G,MAAMsI,SAAN,CAAgBzQ,KAAKD,EAArB,EAAyBgP,IAA5E;AACA5G,sBAAMsI,SAAN,CAAgBzQ,KAAKD,EAArB,EAAyBka,QAAzB,GAAoCoC,WAAW7B,SAAX,KAAyBzZ,SAAzB,GAAqCoH,MAAMsI,SAAN,CAAgBzQ,KAAKD,EAArB,EAAyBka,QAA9D,GAAyEoC,WAAW7B,SAAxH;AACA,oBAAIvV,UAAUkD,MAAMxI,QAAN,CAAeC,GAAf,CAAmB,IAAnB,EAAyByc,WAAW5N,UAApC,CAAd;AACA,oBAAIxJ,OAAJ,EAAa;AACXkD,wBAAMmU,cAAN,CAAqBtc,IAArB,EAA2BiF,OAA3B;AACD,iBAFD,MAEO;AACLkD,wBAAM5G,MAAN,CAAaC,IAAb,CAAkB,MAAlB,EAA0B,8DAA1B;AACD;AACF,eAZD,MAYO;AACL2G,sBAAM5G,MAAN,CAAaC,IAAb,CAAkB,MAAlB,EAA0B,2DAA1B;AACD;AACF;AACF;AACD2G,gBAAMiU,kBAAN,GAA2B,IAA3B;AACA,eAAKtZ,cAAL;AACA,eAAK2E,0BAAL;AACA;AACD;AACD;AAAS;AACPlG,iBAAOC,IAAP,CAAY,SAAZ,EAAuBqR,MAAvB;AACA;AACD;AApwBH;AAswBD;;AAEDoE,WAAS;AACP,QAAI9X,OAAO;AACT0G,UAAI,CADK;AAETC,SAAG;AACDpF,eAAO,KAAKA,KADX;AAED2W,oBAAY,KAAKtV,SAFhB;AAGDwa,aAAK,KAAKnG;AAHT;AAFM,KAAX;;AASA,SAAKxQ,MAAL,CAAYzG,IAAZ;AACD;;AAED6X,aAAW;AACT,QAAI7X,OAAO;AACT0G,UAAI,CADK;AAETC,SAAG;AACDpF,eAAO,KAAKA,KADX;AAED8b,WAAG9e,eAFF;AAGD2E,kBAAU,KAAKd,MAAL,CAAYE,OAAZ,CAAoBY,QAH7B;AAIDoa,yBAAiB,KAAKlb,MAAL,CAAYE,OAAZ,CAAoBib,cAJpC;AAKDC,oBAAY;AACV,iBAAOC,QAAQC,QADL;AAEV,sBAAY,YAFF;AAGV,qBAAW,YAHD;AAIV,uBAAa,EAJH;AAKV,+BAAqB;AALX;AALX;AAFM,KAAX;;AAiBA,QAAI,KAAKtb,MAAL,CAAYE,OAAZ,CAAoBC,KAAxB,EAA+B;AAC7BvC,WAAK2G,CAAL,CAAOpE,KAAP,GAAe,KAAKH,MAAL,CAAYE,OAAZ,CAAoBC,KAAnC;AACD;;AAED,SAAKkE,MAAL,CAAYzG,IAAZ;AACD;;AAED4X,cAAY;AACV,QAAI,CAAC,KAAKD,cAAV,EAA0B,KAAKjT,YAAL,CAAkB,IAAlB;AAC1B,SAAKiT,cAAL,GAAsB,KAAtB;AACA,SAAKlR,MAAL,CAAY,EAACC,IAAI,CAAL,EAAQC,GAAGxF,KAAKC,GAAL,EAAX,EAAZ;AACD;AAplFiC;kBAAf7B,c","file":"InternalClient.js","sourcesContent":["\"use strict\";\n\nimport request from \"superagent\";\nimport WebSocket from \"ws\";\nimport ConnectionState from \"./ConnectionState\";\nimport qs from \"querystring\";\n\nimport {Endpoints, PacketType, Permissions} from \"../Constants\";\n\nimport Bucket from \"../Util/Bucket\";\nimport Cache from \"../Util/Cache\";\nimport Resolver from \"./Resolver/Resolver\";\n\nimport User from \"../Structures/User\";\nimport Channel from \"../Structures/Channel\";\nimport ServerChannel from \"../Structures/ServerChannel\";\nimport TextChannel from \"../Structures/TextChannel\";\nimport VoiceChannel from \"../Structures/VoiceChannel\";\nimport PMChannel from \"../Structures/PMChannel\";\nimport Server from \"../Structures/Server\";\nimport Message from \"../Structures/Message\";\nimport Role from \"../Structures/Role\";\nimport Invite from \"../Structures/Invite\";\nimport Webhook from \"../Structures/Webhook\";\nimport VoiceConnection from \"../Voice/VoiceConnection\";\nimport TokenCacher from \"../Util/TokenCacher\";\n\nlet zlib = require('zlib');\n\nlet GATEWAY_VERSION = 6;\nlet libVersion = require('../../package.json').version;\n\nfunction waitFor(condition, value = condition, interval = 20) {\n  return new Promise(resolve => {\n    let int = setInterval(() => {\n      let isDone = condition();\n      if (isDone) {\n        if (condition === value) {\n          resolve(isDone);\n        } else {\n          resolve(value(isDone));\n        }\n        return clearInterval(int);\n      }\n    }, interval);\n  });\n}\n\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default class InternalClient {\n\tconstructor(discordClient) {\n\t  this.setupCalled = false;\n\t\tthis.setup(discordClient);\n\t}\n\n  apiRequest(method, url, useAuth, data, file) {\n    let resolve, reject;\n    let promise = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    let buckets = [];\n    let match = url.match(/\\/channels\\/([0-9]+)\\/messages(\\/[0-9]+)?$/);\n    if (match) {\n      if (method === \"del\" && (match[1] = this.channels.get(\"id\", match[1]) || this.private_channels.get(\"id\", match[1]))) {\n        buckets = [\"dmsg:\" + (match[1].server || {}).id];\n      } else if (this.user.bot) {\n        if (method === \"post\" || method === \"patch\") {\n          if (this.private_channels.get(\"id\", match[1])) {\n            buckets = [\"bot:msg:dm\", \"bot:msg:global\"];\n          } else if ((match[1] = this.channels.get(\"id\", match[1]))) {\n            buckets = [\"bot:msg:guild:\" + match[1].server.id, \"bot:msg:global\"];\n          }\n        }\n      } else {\n        buckets = [\"msg\"];\n      }\n    } else if (method === \"patch\") {\n      if (url === \"/users/@me\" && this.user && data.username && data.username !== this.user.username) {\n        buckets = [\"username\"];\n      } else if ((match = url.match(/\\/guilds\\/([0-9]+)\\/members\\/[0-9]+$/))) {\n        buckets = [\"guild_member:\" + match[1]];\n      } else if ((match = url.match(/\\/guilds\\/([0-9]+)\\/members\\/@me\\/nick$/))) {\n        buckets = [\"guild_member_nick:\" + match[1]];\n      }\n    }\n\n    let self = this;\n\n    let actualCall = function () {\n      let startTime = Date.now();\n      let ret = request[method](url);\n      if (useAuth) {\n        ret.set(\"authorization\", self.token);\n      }\n      if (file) {\n        ret.attach(\"file\", file.file, file.name);\n        if (data) {\n          for (let i in data) {\n            if (data.hasOwnProperty(i)) {\n              if (data[i] !== undefined) {\n                ret.field(i, data[i]);\n              }\n            }\n          }\n        }\n      } else if (data) {\n        ret.send(data);\n      }\n      ret.set('User-Agent', self.userAgentInfo.full);\n      ret.end((error, data) => {\n        if (error) {\n          if (data && data.status === 429) {\n            self.client.emit(\"debug\", \"Encountered 429 at \" + url + \" | \" + self.client.options.shard + \" | Buckets\" + buckets + \" | \" + (Date.now() - startTime) + \"ms latency\");\n          }\n          reject(error);\n        } else {\n          resolve(data.body);\n        }\n      });\n    };\n    let waitFor = 1;\n    let i = 0;\n    let done = function () {\n      if (++i === waitFor) {\n        actualCall();\n      }\n    };\n    for (let bucket of buckets) {\n      ++waitFor;\n      this.buckets[bucket].queue(done);\n    }\n    done();\n    return promise;\n  }\n\n  setup(discordClient) {\n\t  this.sessionID = false;\n\t  this.hasBeenReady = false;\n    this.setupCalled = true;\n    discordClient = discordClient || this.client;\n    this.client = discordClient;\n    this.state = ConnectionState.IDLE;\n    this.websocket = null;\n    this.userAgent = {\n      url: 'https://github.com/hydrabolt/discord.js',\n      version: libVersion\n    };\n\n    if (this.client.options.compress) {\n      zlib = require(\"zlib\");\n    }\n\n    // creates 4 caches with discriminators based on ID\n    this.users = new Cache();\n    this.friends = new Cache();\n    this.blocked_users = new Cache();\n    this.outgoing_friend_requests = new Cache();\n    this.incoming_friend_requests = new Cache();\n    this.channels = new Cache();\n    this.servers = new Cache();\n    this.unavailableServers = new Cache();\n    this.private_channels = new Cache();\n    this.autoReconnectInterval = 1000;\n    this.unsyncedGuilds = 0;\n    this.guildSyncQueue = [];\n    this.guildSyncQueueLength = 1;\n\n    this.intervals = {\n      typing: [],\n      kai: null,\n      misc: []\n    };\n\n    this.voiceConnections = new Cache();\n    this.resolver = new Resolver(this);\n    this.readyTime = null;\n    this.messageAwaits = {};\n    this.buckets = {\n      \"bot:msg:dm\": new Bucket(5, 5000),\n      \"bot:msg:global\": new Bucket(50, 10000),\n      \"msg\": new Bucket(10, 10000),\n      \"dmsg:undefined\": new Bucket(5, 1000),\n      \"username\": new Bucket(2, 3600000)\n    };\n\n    if (!this.tokenCacher) {\n      this.tokenCacher = new TokenCacher(this.client);\n      this.tokenCacher.init(0);\n    }\n  }\n\n  cleanIntervals() {\n    for (let interval of this.intervals.typing.concat(this.intervals.misc).concat(this.intervals.kai)) {\n      if (interval) {\n        clearInterval(interval);\n      }\n    }\n  }\n\n  disconnected(autoReconnect = false) {\n\n    this.cleanIntervals();\n\n    this.voiceConnections.forEach(vc => {\n      this.leaveVoiceChannel(vc);\n    });\n\n    if (autoReconnect) {\n      this.autoReconnectInterval = Math.min(this.autoReconnectInterval * (Math.random() + 1), 60000);\n      setTimeout(() => {\n        if (!this.email && !this.token) {\n          return;\n        }\n\n        // Check whether the email is set (if not, only a token has been used for login)\n        this.loginWithToken(this.token, this.email, this.password).catch(() => this.disconnected(true));\n      }, this.autoReconnectInterval);\n    }\n\n    this.client.emit(\"disconnected\");\n  }\n\n  get uptime() {\n    return (this.readyTime ? Date.now() - this.readyTime : null);\n  }\n\n  set userAgent(info) {\n    info.full = `DiscordBot (${info.url}, ${info.version})`;\n    this.userAgentInfo = info;\n  }\n\n  get userAgent() {\n    return this.userAgentInfo;\n  }\n\n  //def leaveVoiceChannel\n  leaveVoiceChannel(chann) {\n    if (this.user.bot) {\n      let leave = (connection) => {\n        return new Promise((resolve) => {\n          connection.destroy();\n          resolve();\n        });\n      };\n\n      if (chann instanceof VoiceChannel) {\n        return this.resolver.resolveChannel(chann).then(channel => {\n          if (!channel) {\n            return Promise.reject(new Error(\"voice channel does not exist\"));\n          }\n\n          if (channel.type !== 2) {\n            return Promise.reject(new Error(\"channel is not a voice channel!\"));\n          }\n\n          let connection = this.voiceConnections.get(\"voiceChannel\", channel);\n          if (!connection) {\n            return Promise.reject(new Error(\"not connected to that voice channel\"));\n          }\n          return leave(connection);\n        });\n      } else if (chann instanceof VoiceConnection) {\n        return leave(chann);\n      } else {\n        return Promise.reject(new Error(\"invalid voice channel/connection to leave\"))\n      }\n    } else {\n      // preserve old functionality for non-bots\n      if (this.voiceConnections[0]) {\n        this.voiceConnections[0].destroy();\n      }\n      return Promise.resolve();\n    }\n  }\n\n  //def awaitResponse\n  awaitResponse(msg) {\n    return new Promise((resolve, reject) => {\n\n      msg = this.resolver.resolveMessage(msg);\n\n      if (!msg) {\n        reject(new Error(\"message undefined\"));\n        return;\n      }\n\n      let awaitID = msg.channel.id + msg.author.id;\n\n      if (!this.messageAwaits[awaitID]) {\n        this.messageAwaits[awaitID] = [];\n      }\n\n      this.messageAwaits[awaitID].push(resolve);\n    });\n  }\n\n  //def joinVoiceChannel\n  joinVoiceChannel(chann) {\n    return this.resolver.resolveChannel(chann).then(channel => {\n      if (!channel) {\n        return Promise.reject(new Error(\"voice channel does not exist\"));\n      }\n\n      if (channel.type !== 2) {\n        return Promise.reject(new Error(\"channel is not a voice channel!\"));\n      }\n\n      let joinSendWS = () => {\n        this.sendWS({\n          op: 4,\n          d: {\n            \"guild_id\": channel.server.id,\n            \"channel_id\": channel.id,\n            \"self_mute\": false,\n            \"self_deaf\": false\n          }\n        });\n      };\n\n      let joinVoice = () => {\n        return new Promise((resolve, reject) => {\n          let session = this.sessionID, token, server = channel.server, endpoint;\n\n          let timeout = null;\n\n          let check = data => {\n            if (data.t === \"VOICE_SERVER_UPDATE\") {\n              if (data.d.guild_id !== server.id) return; // ensure it is the right server\n              token = data.d.token;\n              endpoint = data.d.endpoint;\n              if (!token || !endpoint) return;\n              /* let chan = new VoiceConnection(\n               channel, this.client, session, token, server, endpoint\n               )\n               this.voiceConnections.add(chan); */\n\n              // chan.on(\"ready\", () => resolve(chan));\n              // chan.on(\"error\", reject);\n              // chan.on(\"close\", reject);\n\n              resolve({ channel, client: this.client, session, token, server, endpoint });\n\n              if (timeout) {\n                clearTimeout(timeout);\n              }\n              this.client.removeListener(\"raw\", check);\n            }\n          };\n\n          timeout = setTimeout(() => {\n            this.client.removeListener(\"raw\", check);\n            reject(new Error(\"No voice server details within 10 seconds\"));\n          }, 10000);\n\n          this.client.on(\"raw\", check);\n          joinSendWS();\n        });\n      };\n\n      let existingServerConn = this.voiceConnections.get(\"server\", channel.server); // same server connection\n      if (existingServerConn) {\n        joinSendWS(); // Just needs to update by sending via WS, movement in cache will be handled by global handler\n        return Promise.resolve(existingServerConn);\n      }\n\n      if (!this.user.bot && this.voiceConnections.length > 0) { // nonbot, one voiceconn only, just like last time just disconnect\n        return this.leaveVoiceChannel().then(joinVoice);\n      }\n\n      return joinVoice();\n    });\n  }\n\n  // Backwards-compatible utility getter method for the first voice connection\n  // Thanks to #q (@qeled) for suggesting this\n  get voiceConnection() {\n    return this.voiceConnections[0];\n  }\n\n  getGuildMembers(serverID, chunkCount) {\n    this.forceFetchCount[serverID] = chunkCount;\n    if (this.forceFetchLength + 3 + serverID.length > 4000) { // 4096 max, '{\"op\":8,\"d\":{\"guild_id\":[],\"query\":\"\",\"limit\":0}}'.length = 49 plus some leeway\n      this.requestGuildMembers(this.forceFetchQueue);\n      this.forceFetchQueue = [serverID];\n      this.forceFetchLength = 1 + serverID.length + 3;\n    } else {\n      this.forceFetchQueue.push(serverID);\n      this.forceFetchLength += serverID.length + 3;\n    }\n  }\n\n  requestGuildMembers(serverID, query, limit) {\n    this.sendWS({\n      op: 8,\n      d: {\n        guild_id: serverID,\n        query: query || \"\",\n        limit: limit || 0\n      }\n    });\n  }\n\n  syncGuild(guildID) {\n    if (this.guildSyncQueueLength + 3 + guildID.length > 4050) { // 4096 max, '{\"op\":12,\"d\":[]}'.length = 16 plus some leeway\n      this.sendWS({op: 12, d: this.guildSyncQueue});\n      this.guildSyncQueue = [guildID];\n      this.guildSyncQueueLength = 1 + guildID.length + 3;\n    } else {\n      this.guildSyncQueue.push(guildID);\n      this.guildSyncQueueLength += guildID.length + 3;\n    }\n  }\n\n  checkReady() {\n    if (!this.readyTime) {\n      if (this.guildSyncQueue.length > 0) {\n        this.sendWS({op: 12, d: this.guildSyncQueue});\n        this.guildSyncQueue = [];\n        this.guildSyncQueueLength = 1;\n        return;\n      }\n      if (this.unsyncedGuilds > 0) {\n        return;\n      }\n      if (this.forceFetchQueue.length > 0) {\n        this.requestGuildMembers(this.forceFetchQueue);\n        this.forceFetchQueue = [];\n        this.forceFetchLength = 1;\n      } else {\n        for (let key in this.forceFetchCount) {\n          if (this.forceFetchCount.hasOwnProperty(key)) {\n            return;\n          }\n        }\n        this.readyTime = Date.now();\n        this.client.emit(\"ready\");\n      }\n    }\n  }\n\n  restartServerCreateTimeout() {\n    if (this.guildCreateTimeout) {\n      clearTimeout(this.guildCreateTimeout);\n      this.guildCreateTimeout = null;\n    }\n    if (!this.readyTime) {\n      this.guildCreateTimeout = setTimeout(() => {\n        this.checkReady();\n      }, this.client.options.guildCreateTimeout);\n    }\n  }\n\n  // def createServer\n  createServer(name, region = \"london\") {\n    name = this.resolver.resolveString(name);\n\n    return this.apiRequest('post', Endpoints.SERVERS, true, {name, region})\n      .then(res => {\n        // valid server, wait until it is cached\n        return waitFor(() => this.servers.get(\"id\", res.id));\n      });\n  }\n\n  //def joinServer\n  joinServer(invite) {\n    invite = this.resolver.resolveInviteID(invite);\n    if (!invite) {\n      return Promise.reject(new Error(\"Not a valid invite\"));\n    }\n\n    return this.apiRequest(\"post\", Endpoints.INVITE(invite), true)\n      .then(res => {\n        // valid server, wait until it is received via ws and cached\n        return waitFor(() => this.servers.get(\"id\", res.guild.id));\n      });\n  }\n\n  //def updateServer\n  updateServer(server, options) {\n    server = this.resolver.resolveServer(server);\n    if (!server) {\n      return Promise.reject(new Error(\"server did not resolve\"));\n    }\n\n    let newOptions = {\n      name: options.name || server.name,\n      region: options.region || server.region\n    };\n\n    if (options.icon) {\n      newOptions.icon = this.resolver.resolveToBase64(options.icon);\n    }\n    if (options.splash) {\n      newOptions.splash = this.resolver.resolveToBase64(options.splash);\n    }\n    if (options.owner) {\n      let user = this.resolver.resolveUser(options.owner);\n      if (!user) {\n        return Promise.reject(new Error(\"owner could not be resolved\"));\n      }\n      options.owner_id = user.id;\n    }\n    if (options.verificationLevel) {\n      options.verification_level = user.verificationLevel;\n    }\n    if (options.afkChannel) {\n      let channel = this.resolver.resolveUser(options.afkChannel);\n      if (!channel) {\n        return Promise.reject(new Error(\"afkChannel could not be resolved\"));\n      }\n      options.afk_channel_id = channel.id;\n    }\n    if (options.afkTimeout) {\n      options.afk_timeout = options.afkTimeout;\n    }\n\n    return this.apiRequest(\"patch\", Endpoints.SERVER(server.id), true, options)\n      .then(res => {\n        // wait until the name and region are updated\n        return waitFor(() =>\n          (this.servers.get(\"name\", res.name) ? ((this.servers.get(\"name\", res.name).region === res.region) ? this.servers.get(\"id\", res.id) : false) : false));\n      });\n  }\n\n  //def leaveServer\n  leaveServer(srv) {\n    let server = this.resolver.resolveServer(srv);\n    if (!server) {\n      return Promise.reject(new Error(\"server did not resolve\"));\n    }\n\n    return this.apiRequest(\"del\", Endpoints.ME_SERVER(server.id), true);\n  }\n\n  //def deleteServer\n  deleteServer(srv) {\n    let server = this.resolver.resolveServer(srv);\n    if (!server) {\n      return Promise.reject(new Error(\"server did not resolve\"));\n    }\n\n    return this.apiRequest(\"del\", Endpoints.SERVER(server.id), true);\n  }\n\n  // def loginWithToken\n  // email and password are optional\n  loginWithToken(token, email, password) {\n    if (!this.setupCalled) {\n      this.setup();\n    }\n\n    this.state = ConnectionState.LOGGED_IN;\n    this.token = token;\n    this.email = email;\n    this.password = password;\n\n    let self = this;\n    return this.getGateway()\n      .then(url => {\n        self.token = self.client.options.bot && !self.token.startsWith(\"Bot \") ? `Bot ${self.token}` : self.token;\n        self.createWS(url);\n        return self.token;\n      });\n  }\n\n  // def login\n  login(email, password) {\n    let client = this.client;\n\n    if (!this.tokenCacher.done) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.login(email, password).then(resolve).catch(reject);\n        }, 20);\n      });\n    } else {\n      let tk = this.tokenCacher.getToken(email, password);\n      if (tk) {\n        this.client.emit(\"debug\", \"bypassed direct API login, used cached token\");\n        return this.loginWithToken(tk, email, password);\n      }\n    }\n\n    if (this.state !== ConnectionState.DISCONNECTED && this.state !== ConnectionState.IDLE) {\n      return Promise.reject(new Error(\"already logging in/logged in/ready!\"));\n    }\n\n    this.state = ConnectionState.LOGGING_IN;\n\n    return this.apiRequest(\"post\", Endpoints.LOGIN, false, {\n      email,\n      password\n    })\n      .then(res => {\n        this.client.emit(\"debug\", \"direct API login, cached token was unavailable\");\n        let token = res.token;\n        this.tokenCacher.setToken(email, password, token);\n        return this.loginWithToken(token, email, password);\n      }, error => {\n        this.websocket = null;\n        throw error;\n      })\n      .catch(error => {\n        this.websocket = null;\n        this.state = ConnectionState.DISCONNECTED;\n        client.emit(\"disconnected\");\n        throw error;\n      });\n  }\n\n  // def logout\n  logout() {\n    if (this.state === ConnectionState.DISCONNECTED || this.state === ConnectionState.IDLE) {\n      return Promise.reject(new Error(\"Client is not logged in!\"));\n    }\n\n    let disconnect = () => {\n      if (this.websocket) {\n        this.websocket.close(1000);\n        this.websocket = null;\n      }\n      this.token = null;\n      this.email = null;\n      this.password = null;\n      this.state = ConnectionState.DISCONNECTED;\n      return Promise.resolve();\n    };\n\n    if (!this.user.bot) {\n      return this.apiRequest(\"post\", Endpoints.LOGOUT, true)\n        .then(disconnect);\n    } else {\n      return disconnect();\n    }\n  }\n\n  // def startPM\n  startPM(resUser) {\n    let user = this.resolver.resolveUser(resUser);\n    if (!user) {\n      return Promise.reject(new Error(\"Unable to resolve resUser to a User\"));\n    }\n    // start the PM\n    return this.apiRequest(\"post\", Endpoints.ME_CHANNELS, true, {\n      recipient_id: user.id\n    })\n      .then(res => {\n        return this.private_channels.add(new PMChannel(res, this.client));\n      });\n  }\n\n  // def getGateway\n  getGateway() {\n    if (this.gatewayURL) {\n      return Promise.resolve(this.gatewayURL);\n    }\n    return this.apiRequest(\"get\", Endpoints.GATEWAY, true)\n      .then(res => this.gatewayURL = res.url);\n  }\n\n  // def sendMessage\n  sendMessage(where, _content, options = {}) {\n    if (options.file) {\n      if (typeof options.file !== \"object\") {\n        options.file = {\n          file: options.file\n        };\n      }\n      if (!options.file.name) {\n        if (options.file.file instanceof String || typeof options.file.file === \"string\") {\n          options.file.name = require(\"path\").basename(options.file.file);\n        } else if (options.file.file.path) {\n          // fs.createReadStream()'s have .path that give the path. Not sure about other streams though.\n          options.file.name = require(\"path\").basename(options.file.file.path);\n        } else {\n          options.file.name = \"default.png\"; // Just have to go with default filenames.\n        }\n      }\n    }\n\n    return this.resolver.resolveChannel(where)\n      .then(destination => {\n        let content = this.resolver.resolveString(_content);\n\n        if (this.client.options.disableEveryone || options.disableEveryone) {\n          content = content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n        }\n\n        if (options.file) {\n          return this.resolver.resolveFile(options.file.file)\n            .then(file =>\n              this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(destination.id), true, {\n                content: content,\n                tts: options.tts,\n                nonce: options.nonce\n              }, {\n                name: options.file.name,\n                file: file\n              }).then(res => destination.messages.add(new Message(res, destination, this.client)))\n            )\n        } else {\n          return this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(destination.id), true, {\n            content: content,\n            tts: options.tts,\n            nonce: options.nonce\n          })\n            .then(res => destination.messages.add(new Message(res, destination, this.client)));\n        }\n      });\n\n  }\n\n  // def sendFile\n  sendFile(where, _file, name, content) {\n    if (!name) {\n      if (_file instanceof String || typeof _file === \"string\") {\n        name = require(\"path\").basename(_file);\n      } else if (_file && _file.path) {\n        // fs.createReadStream()'s have .path that give the path. Not sure about other streams though.\n        name = require(\"path\").basename(_file.path);\n      } else {\n        name = \"default.png\"; // Just have to go with default filenames.\n      }\n    }\n\n    if (content) {\n      content = {\n        content: this.resolver.resolveString(content)\n      };\n      if (this.client.options.disableEveryone) {\n        content.content = content.content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n      }\n    }\n\n    return this.resolver.resolveChannel(where)\n      .then(channel =>\n        this.resolver.resolveFile(_file)\n          .then(file =>\n            this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGES(channel.id), true, content, {\n              name,\n              file\n            }).then(res => channel.messages.add(new Message(res, channel, this.client)))\n          )\n      );\n  }\n\n  // def deleteMessage\n  deleteMessage(_message, options = {}) {\n\n    let message = this.resolver.resolveMessage(_message);\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message!\"));\n    }\n\n    let chain = options.wait ? delay(options.wait) : Promise.resolve();\n    return chain.then(() =>\n      this.apiRequest(\"del\", Endpoints.CHANNEL_MESSAGE(message.channel.id, message.id), true)\n    )\n      .then(() => message.channel.messages.remove(message));\n  }\n\n  // def deleteMessages\n  deleteMessages(_messages) {\n    if (!_messages instanceof Array)\n      return Promise.reject(new Error(\"Messages provided must be in an array\"));\n    if (_messages.length < 1)\n      return Promise.reject(new Error(\"You must provide at least one message to delete\"));\n    else if (_messages.length === 1)\n      return this.deleteMessage(_messages[0]);\n\n\n    let messages = [];\n    let channel;\n    let message;\n    for (let _message of _messages) {\n      message = this.resolver.resolveMessage(_message);\n      if (!message)\n        return Promise.reject(new Error(\"Something other than a message could not be resolved in the array...\"));\n      if (!message.server)\n        return Promise.reject(new Error(\"You can only bulk delete messages on guild channels\"));\n\n      // ensure same channel\n      if (!channel) {\n        channel = message.channel;\n      } else {\n        //noinspection JSUnusedAssignment\n        if (message.channel.id !== channel.id)\n          return Promise.reject(new Error(\"You can only bulk delete messages from the same channel at one time...\"));\n      }\n\n      messages.push(message);\n    }\n\n    return this.apiRequest(\"post\", `${Endpoints.CHANNEL_MESSAGES(channel.id)}/bulk_delete`, true, {\n      messages: messages.map(m => m.id)\n    })\n      .then(() => messages.forEach(m => channel.messages.remove(m)));\n  }\n\n  // def updateMessage\n  updateMessage(msg, _content, options = {}) {\n\n    let message = this.resolver.resolveMessage(msg);\n\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message!\"));\n    }\n\n    let content = this.resolver.resolveString(_content);\n\n    return this.apiRequest(\n      \"patch\",\n      Endpoints.CHANNEL_MESSAGE(message.channel.id, message.id),\n      true,\n      {\n        content: content,\n        tts: options.tts\n      }\n    )\n      .then(res => message.channel.messages.update(\n        message,\n        new Message(res, message.channel, this.client)\n      ));\n  }\n\n  // def getChannelLogs\n  getChannelLogs(_channel, limit = 50, options = {}) {\n    return this.resolver.resolveChannel(_channel)\n      .then(channel => {\n        let qsObject = {limit};\n        if (options.before) {\n          const res = this.resolver.resolveMessage(options.before);\n          if (res) {\n            qsObject.before = res.id;\n          }\n        }\n        if (options.after) {\n          const res = this.resolver.resolveMessage(options.after);\n          if (res) {\n            qsObject.after = res.id;\n          }\n        }\n        if (options.around) {\n          const res = this.resolver.resolveMessage(options.around);\n          if (res) {\n            qsObject.around = res.id\n          }\n        }\n\n        return this.apiRequest(\n          \"get\",\n          `${Endpoints.CHANNEL_MESSAGES(channel.id)}?${qs.stringify(qsObject)}`,\n          true\n        )\n          .then(res => res.map(\n            msg => channel.messages.add(new Message(msg, channel, this.client))\n          ));\n      });\n  }\n\n  // def getMessage\n  getMessage(_channel, messageID) {\n    return this.resolver.resolveChannel(_channel)\n      .then(channel => {\n        if (!this.user.bot) {\n          return Promise.reject(new Error(\"Only OAuth bot accounts can use this function\"));\n        }\n\n        if (!(channel instanceof TextChannel || channel instanceof PMChannel)) {\n          return Promise.reject(new Error(\"Provided channel is not a Text or PMChannel\"));\n        }\n\n        let msg = channel.messages.get(\"id\", messageID);\n        if (msg) {\n          return Promise.resolve(msg);\n        }\n\n        return this.apiRequest(\n          \"get\",\n          `${Endpoints.CHANNEL_MESSAGES(channel.id)}/${messageID}`,\n          true\n        )\n          .then(res => channel.messages.add(\n            new Message(res, channel, this.client)\n          ));\n      });\n  }\n\n  // def pinMessage\n  pinMessage(msg) {\n    let message = this.resolver.resolveMessage(msg);\n\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message\"));\n    }\n\n    return this.apiRequest(\n      \"put\",\n      `${Endpoints.CHANNEL_PIN(msg.channel.id, msg.id)}`,\n      true\n    );\n  }\n\n  // def unpinMessage\n  unpinMessage(msg) {\n    let message = this.resolver.resolveMessage(msg);\n\n    if (!message) {\n      return Promise.reject(new Error(\"Supplied message did not resolve to a message\"));\n    }\n\n    if (!message.pinned) {\n      return Promise.reject(new Error(\"Supplied message is not pinned\"));\n    }\n\n    return this.apiRequest(\n      \"del\",\n      `${Endpoints.CHANNEL_PIN(msg.channel.id, msg.id)}`,\n      true\n    );\n  }\n\n  // def getPinnedMessages\n  getPinnedMessages(_channel) {\n    return this.resolver.resolveChannel(_channel)\n      .then(channel => {\n        return this.apiRequest(\n          \"get\",\n          `${Endpoints.CHANNEL_PINS(channel.id)}`,\n          true\n        )\n          .then(res => res.map(\n            msg => channel.messages.add(new Message(msg, channel, this.client))\n          ));\n      });\n  }\n\n  // def getBans\n  getBans(server) {\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"get\", Endpoints.SERVER_BANS(server.id), true)\n      .then(res => res.map(\n        ban => this.users.add(new User(ban.user, this.client))\n      ));\n  }\n\n  // def createChannel\n  createChannel(server, name, type = 0) {\n\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"post\", Endpoints.SERVER_CHANNELS(server.id), true, {\n      name,\n      type\n    })\n      .then(res => {\n        let channel;\n        if (res.type === 0) {\n          channel = new TextChannel(res, this.client, server);\n        } else {\n          channel = new VoiceChannel(res, this.client, server);\n        }\n        return server.channels.add(this.channels.add(channel));\n      });\n  }\n\n  // def deleteChannel\n  deleteChannel(_channel) {\n\n    return this.resolver.resolveChannel(_channel)\n      .then(channel =>\n        this.apiRequest(\"del\", Endpoints.CHANNEL(channel.id), true)\n          .then(() => {\n            if (channel.server) {\n              channel.server.channels.remove(channel);\n              this.channels.remove(channel);\n            } else {\n              this.private_channels.remove(channel);\n            }\n          })\n      );\n  }\n\n  // def banMember\n  banMember(user, server, length = 1) {\n    let resolvedUser = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n\n    if (resolvedUser === null && typeof user === \"string\") {\n      user = {id: user};\n    } else {\n      user = resolvedUser;\n    }\n\n    return this.apiRequest(\n      \"put\",\n      `${Endpoints.SERVER_BANS(server.id)}/${user.id}?delete-message-days=${length}`,\n      true\n    );\n  }\n\n  // def unbanMember\n  unbanMember(user, server) {\n\n    server = this.resolver.resolveServer(server);\n    let resolvedUser = this.resolver.resolveUser(user);\n\n    if (resolvedUser === null && typeof user === \"string\") {\n      user = {id: user};\n    } else {\n      user = resolvedUser;\n    }\n\n    return this.apiRequest(\"del\", `${Endpoints.SERVER_BANS(server.id)}/${user.id}`, true)\n  }\n\n  // def kickMember\n  kickMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"del\", `${Endpoints.SERVER_MEMBERS(server.id) }/${user.id}`, true);\n  }\n\n  // def moveMember\n  moveMember(user, channel) {\n    user = this.resolver.resolveUser(user);\n    return this.resolver.resolveChannel(channel).then(channel => {\n      let server = channel.server;\n\n      // Make sure `channel` is a voice channel\n      if (channel.type !== 2) {\n        throw new Error(\"Can't moveMember into a non-voice channel\");\n      } else {\n        return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {channel_id: channel.id})\n          .then(res => {\n            user.voiceChannel = channel;\n            return res;\n          });\n      }\n    });\n  }\n\n  // def muteMember\n  muteMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {mute: true});\n  }\n\n  // def unmuteMember\n  unmuteMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {mute: false});\n  }\n\n  // def deafenMember\n  deafenMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {deaf: true});\n  }\n\n  // def undeafenMember\n  undeafenMember(user, server) {\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id}`, true, {deaf: false});\n  }\n\n  // def setNickname\n  setNickname(server, nick, user) {\n    nick = nick || \"\";\n    user = this.resolver.resolveUser(user);\n    server = this.resolver.resolveServer(server);\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_MEMBERS(server.id)}/${user.id === this.user.id ? \"@me/nick\" : user.id}`, true, {nick: nick});\n  }\n\n  //def setNote\n  setNote(user, note) {\n    user = this.resolver.resolveUser(user);\n    note = note || \"\";\n\n    if (!user) {\n      return Promise.reject(new Error(\"Failed to resolve user\"));\n    }\n\n    return this.apiRequest(\"put\", `${Endpoints.ME_NOTES}/${user.id}`, true, {note: note});\n  }\n\n  // def createRole\n  createRole(server, data) {\n    server = this.resolver.resolveServer(server);\n\n    return this.apiRequest(\"post\", Endpoints.SERVER_ROLES(server.id), true)\n      .then(res => {\n        let role = server.roles.add(new Role(res, server, this.client));\n\n        if (data) {\n          return this.updateRole(role, data);\n        }\n        return role;\n      });\n  }\n\n  // def updateRole\n  updateRole(role, data) {\n\n    role = this.resolver.resolveRole(role);\n    let server = this.resolver.resolveServer(role.server);\n\n    let newData = {\n      color: \"color\" in data ? data.color : role.color,\n      hoist: \"hoist\" in data ? data.hoist : role.hoist,\n      name: \"name\" in data ? data.name : role.name,\n      position: \"position\" in data ? data.position : role.position,\n      permissions: \"permissions\" in data ? data.permissions : role.permissions,\n      mentionable: \"mentionable\" in data ? data.mentionable : role.mentionable\n    };\n\n    if (data.permissions) {\n      newData.permissions = 0;\n      for (let perm of data.permissions) {\n        if (perm instanceof String || typeof perm === \"string\") {\n          newData.permissions |= (Permissions[perm] || 0);\n        } else {\n          newData.permissions |= perm;\n        }\n      }\n    }\n\n    return this.apiRequest(\"patch\", `${Endpoints.SERVER_ROLES(server.id)}/${role.id}`, true, newData)\n      .then(res => {\n        return server.roles.update(role, new Role(res, server, this.client));\n      });\n  }\n\n  // def deleteRole\n  deleteRole(role) {\n    if (role.server.id === role.id) {\n      return Promise.reject(new Error(\"Stop trying to delete the @everyone role. It is futile\"));\n    } else {\n      return this.apiRequest(\"del\", `${Endpoints.SERVER_ROLES(role.server.id)}/${role.id}`, true);\n    }\n  }\n\n  //def addMemberToRole\n  addMemberToRole(member, roles) {\n    member = this.resolver.resolveUser(member);\n\n    if (!member) {\n      return Promise.reject(new Error(\"user not found\"));\n    }\n\n    if (!Array.isArray(roles) || roles.length === 0) {\n      roles = this.resolver.resolveRole(roles);\n      if (roles) {\n        roles = [roles];\n      } else {\n        return Promise.reject(new Error(\"invalid array of roles\"));\n      }\n    } else {\n      roles = roles.map(r => this.resolver.resolveRole(r));\n    }\n\n    if (roles.some(role => !role.server.memberMap[member.id])) {\n      return Promise.reject(new Error(\"Role does not exist on same server as member\"));\n    }\n\n    let roleIDs = roles[0].server.memberMap[member.id].roles.map(r => (r && r.id) || r);\n\n    for (let i = 0; i < roles.length; i++) {\n      if (!~roleIDs.indexOf(roles[i].id)) {\n        roleIDs.push(roles[i].id);\n      }\n    }\n\n    return this.apiRequest(\n      \"patch\",\n      `${Endpoints.SERVER_MEMBERS(roles[0].server.id)}/${member.id}`,\n      true,\n      {\n        roles: roleIDs\n      }\n    );\n  }\n\n  memberHasRole(member, role) {\n    role = this.resolver.resolveRole(role);\n    member = this.resolver.resolveUser(member);\n\n    if (!role) {\n      throw new Error(\"invalid role\");\n    }\n    if (!member) {\n      throw new Error(\"user not found\");\n    }\n\n    let roledata = role.server.rolesOf(member);\n    if (roledata) {\n      for (let r of roledata) {\n        if (r.id == role.id) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  //def removeMemberFromRole\n  removeMemberFromRole(member, roles) {\n    member = this.resolver.resolveUser(member);\n\n    if (!member) {\n      return Promise.reject(new Error(\"user not found\"));\n    }\n\n    if (!Array.isArray(roles) || roles.length === 0) {\n      roles = this.resolver.resolveRole(roles);\n      if (roles) {\n        roles = [roles];\n      } else {\n        return Promise.reject(new Error(\"invalid array of roles\"));\n      }\n    } else {\n      roles = roles.map(r => this.resolver.resolveRole(r));\n    }\n\n    let roleIDs = roles[0].server.memberMap[member.id].roles.map(r => (r && r.id) || r);\n\n    for (let role of roles) {\n      if (!role.server.memberMap[member.id]) {\n        return Promise.reject(new Error(\"member not in server\"));\n      }\n      for (let item in roleIDs) {\n        if (roleIDs.hasOwnProperty(item)) {\n          if (roleIDs[item] === role.id) {\n            roleIDs.splice(item, 1);\n            break;\n          }\n        }\n      }\n    }\n\n    return this.apiRequest(\n      \"patch\",\n      `${Endpoints.SERVER_MEMBERS(roles[0].server.id)}/${member.id}`,\n      true,\n      {\n        roles: roleIDs\n      }\n    );\n  }\n\n  // def createInvite\n  createInvite(chanServ, options) {\n    return this.resolver.resolveChannel(chanServ)\n      .then(channel => {\n        if (!options) {\n          options = {\n            validate: null\n          };\n        } else {\n          options.max_age = options.maxAge || 0;\n          options.max_uses = options.maxUses || 0;\n          options.temporary = options.temporary || false;\n          options.xkcdpass = options.xkcd || false;\n        }\n\n        return this.apiRequest(\"post\", Endpoints.CHANNEL_INVITES(channel.id), true, options)\n          .then(res => new Invite(res, this.channels.get(\"id\", res.channel.id), this.client));\n      });\n  }\n\n  //def deleteInvite\n  deleteInvite(invite) {\n    invite = this.resolver.resolveInviteID(invite);\n    if (!invite) {\n      throw new Error(\"Not a valid invite\");\n    }\n    return this.apiRequest(\"del\", Endpoints.INVITE(invite), true);\n  }\n\n  //def getInvite\n  getInvite(invite) {\n    invite = this.resolver.resolveInviteID(invite);\n    if (!invite) {\n      return Promise.reject(new Error(\"Not a valid invite\"));\n    }\n\n    return this.apiRequest(\"get\", Endpoints.INVITE(invite), true)\n      .then(res => {\n        if (!this.channels.has(\"id\", res.channel.id)) {\n          return new Invite(res, null, this.client);\n        }\n        return this.apiRequest(\"post\", Endpoints.CHANNEL_INVITES(res.channel.id), true, {validate: invite})\n          .then(res2 => new Invite(res2, this.channels.get(\"id\", res.channel.id), this.client));\n      });\n  }\n\n  //def getInvites\n  getInvites(channel) {\n    if (!(channel instanceof Channel)) {\n      let server = this.resolver.resolveServer(channel);\n      if (server) {\n        return this.apiRequest(\"get\", Endpoints.SERVER_INVITES(server.id), true)\n          .then(res => {\n            return res.map(data => new Invite(data, this.channels.get(\"id\", data.channel.id), this.client));\n          });\n      }\n    }\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n        return this.apiRequest(\"get\", Endpoints.CHANNEL_INVITES(channel.id), true)\n          .then(res => {\n            return res.map(data => new Invite(data, this.channels.get(\"id\", data.channel.id), this.client));\n          });\n      });\n  }\n\n  //def overwritePermissions\n  overwritePermissions(channel, role, updated) {\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n        if (!channel instanceof ServerChannel) {\n          return Promise.reject(new Error(\"Not a server channel\"));\n        }\n\n        let data = {\n          allow: 0,\n          deny: 0\n        };\n\n        if (role instanceof String || typeof role === \"string\") {\n          role = this.resolver.resolveUser(role) || this.resolver.resolveRole(role);\n        }\n\n        if (role instanceof User) {\n          data.id = role.id;\n          data.type = \"member\";\n        } else if (role instanceof Role) {\n          data.id = role.id;\n          data.type = \"role\";\n        } else {\n          return Promise.reject(new Error(\"Role could not be resolved\"));\n        }\n\n        let previousOverwrite = channel.permissionOverwrites.get(\"id\", data.id);\n\n        if (previousOverwrite) {\n          data.allow |= previousOverwrite.allow;\n          data.deny |= previousOverwrite.deny;\n        }\n\n        for (let perm in updated) {\n          if (updated.hasOwnProperty(perm)) {\n            if (updated[perm] === true) {\n              data.allow |= (Permissions[perm] || 0);\n              data.deny &= ~(Permissions[perm] || 0);\n            } else if (updated[perm] === false) {\n              data.allow &= ~(Permissions[perm] || 0);\n              data.deny |= (Permissions[perm] || 0);\n            } else {\n              data.allow &= ~(Permissions[perm] || 0);\n              data.deny &= ~(Permissions[perm] || 0);\n            }\n          }\n        }\n\n        return this.apiRequest(\n          \"put\",\n          `${Endpoints.CHANNEL_PERMISSIONS(channel.id)}/${data.id}`,\n          true,\n          data\n        );\n      });\n  }\n\n  //def setStatus\n  setStatus(idleStatus, game) {\n\n    if (idleStatus === \"online\" || idleStatus === \"here\" || idleStatus === \"available\") {\n      this.idleStatus = null;\n    }\n    else if (idleStatus === \"idle\" || idleStatus === \"away\") {\n      this.idleStatus = Date.now();\n    }\n    else {\n      this.idleStatus = this.idleStatus || null; //undefined\n    }\n\n    // convert undefined and empty string to null\n    if (typeof game === \"string\" && !game.length) game = null;\n\n    this.game = game === null ? null : !game ? this.game || null : typeof game === \"string\" ? {name: game} : game;\n\n    let packet = {\n      op: 3,\n      d: {\n        idle_since: this.idleStatus,\n        game: this.game\n      }\n    };\n\n    this.sendWS(packet);\n\n    this.user.status = this.idleStatus ? \"idle\" : \"online\";\n    this.user.game = this.game;\n\n    return Promise.resolve();\n\n  }\n\n  //def sendTyping\n  sendTyping(channel) {\n    return this.resolver.resolveChannel(channel).then(channel =>\n      this.apiRequest(\"post\", Endpoints.CHANNEL(channel.id) + \"/typing\", true)\n    );\n  }\n\n  //def startTyping\n  startTyping(channel) {\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n\n        if (this.intervals.typing[channel.id]) {\n          // typing interval already exists, leave it alone\n          throw new Error(\"Already typing in that channel\");\n        }\n\n        this.intervals.typing[channel.id] = setInterval(\n          () => this.sendTyping(channel)\n            .catch(error => this.client.emit(\"error\", error)),\n          4000\n        );\n\n        return this.sendTyping(channel);\n      });\n\n  }\n\n  //def stopTyping\n  stopTyping(channel) {\n    return this.resolver.resolveChannel(channel)\n      .then(channel => {\n\n        if (!this.intervals.typing[channel.id]) {\n          // typing interval doesn\"t exist\n          throw new Error(\"Not typing in that channel\");\n        }\n\n        clearInterval(this.intervals.typing[channel.id]);\n        this.intervals.typing[channel.id] = false;\n\n      });\n  }\n\n  //def updateDetails\n  updateDetails(data) {\n    if (!this.user.bot && !(this.email || data.email)) {\n      throw new Error(\"Must provide email since a token was used to login\");\n    }\n\n    let options = {};\n\n    if (data.username) {\n      options.username = data.username;\n    }\n\n    if (data.avatar) {\n      options.avatar = this.resolver.resolveToBase64(data.avatar);\n    }\n\n    if (this.email || data.email) {\n      options.email = data.email || this.email;\n      options.new_password = data.newPassword || null;\n      options.password = data.password || this.password;\n    }\n\n    return this.apiRequest(\"patch\", Endpoints.ME, true, options);\n  }\n\n  //def setAvatar\n  setAvatar(avatar) {\n    return this.updateDetails({avatar});\n  }\n\n  //def setUsername\n  setUsername(username) {\n    return this.updateDetails({username});\n  }\n\n  //def setChannelTopic\n  setChannelTopic(channel, topic = \"\") {\n    topic = topic || \"\";\n\n    return this.updateChannel(channel, {topic: topic});\n  }\n\n  //def setChannelName\n  setChannelName(channel, name) {\n    name = name || \"unnamed-channel\";\n\n    return this.updateChannel(channel, {name: name});\n  }\n\n  //def setChannelPosition\n  setChannelPosition(channel, position) {\n    position = position || 0;\n\n    return this.updateChannel(channel, {position: position});\n  }\n\n  //def setChannelUserLimit\n  setChannelUserLimit(channel, limit) {\n    limit = limit || 0; // default 0 = no limit\n\n    return this.updateChannel(channel, {userLimit: limit})\n  }\n\n  //def setChannelBitrate\n  setChannelBitrate(channel, kbitrate) {\n    kbitrate = kbitrate || 64; // default 64kbps\n\n    return this.updateChannel(channel, {bitrate: kbitrate});\n  }\n\n  //def updateChannel\n  updateChannel(channel, data) {\n    return this.resolver.resolveChannel(channel).then(channel => {\n      if (!channel) {\n        return Promise.reject(new Error(\"Failed to resolve channel\"));\n      }\n\n      data = {\n        name: data.name || channel.name,\n        topic: data.topic || channel.topic,\n        position: (data.position ? data.position : channel.position),\n        user_limit: (data.userLimit ? data.userLimit : channel.userLimit),\n        bitrate: (data.bitrate ? data.bitrate : channel.bitrate ? channel.bitrate : undefined)\n      };\n\n      if (data.position < 0) {\n        return Promise.reject(new Error(\"Position cannot be less than 0\"));\n      }\n\n      if (data.user_limit < 0 || data.user_limit > 99) {\n        return Promise.reject(new Error(\"User limit must be between 0-99\"));\n      }\n\n      if (data.kbitrate < 8 || data.kbitrate > 96) {\n        return Promise.reject(new Error(\"Bitrate must be between 8-96kbps\"));\n      }\n\n      if (data.bitrate) {\n        data.bitrate *= 1000; // convert to bits before sending\n      }\n\n      return this.apiRequest(\"patch\", Endpoints.CHANNEL(channel.id), true, data)\n        .then(res => {\n          channel.name = data.name;\n          channel.topic = data.topic;\n          channel.position = data.position;\n          channel.userLimit = data.user_limit;\n          channel.bitrate = Math.ceil(data.bitrate / 1000);\n          channel._bitrate = data.bitrate;\n        });\n    });\n  }\n\n  //def addFriend\n  addFriend(user) {\n    if (this.user.bot) return Promise.reject(new Error(\"user is a bot, bot's do not have friends support\"));\n\n    let id;\n    if (user instanceof String || typeof user === \"string\")\n      id = user;\n    else if (user instanceof User) {\n      user = this.resolver.resolveUser(user);\n      id = user.id\n    } else {\n      if (user.username && user.discriminator) // add by username and discriminator (pass in an object)\n        return this.apiRequest(\"put\", Endpoints.FRIENDS, true, user);\n      else\n        return Promise.reject(\"invalid user\")\n    }\n\n    return this.apiRequest(\"put\", `${Endpoints.FRIENDS}/${id}`, true, {});\n  }\n\n  //def removeFriend\n  removeFriend(user) {\n    if (this.user.bot) return Promise.reject(new Error(\"user is a bot, bot's do not have friends support\"));\n\n    user = this.resolver.resolveUser(user);\n\n    return this.apiRequest(\"delete\", `${Endpoints.FRIENDS}/${user.id}`, true);\n  }\n\n  getServerWebhooks(server) {\n    server = this.resolver.resolveServer(server);\n\n    if (!server) {\n      return Promise.reject(new Error(\"Failed to resolve server\"));\n    }\n\n    return this.apiRequest(\"get\", Endpoints.SERVER_WEBHOOKS(server.id), true)\n      .then(res => res.map(\n        webhook => {\n          let channel = this.channels.get(\"id\", webhook.channel_id);\n          return channel.webhooks.add(new Webhook(\n            webhook,\n            server,\n            channel,\n            this.users.get(\"id\", webhook.user.id)\n          ))\n        }\n      ));\n  }\n\n  getChannelWebhooks(channel) {\n    return this.resolver.resolveChannel(channel).then(channel => {\n      if (!channel) {\n        return Promise.reject(new Error(\"Failed to resolve channel\"));\n      }\n\n      return this.apiRequest(\"get\", Endpoints.CHANNEL_WEBHOOKS(channel.id), true)\n        .then(res => res.map(\n          webhook => channel.webhooks.add(new Webhook(\n            webhook,\n            this.servers.get(\"id\", webhook.guild_id),\n            channel,\n            this.users.get(\"id\", webhook.user.id)\n          ))\n        ));\n    })\n  }\n\n  editWebhook(webhook, options = {}) {\n    return this.resolver.resolveWebhook(webhook).then(webhook => {\n      if (!webhook) {\n        return Promise.reject(new Error(\" Failed to resolve webhook\"))\n      }\n\n      if (options.hasOwnProperty(\"avatar\")) {\n        options.avatar = this.resolver.resolveToBase64(options.avatar);\n      }\n\n      return this.apiRequest(\"patch\", Endpoints.WEBHOOK(webhook.id), true, options)\n        .then(res => {\n          webhook.name = res.name;\n          webhook.avatar = res.hasOwnProperty('avatar') ? res.avatar : webhook.avatar;\n        });\n    })\n  }\n\n  createWebhook(channel, options = {}) {\n    return this.resolver.resolveChannel(channel)\n      .then(destination => {\n        if (!channel) {\n          return Promise.reject(new Error(\" Failed to resolve channel\"))\n        }\n\n        if (options.hasOwnProperty(\"avatar\")) {\n          options.avatar = this.resolver.resolveToBase64(options.avatar);\n        }\n\n        return this.apiRequest(\"post\", Endpoints.CHANNEL_WEBHOOKS(destination.id), true, options)\n          .then(webhook => channel.webhooks.add(new Webhook(\n            webhook,\n            this.servers.get(\"id\", webhook.guild_id),\n            channel,\n            this.users.get(\"id\", webhook.user.id)\n          )));\n      });\n  }\n\n  deleteWebhook(webhook) {\n    return this.resolver.resolveWebhook(webhook).then(webhook => {\n      if (!webhook) {\n        return Promise.reject(new Error(\" Failed to resolve webhook\"))\n      }\n\n      return this.apiRequest(\"delete\", Endpoints.WEBHOOK(webhook.id), true)\n        .then(() => {\n          webhook.channel.webhooks.remove(webhook);\n        });\n    })\n  }\n\n  sendWebhookMessage(webhook, _content, options = {}) {\n    return this.resolver.resolveWebhook(webhook)\n      .then(destination => {\n        let content = this.resolver.resolveString(_content);\n\n        if (this.client.options.disableEveryone || options.disableEveryone) {\n          content = content.replace(/(@)(everyone|here)/g, '$1\\u200b$2');\n        }\n\n        if (!options.hasOwnProperty(\"username\")) {\n          options.username = this.user.username;\n        }\n\n        let slack;\n        if (options.hasOwnProperty(\"slack\")) {\n          slack = options.slack;\n          delete options[\"slack\"];\n        }\n\n        options.content = content;\n\n        return this.apiRequest(\n          \"post\",\n          `${Endpoints.WEBHOOK_MESSAGE(destination.id, destination.token)}${slack ? \"/slack\" : \"\"}?wait=true`,\n          true,\n          options\n        )\n      });\n\n  }\n\n  //def getOAuthApplication\n  getOAuthApplication(appID) {\n    appID = appID || \"@me\";\n    return this.apiRequest(\"get\", Endpoints.OAUTH2_APPLICATION(appID), true);\n  }\n\n  //def ack\n  ack(msg) {\n    msg = this.resolver.resolveMessage(msg);\n\n    if (!msg) {\n      return Promise.reject(new Error(\"Message does not exist\"));\n    }\n\n    return this.apiRequest(\"post\", Endpoints.CHANNEL_MESSAGE(msg.channel.id, msg.id) + \"/ack\", true);\n  }\n\n  sendWS(object) {\n    if (this.websocket) {\n      //noinspection NodeModulesDependencies,NodeModulesDependencies\n      this.websocket.send(JSON.stringify(object));\n    }\n  }\n\n  createWS(url) {\n    if (this.websocket) {\n      return false;\n    }\n    if (!url.endsWith(\"/\")) {\n      url += \"/\";\n    }\n    url += \"?encoding=json&v=\" + GATEWAY_VERSION;\n\n    this.websocket = new WebSocket(url);\n\n    this.websocket.onopen = () => {\n    };\n\n    this.websocket.onclose = (event) => {\n      this.websocket = null;\n      this.state = ConnectionState.DISCONNECTED;\n      if (event && event.code) {\n        this.client.emit(\"warn\", \"WS close: \" + event.code);\n        let err;\n        if (event.code === 1006) {\n          if (!this.setupCalled) {\n            this.setup();\n          }\n          err = new Error(\"Error 1006, god knows\");\n        } else if (event.code === 4001) {\n          err = new Error(\"Gateway received invalid OP code\");\n        } else if (event.code === 4005) {\n          err = new Error(\"Gateway received invalid message\");\n        } else if (event.code === 4003) {\n          err = new Error(\"Not authenticated\");\n        } else if (event.code === 4004) {\n          err = new Error(\"Authentication failed\");\n        } else if (event.code === 4005) {\n          err = new Error(\"Already authenticated\");\n        } else if (event.code === 4006 || event.code === 4009) {\n          err = new Error(\"Invalid session\");\n        } else if (event.code === 4007) {\n          this.sequence = 0;\n          err = new Error(\"Invalid sequence number\");\n        } else if (event.code === 4008) {\n          err = new Error(\"Gateway connection was ratelimited\");\n        } else if (event.code === 4010) {\n          err = new Error(\"Invalid shard key\");\n        } else {\n          err = new Error(`Unknown disconnect code ${event.code}`)\n        }\n        if (err) {\n          this.client.emit(\"error\", err);\n        }\n      }\n      this.disconnected(this.client.options.autoReconnect);\n    };\n\n    this.websocket.onerror = e => {\n      this.client.emit(\"error\", e);\n      this.websocket = null;\n      this.state = ConnectionState.DISCONNECTED;\n      this.disconnected(this.client.options.autoReconnect);\n    };\n\n    this.websocket.onmessage = e => {\n      if (e.data instanceof Buffer) {\n        if (!zlib) zlib = require(\"zlib\");\n        e.data = zlib.inflateSync(e.data).toString();\n      }\n\n      let packet;\n      try {\n        packet = JSON.parse(e.data);\n      } catch (e) {\n        this.client.emit(\"error\", e);\n        return;\n      }\n\n      this.client.emit(\"raw\", packet);\n\n      /*\n      if (packet.op !== 0 || (packet.t !== PacketType.MESSAGE_CREATE && packet.t !== PacketType.TYPING)) {\n        console.log(packet);\n      }\n      */\n\n      if (packet.s) {\n        this.sequence = packet.s;\n      }\n\n      switch (packet.op) {\n        case 0:\n          this.processPacket(packet);\n          break;\n        case 1:\n          this.heartbeatAcked = true;\n          this.heartbeat();\n          break;\n        case 7:\n          this.disconnected(true);\n          break;\n        case 9:\n          this.sessionID = null;\n          this.sequence = 0;\n          this.identify();\n          break;\n        case 10:\n          if (this.sessionID) {\n            this.resume();\n          } else {\n            this.identify();\n          }\n          this.heartbeatAcked = true; // start off without assuming we didn't get a missed heartbeat acknowledge right away;\n          this.heartbeat();\n          this.heartbeatAcked = true;\n          this.intervals.kai = setInterval(() => this.heartbeat(), packet.d.heartbeat_interval);\n          break;\n        case 11:\n          this.heartbeatAcked = true;\n          break;\n        default:\n          this.client.emit(\"unknown\", packet);\n          break;\n      }\n    };\n  }\n\n  processPacket(packet) {\n    let client = this.client;\n    let data = packet.d;\n    switch (packet.t) {\n      case PacketType.RESUMED:\n      case PacketType.READY: {\n        this.autoReconnectInterval = 1000;\n        this.state = ConnectionState.READY;\n\n        if (packet.t === PacketType.RESUMED) {\n          break;\n        }\n\n        this.sessionID = data.session_id;\n        let startTime = Date.now();\n\n        this.user = this.users.add(new User(data.user, client));\n\n        this.forceFetchCount = {};\n        this.forceFetchQueue = [];\n        this.forceFetchLength = 1;\n\n        data.guilds.forEach(server => {\n          if (!server.unavailable) {\n            server = this.servers.add(new Server(server, client));\n            if (client.options.bot === false) {\n              this.unsyncedGuilds++;\n              this.syncGuild(server.id);\n            }\n            if (this.client.options.forceFetchUsers && server.members && server.members.length < server.memberCount) {\n              this.getGuildMembers(server.id, Math.ceil(server.memberCount / 1000));\n            }\n          } else {\n            client.emit(\"debug\", \"server \" + server.id + \" was unavailable, could not create (ready)\");\n            this.unavailableServers.add(server);\n          }\n        });\n        data.private_channels.forEach(pm => {\n          this.private_channels.add(new PMChannel(pm, client));\n        });\n        if (!data.user.bot) { // bots dont have friends\n          data.relationships.forEach(friend => {\n            if (friend.type === 1) { // is a friend\n              this.friends.add(new User(friend.user, client));\n            } else if (friend.type === 2) { // incoming friend requests\n              this.blocked_users.add(new User(friend.user, client));\n            } else if (friend.type === 3) { // incoming friend requests\n              this.incoming_friend_requests.add(new User(friend.user, client));\n            } else if (friend.type === 4) { // outgoing friend requests\n              this.outgoing_friend_requests.add(new User(friend.user, client));\n            } else {\n              client.emit(\"warn\", \"unknown friend type \" + friend.type);\n            }\n          });\n        } else {\n          this.friends = null;\n          this.blocked_users = null;\n          this.incoming_friend_requests = null;\n          this.outgoing_friend_requests = null;\n        }\n\n        // add notes to users\n        if (data.notes) {\n          for (let note in data.notes) {\n            if (data.notes.hasOwnProperty(note)) {\n              let user = this.users.get(\"id\", note);\n              if (user) {\n                let newUser = user;\n                newUser.note = data.notes[note];\n\n                this.users.update(user, newUser);\n              } else {\n                client.emit(\"warn\", \"note in ready packet but user not cached\");\n              }\n            }\n          }\n        }\n\n        client.emit(\"debug\", `ready packet took ${Date.now() - startTime}ms to process`);\n        client.emit(\"debug\", `ready with ${this.servers.length} servers, ${this.unavailableServers.length} unavailable servers, ${this.channels.length} channels and ${this.users.length} users cached.`);\n\n        this.restartServerCreateTimeout();\n\n        break;\n      }\n      case PacketType.MESSAGE_CREATE: {\n        // format: https://discordapi.readthedocs.org/en/latest/reference/channels/messages.html#message-format\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          let msg = channel.messages.add(new Message(data, channel, client));\n          channel.lastMessageID = msg.id;\n          if (this.messageAwaits[channel.id + msg.author.id]) {\n            this.messageAwaits[channel.id + msg.author.id].map(fn => fn(msg));\n            this.messageAwaits[channel.id + msg.author.id] = null;\n            client.emit(\"message\", msg, true); //2nd param is isAwaitedMessage\n          } else {\n            client.emit(\"message\", msg);\n          }\n        } else {\n          client.emit(\"warn\", \"message created but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.MESSAGE_DELETE: {\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          // potentially blank\n          let msg = channel.messages.get(\"id\", data.id);\n          client.emit(\"messageDeleted\", msg, channel);\n          if (msg) {\n            channel.messages.remove(msg);\n          } else {\n            client.emit(\"debug\", \"message was deleted but message is not cached\");\n          }\n        } else {\n          client.emit(\"warn\", \"message was deleted but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.MESSAGE_DELETE_BULK: {\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          data.ids.forEach((id) => {\n            // potentially blank\n            let msg = channel.messages.get(\"id\", id);\n            client.emit(\"messageDeleted\", msg, channel);\n            if (msg) {\n              channel.messages.remove(msg);\n            } else {\n              client.emit(\"debug\", \"message was deleted but message is not cached\");\n            }\n          });\n        } else {\n          client.emit(\"warn\", \"message was deleted but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.MESSAGE_UPDATE: {\n        // format https://discordapi.readthedocs.org/en/latest/reference/channels/messages.html#message-format\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n        if (channel) {\n          // potentially blank\n          let msg = channel.messages.get(\"id\", data.id);\n\n          if (msg) {\n            // old message exists\n            data.nonce = data.nonce !== undefined ? data.nonce : msg.nonce;\n            data.attachments = data.attachments !== undefined ? data.attachments : msg.attachments;\n            data.tts = data.tts !== undefined ? data.tts : msg.tts;\n            data.embeds = data.embeds !== undefined ? data.embeds : msg.embeds;\n            data.timestamp = data.timestamp !== undefined ? data.timestamp : msg.timestamp;\n            data.mention_everyone = data.mention_everyone !== undefined ? data.mention_everyone : msg.everyoneMentioned;\n            data.content = data.content !== undefined ? data.content : msg.content;\n            data.mentions = data.mentions !== undefined ? data.mentions : msg.mentions;\n            data.author = data.author !== undefined ? data.author : msg.author;\n            msg = new Message(msg, channel, client);\n          } else if (!data.author || !data.content) {\n            break;\n          }\n          let nmsg = new Message(data, channel, client);\n          client.emit(\"messageUpdated\", msg, nmsg);\n          if (msg) {\n            channel.messages.update(msg, nmsg);\n          }\n        } else {\n          client.emit(\"warn\", \"message was updated but channel is not cached\");\n        }\n        break;\n      }\n      case PacketType.SERVER_CREATE: {\n        let server = this.servers.get(\"id\", data.id);\n        if (!server) {\n          if (!data.unavailable) {\n            server = this.servers.add(new Server(data, client));\n            if (client.options.bot === false) {\n              this.unsyncedGuilds++;\n              this.syncGuild(server.id);\n            }\n            if (client.readyTime) {\n              client.emit(\"serverCreated\", server);\n            }\n            if (this.client.options.forceFetchUsers && server.large && server.members.length < server.memberCount) {\n              this.getGuildMembers(server.id, Math.ceil(server.memberCount / 1000));\n            }\n            let unavailable = this.unavailableServers.get(\"id\", server.id);\n            if (unavailable) {\n              this.unavailableServers.remove(unavailable);\n            }\n            this.restartServerCreateTimeout();\n          } else {\n            client.emit(\"debug\", \"server was unavailable, could not create\");\n          }\n        }\n        break;\n      }\n      case PacketType.SERVER_DELETE: {\n        let server = this.servers.get(\"id\", data.id);\n        if (server) {\n          if (!data.unavailable) {\n            client.emit(\"serverDeleted\", server);\n\n            for (let channel of server.channels) {\n              this.channels.remove(channel);\n            }\n\n            this.servers.remove(server);\n\n            for (let user of server.members) {\n              let found = false;\n              for (let s of this.servers) {\n                if (s.members.get(\"id\", user.id)) {\n                  found = true;\n                  break;\n                }\n              }\n              if (!found) {\n                this.users.remove(user);\n              }\n            }\n          } else {\n            client.emit(\"debug\", \"server was unavailable, could not update\");\n          }\n          this.buckets[\"bot:msg:guild:\" + packet.d.id] =\n            this.buckets[\"dmsg:\" + packet.d.id] =\n              this.buckets[\"bdmsg:\" + packet.d.id] =\n                this.buckets[\"guild_member:\" + packet.d.id] =\n                  this.buckets[\"guild_member_nick:\" + packet.d.id] = undefined;\n        } else {\n          client.emit(\"warn\", \"server was deleted but it was not in the cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_UPDATE: {\n        let server = this.servers.get(\"id\", data.id);\n        if (server) {\n          // server exists\n          data.members = data.members || [];\n          data.channels = data.channels || [];\n          let newserver = new Server(data, client);\n          newserver.members = server.members;\n          newserver.memberMap = server.memberMap;\n          newserver.channels = server.channels;\n          if (newserver.equalsStrict(server)) {\n            // already the same don't do anything\n            client.emit(\"debug\", \"received server update but server already updated\");\n          } else {\n            client.emit(\"serverUpdated\", new Server(server, client), newserver);\n            this.servers.update(server, newserver);\n          }\n        } else if (!server) {\n          client.emit(\"warn\", \"server was updated but it was not in the cache\");\n        }\n        break;\n      }\n      case PacketType.CHANNEL_CREATE: {\n\n        let channel = this.channels.get(\"id\", data.id);\n\n        if (!channel) {\n\n          let server = this.servers.get(\"id\", data.guild_id);\n          if (server) {\n            let chan = null;\n            if (data.type === 0) {\n              chan = this.channels.add(new TextChannel(data, client, server));\n            } else {\n              chan = this.channels.add(new VoiceChannel(data, client, server));\n            }\n            client.emit(\"channelCreated\", server.channels.add(chan));\n          } else if (data.is_private) {\n            client.emit(\"channelCreated\", this.private_channels.add(new PMChannel(data, client)));\n          } else {\n            client.emit(\"warn\", \"channel created but server does not exist\");\n          }\n\n        } else {\n          client.emit(\"warn\", \"channel created but already in cache\");\n        }\n\n        break;\n      }\n      case PacketType.CHANNEL_DELETE: {\n        let channel = this.channels.get(\"id\", data.id) || this.private_channels.get(\"id\", data.id);\n        if (channel) {\n\n          if (channel.server) { // accounts for PMs\n            channel.server.channels.remove(channel);\n            this.channels.remove(channel);\n          } else {\n            this.private_channels.remove(channel);\n          }\n\n          client.emit(\"channelDeleted\", channel);\n\n        } else {\n          client.emit(\"warn\", \"channel deleted but already out of cache?\");\n        }\n        break;\n      }\n      case PacketType.CHANNEL_UPDATE: {\n        let channel = this.channels.get(\"id\", data.id) || this.private_channels.get(\"id\", data.id);\n        if (channel) {\n\n          if (channel instanceof PMChannel) {\n            //PM CHANNEL\n            client.emit(\"channelUpdated\", new PMChannel(channel, client),\n              this.private_channels.update(channel, new PMChannel(data, client)));\n          } else {\n            if (channel.server) {\n              if (channel.type === 0) {\n                //TEXT CHANNEL\n                let chan = new TextChannel(data, client, channel.server);\n                chan.messages = channel.messages;\n                client.emit(\"channelUpdated\", channel, chan);\n                channel.server.channels.update(channel, chan);\n                this.channels.update(channel, chan);\n              } else {\n                //VOICE CHANNEL\n                data.members = channel.members;\n                let chan = new VoiceChannel(data, client, channel.server);\n                client.emit(\"channelUpdated\", channel, chan);\n                channel.server.channels.update(channel, chan);\n                this.channels.update(channel, chan);\n              }\n            } else {\n              client.emit(\"warn\", \"channel updated but server non-existant\");\n            }\n          }\n\n        } else {\n          client.emit(\"warn\", \"channel updated but not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_ROLE_CREATE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          client.emit(\"serverRoleCreated\", server.roles.add(new Role(data.role, server, client)), server);\n        } else {\n          client.emit(\"warn\", \"server role made but server not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_ROLE_DELETE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let role = server.roles.get(\"id\", data.role_id);\n          if (role) {\n            server.roles.remove(role);\n            client.emit(\"serverRoleDeleted\", role);\n          } else {\n            client.emit(\"warn\", \"server role deleted but role not in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server role deleted but server not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_ROLE_UPDATE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let role = server.roles.get(\"id\", data.role.id);\n          if (role) {\n            let newRole = new Role(data.role, server, client);\n            client.emit(\"serverRoleUpdated\", new Role(role, server, client), newRole);\n            server.roles.update(role, newRole);\n          } else {\n            client.emit(\"warn\", \"server role updated but role not in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server role updated but server not in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_MEMBER_ADD: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n\n          server.memberMap[data.user.id] = {\n            roles: data.roles,\n            mute: false,\n            selfMute: false,\n            deaf: false,\n            selfDeaf: false,\n            joinedAt: Date.parse(data.joined_at),\n            nick: data.nick || null\n          };\n\n          server.memberCount++;\n\n          client.emit(\n            \"serverNewMember\",\n            server,\n            server.members.add(this.users.add(new User(data.user, client)))\n          );\n\n        } else {\n          client.emit(\"warn\", \"server member added but server doesn't exist in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_MEMBER_REMOVE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let user = this.users.get(\"id\", data.user.id);\n          if (user) {\n            client.emit(\"serverMemberRemoved\", server, user);\n            server.memberMap[data.user.id] = null;\n            server.members.remove(user);\n            server.memberCount--;\n          } else {\n            client.emit(\"warn\", \"server member removed but user doesn't exist in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server member removed but server doesn't exist in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_MEMBER_UPDATE: {\n        let server = this.servers.get(\"id\", data.guild_id);\n        if (server) {\n          let user = this.users.add(new User(data.user, client));\n          if (user) {\n            let oldMember = null;\n            if (server.memberMap[data.user.id]) {\n              oldMember = {\n                roles: server.memberMap[data.user.id].roles,\n                mute: server.memberMap[data.user.id].mute,\n                selfMute: server.memberMap[data.user.id].selfMute,\n                deaf: server.memberMap[data.user.id].deaf,\n                selfDeaf: server.memberMap[data.user.id].selfDeaf,\n                nick: server.memberMap[data.user.id].nick\n              };\n            } else {\n              server.memberMap[data.user.id] = {};\n            }\n            server.memberMap[data.user.id].roles = data.roles ? data.roles : server.memberMap[data.user.id].roles;\n            server.memberMap[data.user.id].mute = data.mute || server.memberMap[data.user.id].mute;\n            server.memberMap[data.user.id].selfMute = data.self_mute === undefined ? server.memberMap[data.user.id].selfMute : data.self_mute;\n            server.memberMap[data.user.id].deaf = data.deaf || server.memberMap[data.user.id].deaf;\n            server.memberMap[data.user.id].selfDeaf = data.self_deaf === undefined ? server.memberMap[data.user.id].selfDeaf : data.self_deaf;\n            server.memberMap[data.user.id].nick = data.nick === undefined ? server.memberMap[data.user.id].nick : data.nick || null;\n            client.emit(\"serverMemberUpdated\", server, user, oldMember);\n          } else {\n            client.emit(\"warn\", \"server member removed but user doesn't exist in cache\");\n          }\n        } else {\n          client.emit(\"warn\", \"server member updated but server doesn't exist in cache\");\n        }\n        break;\n      }\n      case PacketType.PRESENCE_UPDATE: {\n\n        let user = this.users.add(new User(data.user, client));\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n\n          server.members.add(user);\n\n          data.user.username = data.user.username || user.username;\n          data.user.id = data.user.id || user.id;\n          data.user.avatar = data.user.avatar !== undefined ? data.user.avatar : user.avatar;\n          data.user.discriminator = data.user.discriminator || user.discriminator;\n          data.user.status = data.status || user.status;\n          data.user.game = data.game !== undefined ? data.game : user.game;\n          data.user.bot = data.user.bot !== undefined ? data.user.bot : user.bot;\n\n          let presenceUser = new User(data.user, client);\n\n          if (!presenceUser.equalsStrict(user)) {\n            client.emit(\"presence\", user, presenceUser);\n            this.users.update(user, presenceUser);\n          }\n\n        } else {\n          client.emit(\"warn\", \"presence update but user/server not in cache\");\n        }\n\n        break;\n      }\n      case PacketType.USER_UPDATE: {\n\n        let user = this.users.get(\"id\", data.id);\n\n        if (user) {\n\n          data.username = data.username || user.username;\n          data.id = data.id || user.id;\n          data.avatar = data.avatar || user.avatar;\n          data.discriminator = data.discriminator || user.discriminator;\n          this.email = data.email || this.email;\n\n          let presenceUser = new User(data, client);\n\n          client.emit(\"presence\", user, presenceUser);\n          this.users.update(user, presenceUser);\n\n        } else {\n          client.emit(\"warn\", \"user update but user not in cache (this should never happen)\");\n        }\n\n        break;\n      }\n      case PacketType.TYPING: {\n\n        let user = this.users.get(\"id\", data.user_id);\n        let channel = this.channels.get(\"id\", data.channel_id) || this.private_channels.get(\"id\", data.channel_id);\n\n        if (user && channel) {\n          if (user.typing.since) {\n            user.typing.since = Date.now();\n            user.typing.channel = channel;\n          } else {\n            user.typing.since = Date.now();\n            user.typing.channel = channel;\n            client.emit(\"userTypingStarted\", user, channel);\n          }\n          setTimeout(() => {\n            if (Date.now() - user.typing.since > 5500) {\n              // they haven't typed since\n              user.typing.since = null;\n              user.typing.channel = null;\n              client.emit(\"userTypingStopped\", user, channel);\n            }\n          }, 6000);\n\n        } else {\n          client.emit(\"warn\", \"user typing but user or channel not existant in cache\");\n        }\n        break;\n      }\n      case PacketType.SERVER_BAN_ADD: {\n        let user = this.users.get(\"id\", data.user.id);\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n          client.emit(\"userBanned\", user, server);\n        } else {\n          client.emit(\"warn\", \"user banned but user/server not in cache.\");\n        }\n        break;\n      }\n      case PacketType.SERVER_BAN_REMOVE: {\n        let user = this.users.get(\"id\", data.user.id);\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n          client.emit(\"userUnbanned\", user, server);\n        } else {\n          client.emit(\"warn\", \"user unbanned but user/server not in cache.\");\n        }\n        break;\n      }\n      case PacketType.USER_NOTE_UPDATE: {\n        if (this.user.bot) {\n          return;\n        }\n        let user = this.users.get(\"id\", data.id);\n        let oldNote = user.note;\n        let note = data.note || null;\n\n        // user in cache\n        if (user) {\n          let updatedUser = user;\n          updatedUser.note = note;\n\n          client.emit(\"noteUpdated\", user, oldNote);\n\n          this.users.update(user, updatedUser);\n\n        } else {\n          client.emit(\"warn\", \"note updated but user not in cache\");\n        }\n        break;\n      }\n      case PacketType.VOICE_STATE_UPDATE: {\n        let user = this.users.get(\"id\", data.user_id);\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (user && server) {\n\n          if (data.channel_id) {\n            // in voice channel\n            let channel = this.channels.get(\"id\", data.channel_id);\n            if (channel && channel.type === 2) {\n              server.eventVoiceStateUpdate(channel, user, data);\n            } else {\n              client.emit(\"warn\", \"voice state channel not in cache\");\n            }\n          } else {\n            // not in voice channel\n            client.emit(\"voiceLeave\", server.eventVoiceLeave(user), user);\n          }\n\n        } else {\n          client.emit(\"warn\", \"voice state update but user or server not in cache\");\n        }\n\n        if (user && user.id === this.user.id) { // only for detecting self user movements for connections.\n          let connection = this.voiceConnections.get(\"server\", server);\n          // existing connection, perhaps channel moved\n          if (connection && connection.voiceChannel && connection.voiceChannel.id !== data.channel_id) {\n            // moved, update info\n            connection.voiceChannel = this.channels.get(\"id\", data.channel_id);\n            client.emit(\"voiceMoved\", connection.voiceChannel); // Moved to a new channel\n          }\n        }\n\n        break;\n      }\n      case PacketType.SERVER_MEMBERS_CHUNK: {\n\n        let server = this.servers.get(\"id\", data.guild_id);\n\n        if (server) {\n\n          let testtime = Date.now();\n\n          for (let user of data.members) {\n            server.memberMap[user.user.id] = {\n              roles: user.roles,\n              mute: user.mute,\n              selfMute: false,\n              deaf: user.deaf,\n              selfDeaf: false,\n              joinedAt: Date.parse(user.joined_at),\n              nick: user.nick || null\n            };\n            server.members.add(this.users.add(new User(user.user, client)));\n          }\n\n          if (this.forceFetchCount.hasOwnProperty(server.id)) {\n            if (this.forceFetchCount[server.id] <= 1) {\n              delete this.forceFetchCount[server.id];\n              this.restartServerCreateTimeout();\n            } else {\n              this.forceFetchCount[server.id]--;\n            }\n          }\n\n          client.emit(\"debug\", (Date.now() - testtime) + \"ms for \" + data.members.length + \" user chunk for server with id \" + server.id);\n\n        } else {\n          client.emit(\"warn\", \"chunk update received but server not in cache\");\n        }\n\n        break;\n      }\n      case PacketType.FRIEND_ADD: {\n        if (this.user.bot) {\n          return;\n        }\n        if (data.type === 1) { // accepted/got accepted a friend request\n          let inUser = this.incoming_friend_requests.get(\"id\", data.id);\n          if (inUser) {\n            // client accepted another user\n            this.incoming_friend_requests.remove(this.friends.add(new User(data.user, client)));\n            return;\n          }\n\n          let outUser = this.outgoing_friend_requests.get(\"id\", data.id);\n          if (outUser) {\n            // another user accepted the client\n            this.outgoing_friend_requests.remove(this.friends.add(new User(data.user, client)));\n            client.emit(\"friendRequestAccepted\", outUser);\n            return;\n          }\n        } else if (data.type === 2) {\n          // client received block\n          this.blocked_users.add(new User(data.user, client));\n        } else if (data.type === 3) {\n          // client received friend request\n          client.emit(\"friendRequestReceived\", this.incoming_friend_requests.add(new User(data.user, client)));\n        } else if (data.type === 4) {\n          // client sent friend request\n          this.outgoing_friend_requests.add(new User(data.user, client));\n        }\n        break;\n      }\n      case PacketType.FRIEND_REMOVE: {\n        if (this.user.bot) {\n          return;\n        }\n        let user = this.friends.get(\"id\", data.id);\n        if (user) {\n          this.friends.remove(user);\n          client.emit(\"friendRemoved\", user);\n          return;\n        }\n\n        user = this.blocked_users.get(\"id\", data.id);\n        if (user) { // they rejected friend request\n          this.blocked_users.remove(user);\n          return;\n        }\n\n        user = this.incoming_friend_requests.get(\"id\", data.id);\n        if (user) { // they rejected outgoing friend request OR client user manually deleted incoming through web client/other clients\n          let rejectedUser = this.outgoing_friend_requests.get(\"id\", user.id);\n          if (rejectedUser) {\n            // other person rejected outgoing\n            client.emit(\"friendRequestRejected\", this.outgoing_friend_requests.remove(rejectedUser));\n            return;\n          }\n\n          // incoming deleted manually\n          this.incoming_friend_requests.remove(user);\n          return;\n        }\n\n        user = this.outgoing_friend_requests.get(\"id\", data.id);\n        if (user) { // client cancelled incoming friend request OR client user manually deleted outgoing through web client/other clients\n          let incomingCancel = this.incoming_friend_requests.get(\"id\", user.id);\n          if (incomingCancel) {\n            // client cancelled incoming\n            this.incoming_friend_requests.remove(user);\n            return;\n          }\n\n          // outgoing deleted manually\n          this.outgoing_friend_requests.remove(user);\n          return;\n        }\n        break;\n      }\n      case PacketType.SERVER_SYNC: {\n        let guild = this.servers.get(data.id);\n        data.members.forEach((dataUser) => {\n          guild.memberMap[dataUser.user.id] = {\n            roles: dataUser.roles,\n            mute: dataUser.mute,\n            selfMute: dataUser.self_mute,\n            deaf: dataUser.deaf,\n            selfDeaf: dataUser.self_deaf,\n            joinedAt: Date.parse(dataUser.joined_at),\n            nick: dataUser.nick || null\n          };\n          guild.members.add(client.internal.users.add(new User(dataUser.user, client)));\n        });\n        for (let presence of data.presences) {\n          let user = client.internal.users.get(\"id\", presence.user.id);\n          if (user) {\n            user.status = presence.status;\n            user.game = presence.game;\n          }\n        }\n        if (guild.pendingVoiceStates && guild.pendingVoiceStates.length > 0) {\n          for (let voiceState of guild.pendingVoiceStates) {\n            let user = guild.members.get(\"id\", voiceState.user_id);\n            if (user) {\n              guild.memberMap[user.id] = guild.memberMap[user.id] || {};\n              guild.memberMap[user.id].mute = voiceState.mute || guild.memberMap[user.id].mute;\n              guild.memberMap[user.id].selfMute = voiceState.self_mute === undefined ? guild.memberMap[user.id].selfMute : voiceState.self_mute;\n              guild.memberMap[user.id].deaf = voiceState.deaf || guild.memberMap[user.id].deaf;\n              guild.memberMap[user.id].selfDeaf = voiceState.self_deaf === undefined ? guild.memberMap[user.id].selfDeaf : voiceState.self_deaf;\n              let channel = guild.channels.get(\"id\", voiceState.channel_id);\n              if (channel) {\n                guild.eventVoiceJoin(user, channel);\n              } else {\n                guild.client.emit(\"warn\", \"channel doesn't exist even though GUILD_SYNC expects them to\");\n              }\n            } else {\n              guild.client.emit(\"warn\", \"user doesn't exist even though GUILD_SYNC expects them to\");\n            }\n          }\n        }\n        guild.pendingVoiceStates = null;\n        this.unsyncedGuilds--;\n        this.restartServerCreateTimeout();\n        break;\n      }\n      default: {\n        client.emit(\"unknown\", packet);\n        break;\n      }\n    }\n  }\n\n  resume() {\n    let data = {\n      op: 6,\n      d: {\n        token: this.token,\n        session_id: this.sessionID,\n        seq: this.sequence\n      }\n    };\n\n    this.sendWS(data);\n  }\n\n  identify() {\n    let data = {\n      op: 2,\n      d: {\n        token: this.token,\n        v: GATEWAY_VERSION,\n        compress: this.client.options.compress,\n        large_threshold: this.client.options.largeThreshold,\n        properties: {\n          \"$os\": process.platform,\n          \"$browser\": \"discord.js\",\n          \"$device\": \"discord.js\",\n          \"$referrer\": \"\",\n          \"$referring_domain\": \"\"\n        }\n      }\n    };\n\n    if (this.client.options.shard) {\n      data.d.shard = this.client.options.shard;\n    }\n\n    this.sendWS(data);\n  }\n\n  heartbeat() {\n    if (!this.heartbeatAcked) this.disconnected(true);\n    this.heartbeatAcked = false;\n    this.sendWS({op: 1, d: Date.now()});\n  }\n}\n"]}